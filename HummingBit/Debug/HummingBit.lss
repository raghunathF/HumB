
HummingBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002260  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  20000010  00002270  00020010  2**2
                  ALLOC
  3 .stack        00000400  20000180  000023e0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00034ac3  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000506b  00000000  00000000  00054b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000526d  00000000  00000000  00059bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000680  00000000  00000000  0005ee2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006f8  00000000  00000000  0005f4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001812f  00000000  00000000  0005fba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011fca  00000000  00000000  00077cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006fff3  00000000  00000000  00089c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000eb4  00000000  00000000  000f9c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 05 00 20 01 1e 00 00 fd 1d 00 00 fd 1d 00 00     ... ............
	...
      2c:	fd 1d 00 00 00 00 00 00 00 00 00 00 fd 1d 00 00     ................
      3c:	fd 1d 00 00 fd 1d 00 00 fd 1d 00 00 fd 1d 00 00     ................
      4c:	fd 1d 00 00 cd 0d 00 00 fd 1d 00 00 fd 1d 00 00     ................
      5c:	00 00 00 00 fd 1d 00 00 9d 0d 00 00 ad 0d 00 00     ................
      6c:	bd 0d 00 00 01 0a 00 00 7d 0d 00 00 8d 0d 00 00     ........}.......
      7c:	c9 05 00 00 fd 1d 00 00 fd 1d 00 00 fd 1d 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000010 	.word	0x20000010
      ac:	00000000 	.word	0x00000000
      b0:	00002260 	.word	0x00002260

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000014 	.word	0x20000014
      e0:	00002260 	.word	0x00002260
      e4:	00002260 	.word	0x00002260
      e8:	00000000 	.word	0x00000000

000000ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
      ee:	2000      	movs	r0, #0
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <delay_init+0x28>)
      f2:	4798      	blx	r3
      f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
      f6:	4c08      	ldr	r4, [pc, #32]	; (118 <delay_init+0x2c>)
      f8:	21fa      	movs	r1, #250	; 0xfa
      fa:	0089      	lsls	r1, r1, #2
      fc:	47a0      	blx	r4
      fe:	4b07      	ldr	r3, [pc, #28]	; (11c <delay_init+0x30>)
     100:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     102:	4907      	ldr	r1, [pc, #28]	; (120 <delay_init+0x34>)
     104:	0028      	movs	r0, r5
     106:	47a0      	blx	r4
     108:	4b06      	ldr	r3, [pc, #24]	; (124 <delay_init+0x38>)
     10a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     10c:	2205      	movs	r2, #5
     10e:	4b06      	ldr	r3, [pc, #24]	; (128 <delay_init+0x3c>)
     110:	601a      	str	r2, [r3, #0]
}
     112:	bd70      	pop	{r4, r5, r6, pc}
     114:	00001b49 	.word	0x00001b49
     118:	00001f25 	.word	0x00001f25
     11c:	20000000 	.word	0x20000000
     120:	000f4240 	.word	0x000f4240
     124:	20000004 	.word	0x20000004
     128:	e000e010 	.word	0xe000e010

0000012c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     12c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <delay_cycles_ms+0x24>)
     130:	681c      	ldr	r4, [r3, #0]
static inline void delay_cycles(
		const uint32_t n)

{
	if (n > 0) {
		SysTick->LOAD = n;
     132:	4a08      	ldr	r2, [pc, #32]	; (154 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     134:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     136:	2180      	movs	r1, #128	; 0x80
     138:	0249      	lsls	r1, r1, #9
	while (n--) {
     13a:	3801      	subs	r0, #1
     13c:	d307      	bcc.n	14e <delay_cycles_ms+0x22>
	if (n > 0) {
     13e:	2c00      	cmp	r4, #0
     140:	d0fb      	beq.n	13a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     142:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     144:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     146:	6813      	ldr	r3, [r2, #0]
     148:	420b      	tst	r3, r1
     14a:	d0fc      	beq.n	146 <delay_cycles_ms+0x1a>
     14c:	e7f5      	b.n	13a <delay_cycles_ms+0xe>
	}
}
     14e:	bd30      	pop	{r4, r5, pc}
     150:	20000000 	.word	0x20000000
     154:	e000e010 	.word	0xe000e010

00000158 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     158:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     15a:	2200      	movs	r2, #0
     15c:	2300      	movs	r3, #0
     15e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     160:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     162:	2100      	movs	r1, #0
     164:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     166:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     168:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     16a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     16c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     16e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     170:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     172:	2480      	movs	r4, #128	; 0x80
     174:	00a4      	lsls	r4, r4, #2
     176:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     178:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     17a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     17c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     17e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     180:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     182:	3cd7      	subs	r4, #215	; 0xd7
     184:	3cff      	subs	r4, #255	; 0xff
     186:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     188:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     18a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     18c:	3c06      	subs	r4, #6
     18e:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     190:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     192:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     194:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     196:	232b      	movs	r3, #43	; 0x2b
     198:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     19a:	3301      	adds	r3, #1
     19c:	54c1      	strb	r1, [r0, r3]
}
     19e:	bd10      	pop	{r4, pc}

000001a0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a2:	46d6      	mov	lr, sl
     1a4:	464f      	mov	r7, r9
     1a6:	4646      	mov	r6, r8
     1a8:	b5c0      	push	{r6, r7, lr}
     1aa:	b096      	sub	sp, #88	; 0x58
     1ac:	0007      	movs	r7, r0
     1ae:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1b0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1b2:	4ac6      	ldr	r2, [pc, #792]	; (4cc <STACK_SIZE+0xcc>)
     1b4:	6a10      	ldr	r0, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	005b      	lsls	r3, r3, #1
     1ba:	4303      	orrs	r3, r0
     1bc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1be:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1c0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d505      	bpl.n	1d2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     1c6:	b016      	add	sp, #88	; 0x58
     1c8:	bc1c      	pop	{r2, r3, r4}
     1ca:	4690      	mov	r8, r2
     1cc:	4699      	mov	r9, r3
     1ce:	46a2      	mov	sl, r4
     1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1d4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4f5      	bmi.n	1c6 <adc_init+0x26>
	module_inst->reference = config->reference;
     1da:	7873      	ldrb	r3, [r6, #1]
     1dc:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1e2:	4abb      	ldr	r2, [pc, #748]	; (4d0 <STACK_SIZE+0xd0>)
     1e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60bb      	str	r3, [r7, #8]
     1f0:	60fb      	str	r3, [r7, #12]
     1f2:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1f8:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1fc:	4bb5      	ldr	r3, [pc, #724]	; (4d4 <STACK_SIZE+0xd4>)
     1fe:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     200:	232a      	movs	r3, #42	; 0x2a
     202:	5cf3      	ldrb	r3, [r6, r3]
     204:	2b00      	cmp	r3, #0
     206:	d105      	bne.n	214 <adc_init+0x74>
     208:	7d33      	ldrb	r3, [r6, #20]
     20a:	2b00      	cmp	r3, #0
     20c:	d102      	bne.n	214 <adc_init+0x74>
		module_inst->software_trigger = true;
     20e:	3301      	adds	r3, #1
     210:	777b      	strb	r3, [r7, #29]
     212:	e001      	b.n	218 <adc_init+0x78>
		module_inst->software_trigger = false;
     214:	2300      	movs	r3, #0
     216:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     218:	683b      	ldr	r3, [r7, #0]
     21a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21c:	7833      	ldrb	r3, [r6, #0]
     21e:	466a      	mov	r2, sp
     220:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     222:	4669      	mov	r1, sp
     224:	2013      	movs	r0, #19
     226:	4bac      	ldr	r3, [pc, #688]	; (4d8 <STACK_SIZE+0xd8>)
     228:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     22a:	2013      	movs	r0, #19
     22c:	4bab      	ldr	r3, [pc, #684]	; (4dc <STACK_SIZE+0xdc>)
     22e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     230:	232c      	movs	r3, #44	; 0x2c
     232:	5cf2      	ldrb	r2, [r6, r3]
     234:	2a00      	cmp	r2, #0
     236:	d054      	beq.n	2e2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     238:	3b01      	subs	r3, #1
     23a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     23c:	7b33      	ldrb	r3, [r6, #12]
     23e:	18eb      	adds	r3, r5, r3
     240:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     242:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     244:	b2c9      	uxtb	r1, r1
     246:	428b      	cmp	r3, r1
     248:	d221      	bcs.n	28e <adc_init+0xee>
     24a:	1952      	adds	r2, r2, r5
     24c:	b2d3      	uxtb	r3, r2
     24e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     250:	4ba3      	ldr	r3, [pc, #652]	; (4e0 <STACK_SIZE+0xe0>)
     252:	469a      	mov	sl, r3
     254:	e003      	b.n	25e <adc_init+0xbe>
			offset++;
     256:	3501      	adds	r5, #1
     258:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     25a:	454d      	cmp	r5, r9
     25c:	d017      	beq.n	28e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     25e:	240f      	movs	r4, #15
     260:	402c      	ands	r4, r5
     262:	7b33      	ldrb	r3, [r6, #12]
     264:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     266:	2250      	movs	r2, #80	; 0x50
     268:	499e      	ldr	r1, [pc, #632]	; (4e4 <STACK_SIZE+0xe4>)
     26a:	a802      	add	r0, sp, #8
     26c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     26e:	2c09      	cmp	r4, #9
     270:	d8f1      	bhi.n	256 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     272:	00a4      	lsls	r4, r4, #2
     274:	ab02      	add	r3, sp, #8
     276:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     278:	a901      	add	r1, sp, #4
     27a:	2300      	movs	r3, #0
     27c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     27e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     280:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     282:	3301      	adds	r3, #1
     284:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     286:	b2c0      	uxtb	r0, r0
     288:	4b97      	ldr	r3, [pc, #604]	; (4e8 <STACK_SIZE+0xe8>)
     28a:	4798      	blx	r3
     28c:	e7e3      	b.n	256 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     28e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     290:	2250      	movs	r2, #80	; 0x50
     292:	4994      	ldr	r1, [pc, #592]	; (4e4 <STACK_SIZE+0xe4>)
     294:	a802      	add	r0, sp, #8
     296:	4b92      	ldr	r3, [pc, #584]	; (4e0 <STACK_SIZE+0xe0>)
     298:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29a:	2c09      	cmp	r4, #9
     29c:	d913      	bls.n	2c6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     29e:	7d73      	ldrb	r3, [r6, #21]
     2a0:	009b      	lsls	r3, r3, #2
     2a2:	b2db      	uxtb	r3, r3
     2a4:	4642      	mov	r2, r8
     2a6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a8:	7db3      	ldrb	r3, [r6, #22]
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	7872      	ldrb	r2, [r6, #1]
     2ae:	4313      	orrs	r3, r2
     2b0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b2:	4642      	mov	r2, r8
     2b4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2b6:	7933      	ldrb	r3, [r6, #4]
     2b8:	2b34      	cmp	r3, #52	; 0x34
     2ba:	d900      	bls.n	2be <adc_init+0x11e>
     2bc:	e17b      	b.n	5b6 <STACK_SIZE+0x1b6>
     2be:	009b      	lsls	r3, r3, #2
     2c0:	4a8a      	ldr	r2, [pc, #552]	; (4ec <STACK_SIZE+0xec>)
     2c2:	58d3      	ldr	r3, [r2, r3]
     2c4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c6:	00a4      	lsls	r4, r4, #2
     2c8:	ab02      	add	r3, sp, #8
     2ca:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2300      	movs	r3, #0
     2d0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2d2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d6:	3301      	adds	r3, #1
     2d8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2da:	b2c0      	uxtb	r0, r0
     2dc:	4b82      	ldr	r3, [pc, #520]	; (4e8 <STACK_SIZE+0xe8>)
     2de:	4798      	blx	r3
     2e0:	e7dd      	b.n	29e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     2e2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2e4:	2250      	movs	r2, #80	; 0x50
     2e6:	497f      	ldr	r1, [pc, #508]	; (4e4 <STACK_SIZE+0xe4>)
     2e8:	a802      	add	r0, sp, #8
     2ea:	4b7d      	ldr	r3, [pc, #500]	; (4e0 <STACK_SIZE+0xe0>)
     2ec:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ee:	2c09      	cmp	r4, #9
     2f0:	d915      	bls.n	31e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2f2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2f4:	2250      	movs	r2, #80	; 0x50
     2f6:	497b      	ldr	r1, [pc, #492]	; (4e4 <STACK_SIZE+0xe4>)
     2f8:	a802      	add	r0, sp, #8
     2fa:	4b79      	ldr	r3, [pc, #484]	; (4e0 <STACK_SIZE+0xe0>)
     2fc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2fe:	2c09      	cmp	r4, #9
     300:	d8cd      	bhi.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     302:	00a4      	lsls	r4, r4, #2
     304:	ab02      	add	r3, sp, #8
     306:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     308:	a901      	add	r1, sp, #4
     30a:	2300      	movs	r3, #0
     30c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     310:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     312:	3301      	adds	r3, #1
     314:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     316:	b2c0      	uxtb	r0, r0
     318:	4b73      	ldr	r3, [pc, #460]	; (4e8 <STACK_SIZE+0xe8>)
     31a:	4798      	blx	r3
     31c:	e7bf      	b.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31e:	00a4      	lsls	r4, r4, #2
     320:	ab02      	add	r3, sp, #8
     322:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     324:	a901      	add	r1, sp, #4
     326:	2300      	movs	r3, #0
     328:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     32a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     32c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     32e:	3301      	adds	r3, #1
     330:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     332:	b2c0      	uxtb	r0, r0
     334:	4b6c      	ldr	r3, [pc, #432]	; (4e8 <STACK_SIZE+0xe8>)
     336:	4798      	blx	r3
     338:	e7db      	b.n	2f2 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     33a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     33c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     33e:	2102      	movs	r1, #2
     340:	e01a      	b.n	378 <adc_init+0x1d8>
		adjres = config->divide_result;
     342:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     344:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     346:	2410      	movs	r4, #16
     348:	e016      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     34a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     34c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34e:	2101      	movs	r1, #1
     350:	e012      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     352:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     354:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     356:	2100      	movs	r1, #0
     358:	e00e      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     35c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     35e:	2100      	movs	r1, #0
     360:	e00a      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     362:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     364:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     366:	2100      	movs	r1, #0
     368:	e006      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     36a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     36c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     36e:	2100      	movs	r1, #0
     370:	e002      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     372:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     374:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     376:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     378:	0109      	lsls	r1, r1, #4
     37a:	2270      	movs	r2, #112	; 0x70
     37c:	400a      	ands	r2, r1
     37e:	4313      	orrs	r3, r2
     380:	4642      	mov	r2, r8
     382:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     384:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     386:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     388:	2b3f      	cmp	r3, #63	; 0x3f
     38a:	d900      	bls.n	38e <adc_init+0x1ee>
     38c:	e71b      	b.n	1c6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     38e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     390:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     392:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     39a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     39c:	8872      	ldrh	r2, [r6, #2]
     39e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3a0:	2224      	movs	r2, #36	; 0x24
     3a2:	5cb2      	ldrb	r2, [r6, r2]
     3a4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3a6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3a8:	7d32      	ldrb	r2, [r6, #20]
     3aa:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ac:	4313      	orrs	r3, r2
     3ae:	7cb2      	ldrb	r2, [r6, #18]
     3b0:	0052      	lsls	r2, r2, #1
     3b2:	4313      	orrs	r3, r2
     3b4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3b6:	4642      	mov	r2, r8
     3b8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ba:	7e33      	ldrb	r3, [r6, #24]
     3bc:	2b00      	cmp	r3, #0
     3be:	d020      	beq.n	402 <STACK_SIZE+0x2>
		switch (resolution) {
     3c0:	2c10      	cmp	r4, #16
     3c2:	d100      	bne.n	3c6 <adc_init+0x226>
     3c4:	e0d9      	b.n	57a <STACK_SIZE+0x17a>
     3c6:	d800      	bhi.n	3ca <adc_init+0x22a>
     3c8:	e098      	b.n	4fc <STACK_SIZE+0xfc>
     3ca:	2c20      	cmp	r4, #32
     3cc:	d100      	bne.n	3d0 <adc_init+0x230>
     3ce:	e0b6      	b.n	53e <STACK_SIZE+0x13e>
     3d0:	2c30      	cmp	r4, #48	; 0x30
     3d2:	d116      	bne.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     3d4:	7cf2      	ldrb	r2, [r6, #19]
     3d6:	2a00      	cmp	r2, #0
     3d8:	d00a      	beq.n	3f0 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     3da:	69f2      	ldr	r2, [r6, #28]
     3dc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     3de:	2017      	movs	r0, #23
			if (config->differential_mode &&
     3e0:	2aff      	cmp	r2, #255	; 0xff
     3e2:	d900      	bls.n	3e6 <adc_init+0x246>
     3e4:	e6ef      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3e6:	6a32      	ldr	r2, [r6, #32]
     3e8:	3280      	adds	r2, #128	; 0x80
     3ea:	2aff      	cmp	r2, #255	; 0xff
     3ec:	d900      	bls.n	3f0 <adc_init+0x250>
     3ee:	e6ea      	b.n	1c6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3f2:	69f2      	ldr	r2, [r6, #28]
     3f4:	2aff      	cmp	r2, #255	; 0xff
     3f6:	dd00      	ble.n	3fa <adc_init+0x25a>
     3f8:	e6e5      	b.n	1c6 <adc_init+0x26>
     3fa:	6a32      	ldr	r2, [r6, #32]
     3fc:	2aff      	cmp	r2, #255	; 0xff
     3fe:	dd00      	ble.n	402 <STACK_SIZE+0x2>
     400:	e6e1      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     402:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     404:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     406:	b252      	sxtb	r2, r2
     408:	2a00      	cmp	r2, #0
     40a:	dbfb      	blt.n	404 <STACK_SIZE+0x4>
	adc_module->WINCTRL.reg = config->window.window_mode;
     40c:	4642      	mov	r2, r8
     40e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     410:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     412:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     414:	b25b      	sxtb	r3, r3
     416:	2b00      	cmp	r3, #0
     418:	dbfb      	blt.n	412 <STACK_SIZE+0x12>
	adc_module->WINLT.reg =
     41a:	8bb3      	ldrh	r3, [r6, #28]
     41c:	4642      	mov	r2, r8
     41e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     420:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     422:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     424:	b25b      	sxtb	r3, r3
     426:	2b00      	cmp	r3, #0
     428:	dbfb      	blt.n	422 <STACK_SIZE+0x22>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     42a:	8c33      	ldrh	r3, [r6, #32]
     42c:	4642      	mov	r2, r8
     42e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     430:	232c      	movs	r3, #44	; 0x2c
     432:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     434:	2b00      	cmp	r3, #0
     436:	d005      	beq.n	444 <STACK_SIZE+0x44>
		inputs_to_scan--;
     438:	3b01      	subs	r3, #1
     43a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     43c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     43e:	2b0f      	cmp	r3, #15
     440:	d900      	bls.n	444 <STACK_SIZE+0x44>
     442:	e6c0      	b.n	1c6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     444:	222b      	movs	r2, #43	; 0x2b
     446:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     448:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     44a:	290f      	cmp	r1, #15
     44c:	d900      	bls.n	450 <STACK_SIZE+0x50>
     44e:	e6ba      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     450:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     452:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     454:	b252      	sxtb	r2, r2
     456:	2a00      	cmp	r2, #0
     458:	dbfb      	blt.n	452 <STACK_SIZE+0x52>
			config->negative_input |
     45a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     45c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     45e:	4302      	orrs	r2, r0
     460:	68b0      	ldr	r0, [r6, #8]
     462:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     464:	0509      	lsls	r1, r1, #20
			config->negative_input |
     466:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     468:	041b      	lsls	r3, r3, #16
			config->negative_input |
     46a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     46c:	4642      	mov	r2, r8
     46e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     470:	232a      	movs	r3, #42	; 0x2a
     472:	5cf3      	ldrb	r3, [r6, r3]
     474:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     476:	230f      	movs	r3, #15
     478:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     47a:	3315      	adds	r3, #21
     47c:	5cf3      	ldrb	r3, [r6, r3]
     47e:	2b00      	cmp	r3, #0
     480:	d012      	beq.n	4a8 <STACK_SIZE+0xa8>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     482:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     484:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <STACK_SIZE+0xf0>)
			return STATUS_ERR_INVALID_ARG;
     486:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     488:	4293      	cmp	r3, r2
     48a:	d900      	bls.n	48e <STACK_SIZE+0x8e>
     48c:	e69b      	b.n	1c6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     48e:	4642      	mov	r2, r8
     490:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     492:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     494:	2380      	movs	r3, #128	; 0x80
     496:	011b      	lsls	r3, r3, #4
     498:	18d3      	adds	r3, r2, r3
     49a:	4915      	ldr	r1, [pc, #84]	; (4f0 <STACK_SIZE+0xf0>)
     49c:	b29b      	uxth	r3, r3
     49e:	428b      	cmp	r3, r1
     4a0:	d900      	bls.n	4a4 <STACK_SIZE+0xa4>
     4a2:	e690      	b.n	1c6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4a4:	4643      	mov	r3, r8
     4a6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4a8:	4b12      	ldr	r3, [pc, #72]	; (4f4 <STACK_SIZE+0xf4>)
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	015b      	lsls	r3, r3, #5
     4ae:	22e0      	movs	r2, #224	; 0xe0
     4b0:	00d2      	lsls	r2, r2, #3
     4b2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4b4:	4a10      	ldr	r2, [pc, #64]	; (4f8 <STACK_SIZE+0xf8>)
     4b6:	6851      	ldr	r1, [r2, #4]
     4b8:	0149      	lsls	r1, r1, #5
     4ba:	6812      	ldr	r2, [r2, #0]
     4bc:	0ed2      	lsrs	r2, r2, #27
     4be:	430a      	orrs	r2, r1
     4c0:	b2d2      	uxtb	r2, r2
			) |
     4c2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4c4:	4642      	mov	r2, r8
     4c6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4c8:	2000      	movs	r0, #0
     4ca:	e67c      	b.n	1c6 <adc_init+0x26>
     4cc:	40000400 	.word	0x40000400
     4d0:	40000800 	.word	0x40000800
     4d4:	20000060 	.word	0x20000060
     4d8:	00001c61 	.word	0x00001c61
     4dc:	00001bd5 	.word	0x00001bd5
     4e0:	00002085 	.word	0x00002085
     4e4:	0000216c 	.word	0x0000216c
     4e8:	00001d59 	.word	0x00001d59
     4ec:	00002098 	.word	0x00002098
     4f0:	00000fff 	.word	0x00000fff
     4f4:	00806024 	.word	0x00806024
     4f8:	00806020 	.word	0x00806020
		switch (resolution) {
     4fc:	2c00      	cmp	r4, #0
     4fe:	d000      	beq.n	502 <STACK_SIZE+0x102>
     500:	e77f      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     502:	7cf2      	ldrb	r2, [r6, #19]
     504:	2a00      	cmp	r2, #0
     506:	d00f      	beq.n	528 <STACK_SIZE+0x128>
					(config->window.window_lower_value > 2047 ||
     508:	69f2      	ldr	r2, [r6, #28]
     50a:	2180      	movs	r1, #128	; 0x80
     50c:	0109      	lsls	r1, r1, #4
     50e:	468c      	mov	ip, r1
     510:	4462      	add	r2, ip
			if (config->differential_mode &&
     512:	492a      	ldr	r1, [pc, #168]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23
			if (config->differential_mode &&
     516:	428a      	cmp	r2, r1
     518:	d900      	bls.n	51c <STACK_SIZE+0x11c>
     51a:	e654      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     51c:	6a32      	ldr	r2, [r6, #32]
     51e:	4462      	add	r2, ip
     520:	4926      	ldr	r1, [pc, #152]	; (5bc <STACK_SIZE+0x1bc>)
     522:	428a      	cmp	r2, r1
     524:	d900      	bls.n	528 <STACK_SIZE+0x128>
     526:	e64e      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     528:	4a24      	ldr	r2, [pc, #144]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     52a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     52c:	69f1      	ldr	r1, [r6, #28]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <STACK_SIZE+0x134>
     532:	e648      	b.n	1c6 <adc_init+0x26>
     534:	6a31      	ldr	r1, [r6, #32]
     536:	4291      	cmp	r1, r2
     538:	dd00      	ble.n	53c <STACK_SIZE+0x13c>
     53a:	e644      	b.n	1c6 <adc_init+0x26>
     53c:	e761      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     53e:	7cf2      	ldrb	r2, [r6, #19]
     540:	2a00      	cmp	r2, #0
     542:	d00f      	beq.n	564 <STACK_SIZE+0x164>
					(config->window.window_lower_value > 511 ||
     544:	69f2      	ldr	r2, [r6, #28]
     546:	2180      	movs	r1, #128	; 0x80
     548:	0089      	lsls	r1, r1, #2
     54a:	468c      	mov	ip, r1
     54c:	4462      	add	r2, ip
			if (config->differential_mode &&
     54e:	491c      	ldr	r1, [pc, #112]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     550:	2017      	movs	r0, #23
			if (config->differential_mode &&
     552:	428a      	cmp	r2, r1
     554:	d900      	bls.n	558 <STACK_SIZE+0x158>
     556:	e636      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     558:	6a32      	ldr	r2, [r6, #32]
     55a:	4462      	add	r2, ip
     55c:	4918      	ldr	r1, [pc, #96]	; (5c0 <STACK_SIZE+0x1c0>)
     55e:	428a      	cmp	r2, r1
     560:	d900      	bls.n	564 <STACK_SIZE+0x164>
     562:	e630      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     564:	4a16      	ldr	r2, [pc, #88]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     568:	69f1      	ldr	r1, [r6, #28]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <STACK_SIZE+0x170>
     56e:	e62a      	b.n	1c6 <adc_init+0x26>
     570:	6a31      	ldr	r1, [r6, #32]
     572:	4291      	cmp	r1, r2
     574:	dd00      	ble.n	578 <STACK_SIZE+0x178>
     576:	e626      	b.n	1c6 <adc_init+0x26>
     578:	e743      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     57a:	7cf2      	ldrb	r2, [r6, #19]
     57c:	2a00      	cmp	r2, #0
     57e:	d00f      	beq.n	5a0 <STACK_SIZE+0x1a0>
					(config->window.window_lower_value > 32767 ||
     580:	69f2      	ldr	r2, [r6, #28]
     582:	2180      	movs	r1, #128	; 0x80
     584:	0209      	lsls	r1, r1, #8
     586:	468c      	mov	ip, r1
     588:	4462      	add	r2, ip
			if (config->differential_mode &&
     58a:	490e      	ldr	r1, [pc, #56]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     58c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     58e:	428a      	cmp	r2, r1
     590:	d900      	bls.n	594 <STACK_SIZE+0x194>
     592:	e618      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     594:	6a32      	ldr	r2, [r6, #32]
     596:	4462      	add	r2, ip
     598:	490a      	ldr	r1, [pc, #40]	; (5c4 <STACK_SIZE+0x1c4>)
     59a:	428a      	cmp	r2, r1
     59c:	d900      	bls.n	5a0 <STACK_SIZE+0x1a0>
     59e:	e612      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5a0:	4a08      	ldr	r2, [pc, #32]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     5a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5a4:	69f1      	ldr	r1, [r6, #28]
     5a6:	4291      	cmp	r1, r2
     5a8:	dd00      	ble.n	5ac <STACK_SIZE+0x1ac>
     5aa:	e60c      	b.n	1c6 <adc_init+0x26>
     5ac:	6a31      	ldr	r1, [r6, #32]
     5ae:	4291      	cmp	r1, r2
     5b0:	dd00      	ble.n	5b4 <STACK_SIZE+0x1b4>
     5b2:	e608      	b.n	1c6 <adc_init+0x26>
     5b4:	e725      	b.n	402 <STACK_SIZE+0x2>
		return STATUS_ERR_INVALID_ARG;
     5b6:	2017      	movs	r0, #23
     5b8:	e605      	b.n	1c6 <adc_init+0x26>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000fff 	.word	0x00000fff
     5c0:	000003ff 	.word	0x000003ff
     5c4:	0000ffff 	.word	0x0000ffff

000005c8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5c8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     5ca:	4b2e      	ldr	r3, [pc, #184]	; (684 <ADC_Handler+0xbc>)
     5cc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     5ce:	6823      	ldr	r3, [r4, #0]
     5d0:	7e1d      	ldrb	r5, [r3, #24]
     5d2:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     5d4:	07ea      	lsls	r2, r5, #31
     5d6:	d505      	bpl.n	5e4 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5d8:	7ee2      	ldrb	r2, [r4, #27]
     5da:	07d2      	lsls	r2, r2, #31
     5dc:	d502      	bpl.n	5e4 <ADC_Handler+0x1c>
     5de:	7ea2      	ldrb	r2, [r4, #26]
     5e0:	07d2      	lsls	r2, r2, #31
     5e2:	d416      	bmi.n	612 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     5e4:	076b      	lsls	r3, r5, #29
     5e6:	d508      	bpl.n	5fa <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5e8:	2304      	movs	r3, #4
     5ea:	6822      	ldr	r2, [r4, #0]
     5ec:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5ee:	7ee3      	ldrb	r3, [r4, #27]
     5f0:	079b      	lsls	r3, r3, #30
     5f2:	d502      	bpl.n	5fa <ADC_Handler+0x32>
     5f4:	7ea3      	ldrb	r3, [r4, #26]
     5f6:	079b      	lsls	r3, r3, #30
     5f8:	d43c      	bmi.n	674 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5fa:	07ab      	lsls	r3, r5, #30
     5fc:	d508      	bpl.n	610 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5fe:	2302      	movs	r3, #2
     600:	6822      	ldr	r2, [r4, #0]
     602:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     604:	7ee3      	ldrb	r3, [r4, #27]
     606:	075b      	lsls	r3, r3, #29
     608:	d502      	bpl.n	610 <ADC_Handler+0x48>
     60a:	7ea3      	ldrb	r3, [r4, #26]
     60c:	075b      	lsls	r3, r3, #29
     60e:	d435      	bmi.n	67c <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     610:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     612:	2201      	movs	r2, #1
     614:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     616:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     618:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     61a:	b25b      	sxtb	r3, r3
     61c:	2b00      	cmp	r3, #0
     61e:	dbfb      	blt.n	618 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     620:	6961      	ldr	r1, [r4, #20]
     622:	1c8b      	adds	r3, r1, #2
     624:	6163      	str	r3, [r4, #20]
     626:	8b53      	ldrh	r3, [r2, #26]
     628:	b29b      	uxth	r3, r3
     62a:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     62c:	8b23      	ldrh	r3, [r4, #24]
     62e:	3b01      	subs	r3, #1
     630:	b29b      	uxth	r3, r3
     632:	8323      	strh	r3, [r4, #24]
     634:	2b00      	cmp	r3, #0
     636:	d011      	beq.n	65c <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     638:	7f63      	ldrb	r3, [r4, #29]
     63a:	2b00      	cmp	r3, #0
     63c:	d0d2      	beq.n	5e4 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     63e:	6822      	ldr	r2, [r4, #0]
     640:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     642:	b25b      	sxtb	r3, r3
     644:	2b00      	cmp	r3, #0
     646:	dbfb      	blt.n	640 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     648:	7b13      	ldrb	r3, [r2, #12]
     64a:	2102      	movs	r1, #2
     64c:	430b      	orrs	r3, r1
     64e:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     650:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     652:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     654:	b25b      	sxtb	r3, r3
     656:	2b00      	cmp	r3, #0
     658:	dbfb      	blt.n	652 <ADC_Handler+0x8a>
     65a:	e7c3      	b.n	5e4 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     65c:	7f23      	ldrb	r3, [r4, #28]
     65e:	2b05      	cmp	r3, #5
     660:	d1c0      	bne.n	5e4 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     662:	2300      	movs	r3, #0
     664:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     666:	3301      	adds	r3, #1
     668:	6822      	ldr	r2, [r4, #0]
     66a:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     66c:	0020      	movs	r0, r4
     66e:	68a3      	ldr	r3, [r4, #8]
     670:	4798      	blx	r3
     672:	e7b7      	b.n	5e4 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     674:	0020      	movs	r0, r4
     676:	68e3      	ldr	r3, [r4, #12]
     678:	4798      	blx	r3
     67a:	e7be      	b.n	5fa <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     67c:	6923      	ldr	r3, [r4, #16]
     67e:	0020      	movs	r0, r4
     680:	4798      	blx	r3
}
     682:	e7c5      	b.n	610 <ADC_Handler+0x48>
     684:	20000060 	.word	0x20000060

00000688 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     688:	4a04      	ldr	r2, [pc, #16]	; (69c <_extint_enable+0x14>)
     68a:	7813      	ldrb	r3, [r2, #0]
     68c:	2102      	movs	r1, #2
     68e:	430b      	orrs	r3, r1
     690:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     692:	7853      	ldrb	r3, [r2, #1]
     694:	b25b      	sxtb	r3, r3
     696:	2b00      	cmp	r3, #0
     698:	dbfb      	blt.n	692 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     69a:	4770      	bx	lr
     69c:	40001800 	.word	0x40001800

000006a0 <_system_extint_init>:
{
     6a0:	b500      	push	{lr}
     6a2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     6a4:	4a12      	ldr	r2, [pc, #72]	; (6f0 <_system_extint_init+0x50>)
     6a6:	6993      	ldr	r3, [r2, #24]
     6a8:	2140      	movs	r1, #64	; 0x40
     6aa:	430b      	orrs	r3, r1
     6ac:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     6ae:	a901      	add	r1, sp, #4
     6b0:	2300      	movs	r3, #0
     6b2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     6b4:	2005      	movs	r0, #5
     6b6:	4b0f      	ldr	r3, [pc, #60]	; (6f4 <_system_extint_init+0x54>)
     6b8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     6ba:	2005      	movs	r0, #5
     6bc:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <_system_extint_init+0x58>)
     6be:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     6c0:	4a0e      	ldr	r2, [pc, #56]	; (6fc <_system_extint_init+0x5c>)
     6c2:	7813      	ldrb	r3, [r2, #0]
     6c4:	2101      	movs	r1, #1
     6c6:	430b      	orrs	r3, r1
     6c8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     6ca:	7853      	ldrb	r3, [r2, #1]
     6cc:	b25b      	sxtb	r3, r3
     6ce:	2b00      	cmp	r3, #0
     6d0:	dbfb      	blt.n	6ca <_system_extint_init+0x2a>
     6d2:	4b0b      	ldr	r3, [pc, #44]	; (700 <_system_extint_init+0x60>)
     6d4:	0019      	movs	r1, r3
     6d6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     6d8:	2200      	movs	r2, #0
     6da:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     6dc:	4299      	cmp	r1, r3
     6de:	d1fc      	bne.n	6da <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6e0:	2210      	movs	r2, #16
     6e2:	4b08      	ldr	r3, [pc, #32]	; (704 <_system_extint_init+0x64>)
     6e4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     6e6:	4b08      	ldr	r3, [pc, #32]	; (708 <_system_extint_init+0x68>)
     6e8:	4798      	blx	r3
}
     6ea:	b003      	add	sp, #12
     6ec:	bd00      	pop	{pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	40000400 	.word	0x40000400
     6f4:	00001c61 	.word	0x00001c61
     6f8:	00001bd5 	.word	0x00001bd5
     6fc:	40001800 	.word	0x40001800
     700:	20000064 	.word	0x20000064
     704:	e000e100 	.word	0xe000e100
     708:	00000689 	.word	0x00000689

0000070c <update_ORB>:
#include <asf.h>
#include "ORB_control.h"
#include "ORB.h"

void update_ORB(uint8_t r1 ,uint8_t g1 ,uint8_t b1 ,uint8_t r2 ,uint8_t b2 ,uint8_t g2  )
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	ac04      	add	r4, sp, #16
     710:	7826      	ldrb	r6, [r4, #0]
     712:	ac05      	add	r4, sp, #20
     714:	7825      	ldrb	r5, [r4, #0]
 	temp_compare_array[0] = 255-r1;//Left -- R
     716:	4c0b      	ldr	r4, [pc, #44]	; (744 <update_ORB+0x38>)
     718:	43c0      	mvns	r0, r0
     71a:	7020      	strb	r0, [r4, #0]
 	temp_compare_array[1] = 255-g1;//Left  -- G
     71c:	43c9      	mvns	r1, r1
     71e:	7061      	strb	r1, [r4, #1]
 	temp_compare_array[2] = 255-b1;//Left  -- B
     720:	43d2      	mvns	r2, r2
     722:	70a2      	strb	r2, [r4, #2]
 	temp_compare_array[3] = 255-r2;//Right -- R
     724:	43db      	mvns	r3, r3
     726:	70e3      	strb	r3, [r4, #3]
 	temp_compare_array[4] = 255-b2;//Right  -- G
     728:	43f6      	mvns	r6, r6
     72a:	7126      	strb	r6, [r4, #4]
 	temp_compare_array[5] = 255-g2;//Right -- B
     72c:	43ed      	mvns	r5, r5
     72e:	7165      	strb	r5, [r4, #5]
	initializing_pin_array();
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <update_ORB+0x3c>)
     732:	4798      	blx	r3
	increasing_sort_tag();
     734:	4b05      	ldr	r3, [pc, #20]	; (74c <update_ORB+0x40>)
     736:	4798      	blx	r3
	transfer_temp();
     738:	4b05      	ldr	r3, [pc, #20]	; (750 <update_ORB+0x44>)
     73a:	4798      	blx	r3
	update_compare_array = true;
     73c:	2201      	movs	r2, #1
     73e:	4b05      	ldr	r3, [pc, #20]	; (754 <update_ORB+0x48>)
     740:	701a      	strb	r2, [r3, #0]
}
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	20000168 	.word	0x20000168
     748:	00001721 	.word	0x00001721
     74c:	00001465 	.word	0x00001465
     750:	000014c5 	.word	0x000014c5
     754:	2000003d 	.word	0x2000003d

00000758 <read_all_sensors>:
	output_single_adc = adc_start_read_result(sensor_analog_inputs[sensor_no]);
	return output_single_adc;
}

uint32_t read_all_sensors()
{
     758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     75a:	2400      	movs	r4, #0
	uint32_t output_multiple_adc = 0;
     75c:	2500      	movs	r5, #0
	uint32_t temp =0;
	
	uint8_t i =0;
	for(i= 0; i< NO_SENSORS; i++)
	{
		temp = adc_start_read_result(sensor_analog_inputs[i]);
     75e:	4f06      	ldr	r7, [pc, #24]	; (778 <read_all_sensors+0x20>)
     760:	4e06      	ldr	r6, [pc, #24]	; (77c <read_all_sensors+0x24>)
     762:	5de0      	ldrb	r0, [r4, r7]
     764:	47b0      	blx	r6
		temp = temp<<8*i;
     766:	00e3      	lsls	r3, r4, #3
     768:	4098      	lsls	r0, r3
		output_multiple_adc = temp | output_multiple_adc;
     76a:	4305      	orrs	r5, r0
     76c:	3401      	adds	r4, #1
	for(i= 0; i< NO_SENSORS; i++)
     76e:	2c04      	cmp	r4, #4
     770:	d1f7      	bne.n	762 <read_all_sensors+0xa>
		
	}
	//global_sensor_value = &output_multiple_adc;
	return output_multiple_adc;
     772:	0028      	movs	r0, r5
     774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	000021bc 	.word	0x000021bc
     77c:	000007f5 	.word	0x000007f5

00000780 <configure_adc>:
struct adc_module adc_instance;



void configure_adc()
{
     780:	b510      	push	{r4, lr}
     782:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
     784:	4668      	mov	r0, sp
     786:	4b16      	ldr	r3, [pc, #88]	; (7e0 <configure_adc+0x60>)
     788:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference			= ADC_REFERENCE_INTVCC0;
     78a:	2301      	movs	r3, #1
     78c:	466a      	mov	r2, sp
     78e:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV4;
     790:	2300      	movs	r3, #0
     792:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		= SENSOR1;
     794:	330e      	adds	r3, #14
     796:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
     798:	33f3      	adds	r3, #243	; 0xf3
     79a:	33ff      	adds	r3, #255	; 0xff
     79c:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
     79e:	3bd1      	subs	r3, #209	; 0xd1
     7a0:	3bff      	subs	r3, #255	; 0xff
     7a2:	7113      	strb	r3, [r2, #4]
	//conf_adc.left_adjust		= true;
	
	adc_init(&adc_instance, ADC, &conf_adc);
     7a4:	4c0f      	ldr	r4, [pc, #60]	; (7e4 <configure_adc+0x64>)
     7a6:	4910      	ldr	r1, [pc, #64]	; (7e8 <configure_adc+0x68>)
     7a8:	0020      	movs	r0, r4
     7aa:	4b10      	ldr	r3, [pc, #64]	; (7ec <configure_adc+0x6c>)
     7ac:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
     7ae:	6822      	ldr	r2, [r4, #0]
     7b0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7b2:	b25b      	sxtb	r3, r3
     7b4:	2b00      	cmp	r3, #0
     7b6:	dbfb      	blt.n	7b0 <configure_adc+0x30>
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	0209      	lsls	r1, r1, #8
     7bc:	4b0c      	ldr	r3, [pc, #48]	; (7f0 <configure_adc+0x70>)
     7be:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     7c0:	230f      	movs	r3, #15
     7c2:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     7c4:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     7c6:	7813      	ldrb	r3, [r2, #0]
     7c8:	2102      	movs	r1, #2
     7ca:	430b      	orrs	r3, r1
     7cc:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     7ce:	4b05      	ldr	r3, [pc, #20]	; (7e4 <configure_adc+0x64>)
     7d0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7d2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7d4:	b25b      	sxtb	r3, r3
     7d6:	2b00      	cmp	r3, #0
     7d8:	dbfb      	blt.n	7d2 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
     7da:	b00c      	add	sp, #48	; 0x30
     7dc:	bd10      	pop	{r4, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	00000159 	.word	0x00000159
     7e4:	200000a4 	.word	0x200000a4
     7e8:	42002000 	.word	0x42002000
     7ec:	000001a1 	.word	0x000001a1
     7f0:	e000e100 	.word	0xe000e100

000007f4 <adc_start_read_result>:


uint8_t adc_start_read_result(const enum adc_positive_input analogPin)
{
     7f4:	b530      	push	{r4, r5, lr}
     7f6:	b083      	sub	sp, #12
	volatile uint16_t adc_result = 0;
     7f8:	2200      	movs	r2, #0
     7fa:	466b      	mov	r3, sp
     7fc:	80da      	strh	r2, [r3, #6]
	Adc *const adc_module = module_inst->hw;
     7fe:	4b2c      	ldr	r3, [pc, #176]	; (8b0 <adc_start_read_result+0xbc>)
     800:	6819      	ldr	r1, [r3, #0]
     802:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     804:	b25b      	sxtb	r3, r3
     806:	2b00      	cmp	r3, #0
     808:	dbfb      	blt.n	802 <adc_start_read_result+0xe>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
     80a:	690b      	ldr	r3, [r1, #16]
     80c:	221f      	movs	r2, #31
     80e:	4393      	bics	r3, r2
     810:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
     812:	6108      	str	r0, [r1, #16]
     814:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     816:	b25b      	sxtb	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	dbfb      	blt.n	814 <adc_start_read_result+0x20>
     81c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     81e:	b25b      	sxtb	r3, r3
     820:	2b00      	cmp	r3, #0
     822:	dbfb      	blt.n	81c <adc_start_read_result+0x28>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     824:	7b0b      	ldrb	r3, [r1, #12]
     826:	2202      	movs	r2, #2
     828:	4313      	orrs	r3, r2
     82a:	730b      	strb	r3, [r1, #12]
     82c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     82e:	b25b      	sxtb	r3, r3
     830:	2b00      	cmp	r3, #0
     832:	dbfb      	blt.n	82c <adc_start_read_result+0x38>
	if (int_flags & ADC_INTFLAG_RESRDY) {
     834:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     836:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     838:	2402      	movs	r4, #2
     83a:	e001      	b.n	840 <adc_start_read_result+0x4c>
	adc_set_positive_input(&adc_instance, analogPin);
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
     83c:	4210      	tst	r0, r2
     83e:	d10a      	bne.n	856 <adc_start_read_result+0x62>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     840:	7e0b      	ldrb	r3, [r1, #24]
     842:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     844:	0002      	movs	r2, r0
     846:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     848:	421d      	tst	r5, r3
     84a:	d000      	beq.n	84e <adc_start_read_result+0x5a>
		status_flags |= ADC_STATUS_WINDOW;
     84c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     84e:	421c      	tst	r4, r3
     850:	d0f4      	beq.n	83c <adc_start_read_result+0x48>
		status_flags |= ADC_STATUS_OVERRUN;
     852:	432a      	orrs	r2, r5
     854:	e7f2      	b.n	83c <adc_start_read_result+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     856:	7e0a      	ldrb	r2, [r1, #24]
     858:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     85a:	2301      	movs	r3, #1
     85c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     85e:	0750      	lsls	r0, r2, #29
     860:	d501      	bpl.n	866 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_WINDOW;
     862:	2002      	movs	r0, #2
     864:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     866:	0792      	lsls	r2, r2, #30
     868:	d501      	bpl.n	86e <adc_start_read_result+0x7a>
		status_flags |= ADC_STATUS_OVERRUN;
     86a:	2204      	movs	r2, #4
     86c:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     86e:	07db      	lsls	r3, r3, #31
     870:	d404      	bmi.n	87c <adc_start_read_result+0x88>
	adc_read(&adc_instance, &adc_result);
	return adc_result;
     872:	466b      	mov	r3, sp
     874:	88d8      	ldrh	r0, [r3, #6]
     876:	b2c0      	uxtb	r0, r0
}
     878:	b003      	add	sp, #12
     87a:	bd30      	pop	{r4, r5, pc}
     87c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     87e:	b25b      	sxtb	r3, r3
     880:	2b00      	cmp	r3, #0
     882:	dbfb      	blt.n	87c <adc_start_read_result+0x88>
	*result = adc_module->RESULT.reg;
     884:	8b4a      	ldrh	r2, [r1, #26]
     886:	466b      	mov	r3, sp
     888:	80da      	strh	r2, [r3, #6]
	adc_module->INTFLAG.reg = int_flags;
     88a:	2301      	movs	r3, #1
     88c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     88e:	7e0a      	ldrb	r2, [r1, #24]
     890:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     892:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     894:	0750      	lsls	r0, r2, #29
     896:	d501      	bpl.n	89c <adc_start_read_result+0xa8>
		status_flags |= ADC_STATUS_WINDOW;
     898:	2002      	movs	r0, #2
     89a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     89c:	0792      	lsls	r2, r2, #30
     89e:	d501      	bpl.n	8a4 <adc_start_read_result+0xb0>
		status_flags |= ADC_STATUS_OVERRUN;
     8a0:	2204      	movs	r2, #4
     8a2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     8a4:	075b      	lsls	r3, r3, #29
     8a6:	d5e4      	bpl.n	872 <adc_start_read_result+0x7e>
	adc_module->INTFLAG.reg = int_flags;
     8a8:	2302      	movs	r3, #2
     8aa:	760b      	strb	r3, [r1, #24]
     8ac:	e7e1      	b.n	872 <adc_start_read_result+0x7e>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	200000a4 	.word	0x200000a4

000008b4 <sensor_init>:


void sensor_init()
{
     8b4:	b510      	push	{r4, lr}
	//Enable Analog input 
	configure_adc();
     8b6:	4b01      	ldr	r3, [pc, #4]	; (8bc <sensor_init+0x8>)
     8b8:	4798      	blx	r3
     8ba:	bd10      	pop	{r4, pc}
     8bc:	00000781 	.word	0x00000781

000008c0 <enable_super_servo>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     8c0:	4b05      	ldr	r3, [pc, #20]	; (8d8 <enable_super_servo+0x18>)
     8c2:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     8c4:	2102      	movs	r1, #2
     8c6:	6893      	ldr	r3, [r2, #8]
     8c8:	4219      	tst	r1, r3
     8ca:	d1fc      	bne.n	8c6 <enable_super_servo+0x6>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     8cc:	6813      	ldr	r3, [r2, #0]
     8ce:	2102      	movs	r1, #2
     8d0:	430b      	orrs	r3, r1
     8d2:	6013      	str	r3, [r2, #0]
struct tcc_module tcc_ss_instance0;

void enable_super_servo()
{
	tcc_enable(&tcc_ss_instance0);
}
     8d4:	4770      	bx	lr
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	200000c4 	.word	0x200000c4

000008dc <test_ORB>:
#include "ORB_control.h"
#include "test.h"
#include "delay.h"

void test_ORB()
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	b083      	sub	sp, #12
	int i =0;
	
	//
	for(i=0;i<=255;i++)
     8e0:	2500      	movs	r5, #0
	{
		update_ORB(i,0,0,i,0,0);
     8e2:	2400      	movs	r4, #0
     8e4:	4f31      	ldr	r7, [pc, #196]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     8e6:	4e32      	ldr	r6, [pc, #200]	; (9b0 <test_ORB+0xd4>)
		update_ORB(i,0,0,i,0,0);
     8e8:	b2e8      	uxtb	r0, r5
     8ea:	9401      	str	r4, [sp, #4]
     8ec:	9400      	str	r4, [sp, #0]
     8ee:	0003      	movs	r3, r0
     8f0:	0022      	movs	r2, r4
     8f2:	0021      	movs	r1, r4
     8f4:	47b8      	blx	r7
		delay_cycles_ms(20);
     8f6:	2014      	movs	r0, #20
     8f8:	47b0      	blx	r6
	for(i=0;i<=255;i++)
     8fa:	3501      	adds	r5, #1
     8fc:	2380      	movs	r3, #128	; 0x80
     8fe:	005b      	lsls	r3, r3, #1
     900:	429d      	cmp	r5, r3
     902:	d1f1      	bne.n	8e8 <test_ORB+0xc>
     904:	25ff      	movs	r5, #255	; 0xff
	}
	for(i=255;i>=0;i--)
	{
		update_ORB(i,0,0,i,0,0);
     906:	2400      	movs	r4, #0
     908:	4f28      	ldr	r7, [pc, #160]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     90a:	4e29      	ldr	r6, [pc, #164]	; (9b0 <test_ORB+0xd4>)
		update_ORB(i,0,0,i,0,0);
     90c:	b2e8      	uxtb	r0, r5
     90e:	9401      	str	r4, [sp, #4]
     910:	9400      	str	r4, [sp, #0]
     912:	0003      	movs	r3, r0
     914:	0022      	movs	r2, r4
     916:	0021      	movs	r1, r4
     918:	47b8      	blx	r7
		delay_cycles_ms(20);
     91a:	2014      	movs	r0, #20
     91c:	47b0      	blx	r6
	for(i=255;i>=0;i--)
     91e:	3d01      	subs	r5, #1
     920:	d2f4      	bcs.n	90c <test_ORB+0x30>
     922:	2500      	movs	r5, #0
	}
	//
	for(i=0;i<=255;i++)
	{
		update_ORB(0,i,0,0,i,0);
     924:	2400      	movs	r4, #0
     926:	4f21      	ldr	r7, [pc, #132]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     928:	4e21      	ldr	r6, [pc, #132]	; (9b0 <test_ORB+0xd4>)
		update_ORB(0,i,0,0,i,0);
     92a:	b2e9      	uxtb	r1, r5
     92c:	9401      	str	r4, [sp, #4]
     92e:	9100      	str	r1, [sp, #0]
     930:	0023      	movs	r3, r4
     932:	0022      	movs	r2, r4
     934:	0020      	movs	r0, r4
     936:	47b8      	blx	r7
		delay_cycles_ms(20);
     938:	2014      	movs	r0, #20
     93a:	47b0      	blx	r6
	for(i=0;i<=255;i++)
     93c:	3501      	adds	r5, #1
     93e:	2380      	movs	r3, #128	; 0x80
     940:	005b      	lsls	r3, r3, #1
     942:	429d      	cmp	r5, r3
     944:	d1f1      	bne.n	92a <test_ORB+0x4e>
     946:	25ff      	movs	r5, #255	; 0xff
	}
	for(i=255;i>=0;i--)
	{
		update_ORB(0,i,0,0,i,0);
     948:	2400      	movs	r4, #0
     94a:	4f18      	ldr	r7, [pc, #96]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     94c:	4e18      	ldr	r6, [pc, #96]	; (9b0 <test_ORB+0xd4>)
		update_ORB(0,i,0,0,i,0);
     94e:	b2e9      	uxtb	r1, r5
     950:	9401      	str	r4, [sp, #4]
     952:	9100      	str	r1, [sp, #0]
     954:	0023      	movs	r3, r4
     956:	0022      	movs	r2, r4
     958:	0020      	movs	r0, r4
     95a:	47b8      	blx	r7
		delay_cycles_ms(20);
     95c:	2014      	movs	r0, #20
     95e:	47b0      	blx	r6
	for(i=255;i>=0;i--)
     960:	3d01      	subs	r5, #1
     962:	d2f4      	bcs.n	94e <test_ORB+0x72>
     964:	2500      	movs	r5, #0
	}
	//
	for(i=0;i<=255;i++)
	{
		update_ORB(0,0,i,0,0,i);
     966:	2400      	movs	r4, #0
     968:	4f10      	ldr	r7, [pc, #64]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     96a:	4e11      	ldr	r6, [pc, #68]	; (9b0 <test_ORB+0xd4>)
		update_ORB(0,0,i,0,0,i);
     96c:	b2ea      	uxtb	r2, r5
     96e:	9201      	str	r2, [sp, #4]
     970:	9400      	str	r4, [sp, #0]
     972:	0023      	movs	r3, r4
     974:	0021      	movs	r1, r4
     976:	0020      	movs	r0, r4
     978:	47b8      	blx	r7
		delay_cycles_ms(20);
     97a:	2014      	movs	r0, #20
     97c:	47b0      	blx	r6
	for(i=0;i<=255;i++)
     97e:	3501      	adds	r5, #1
     980:	2380      	movs	r3, #128	; 0x80
     982:	005b      	lsls	r3, r3, #1
     984:	429d      	cmp	r5, r3
     986:	d1f1      	bne.n	96c <test_ORB+0x90>
     988:	25ff      	movs	r5, #255	; 0xff
	}
	for(i=255;i>=0;i--)
	{
		update_ORB(0,0,i,0,0,i);
     98a:	2400      	movs	r4, #0
     98c:	4f07      	ldr	r7, [pc, #28]	; (9ac <test_ORB+0xd0>)
		delay_cycles_ms(20);
     98e:	4e08      	ldr	r6, [pc, #32]	; (9b0 <test_ORB+0xd4>)
		update_ORB(0,0,i,0,0,i);
     990:	b2ea      	uxtb	r2, r5
     992:	9201      	str	r2, [sp, #4]
     994:	9400      	str	r4, [sp, #0]
     996:	0023      	movs	r3, r4
     998:	0021      	movs	r1, r4
     99a:	0020      	movs	r0, r4
     99c:	47b8      	blx	r7
		delay_cycles_ms(20);
     99e:	2014      	movs	r0, #20
     9a0:	47b0      	blx	r6
	for(i=255;i>=0;i--)
     9a2:	3d01      	subs	r5, #1
     9a4:	d2f4      	bcs.n	990 <test_ORB+0xb4>
	}

}
     9a6:	b003      	add	sp, #12
     9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	0000070d 	.word	0x0000070d
     9b0:	0000012d 	.word	0x0000012d

000009b4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b6:	46c6      	mov	lr, r8
     9b8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     9ba:	0080      	lsls	r0, r0, #2
     9bc:	4b0e      	ldr	r3, [pc, #56]	; (9f8 <_tcc_interrupt_handler+0x44>)
     9be:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     9c0:	683b      	ldr	r3, [r7, #0]
     9c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     9c8:	4013      	ands	r3, r2
     9ca:	401e      	ands	r6, r3
     9cc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9ce:	4b0b      	ldr	r3, [pc, #44]	; (9fc <_tcc_interrupt_handler+0x48>)
     9d0:	4698      	mov	r8, r3
     9d2:	e002      	b.n	9da <_tcc_interrupt_handler+0x26>
     9d4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     9d6:	2c30      	cmp	r4, #48	; 0x30
     9d8:	d00a      	beq.n	9f0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9da:	4643      	mov	r3, r8
     9dc:	58e5      	ldr	r5, [r4, r3]
     9de:	4235      	tst	r5, r6
     9e0:	d0f8      	beq.n	9d4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     9e2:	193b      	adds	r3, r7, r4
     9e4:	685b      	ldr	r3, [r3, #4]
     9e6:	0038      	movs	r0, r7
     9e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     9ea:	683b      	ldr	r3, [r7, #0]
     9ec:	62dd      	str	r5, [r3, #44]	; 0x2c
     9ee:	e7f1      	b.n	9d4 <_tcc_interrupt_handler+0x20>
		}
	}
}
     9f0:	bc04      	pop	{r2}
     9f2:	4690      	mov	r8, r2
     9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	20000104 	.word	0x20000104
     9fc:	000021c0 	.word	0x000021c0

00000a00 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     a00:	b510      	push	{r4, lr}
     a02:	2000      	movs	r0, #0
     a04:	4b01      	ldr	r3, [pc, #4]	; (a0c <TCC0_Handler+0xc>)
     a06:	4798      	blx	r3
     a08:	bd10      	pop	{r4, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	000009b5 	.word	0x000009b5

00000a10 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     a10:	4b06      	ldr	r3, [pc, #24]	; (a2c <_tc_get_inst_index+0x1c>)
     a12:	4298      	cmp	r0, r3
     a14:	d008      	beq.n	a28 <_tc_get_inst_index+0x18>
     a16:	4a06      	ldr	r2, [pc, #24]	; (a30 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     a18:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     a1a:	4290      	cmp	r0, r2
     a1c:	d001      	beq.n	a22 <_tc_get_inst_index+0x12>
}
     a1e:	0018      	movs	r0, r3
     a20:	4770      	bx	lr
     a22:	3301      	adds	r3, #1
			return i;
     a24:	b2db      	uxtb	r3, r3
     a26:	e7fa      	b.n	a1e <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     a28:	2300      	movs	r3, #0
     a2a:	e7fb      	b.n	a24 <_tc_get_inst_index+0x14>
     a2c:	42001800 	.word	0x42001800
     a30:	42001c00 	.word	0x42001c00

00000a34 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     a34:	b5f0      	push	{r4, r5, r6, r7, lr}
     a36:	b085      	sub	sp, #20
     a38:	0004      	movs	r4, r0
     a3a:	000d      	movs	r5, r1
     a3c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     a3e:	0008      	movs	r0, r1
     a40:	4b82      	ldr	r3, [pc, #520]	; (c4c <tc_init+0x218>)
     a42:	4798      	blx	r3
     a44:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     a46:	ab03      	add	r3, sp, #12
     a48:	2212      	movs	r2, #18
     a4a:	701a      	strb	r2, [r3, #0]
     a4c:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     a4e:	ab02      	add	r3, sp, #8
     a50:	322e      	adds	r2, #46	; 0x2e
     a52:	801a      	strh	r2, [r3, #0]
     a54:	3240      	adds	r2, #64	; 0x40
     a56:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     a58:	2300      	movs	r3, #0
     a5a:	60a3      	str	r3, [r4, #8]
     a5c:	60e3      	str	r3, [r4, #12]
     a5e:	6123      	str	r3, [r4, #16]
     a60:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     a62:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     a64:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     a66:	0082      	lsls	r2, r0, #2
     a68:	4b79      	ldr	r3, [pc, #484]	; (c50 <tc_init+0x21c>)
     a6a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     a6c:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     a6e:	78b3      	ldrb	r3, [r6, #2]
     a70:	2b08      	cmp	r3, #8
     a72:	d006      	beq.n	a82 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     a74:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     a76:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     a78:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     a7a:	07db      	lsls	r3, r3, #31
     a7c:	d505      	bpl.n	a8a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     a7e:	b005      	add	sp, #20
     a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     a82:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     a84:	07fa      	lsls	r2, r7, #31
     a86:	d4fa      	bmi.n	a7e <tc_init+0x4a>
     a88:	e7f4      	b.n	a74 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     a8a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     a8c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     a8e:	06db      	lsls	r3, r3, #27
     a90:	d4f5      	bmi.n	a7e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     a92:	882b      	ldrh	r3, [r5, #0]
     a94:	079b      	lsls	r3, r3, #30
     a96:	d4f2      	bmi.n	a7e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     a98:	7c33      	ldrb	r3, [r6, #16]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d000      	beq.n	aa0 <tc_init+0x6c>
     a9e:	e07a      	b.n	b96 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     aa0:	7f33      	ldrb	r3, [r6, #28]
     aa2:	2b00      	cmp	r3, #0
     aa4:	d000      	beq.n	aa8 <tc_init+0x74>
     aa6:	e082      	b.n	bae <tc_init+0x17a>
			PM->APBCMASK.reg |= mask;
     aa8:	496a      	ldr	r1, [pc, #424]	; (c54 <tc_init+0x220>)
     aaa:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     aac:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     aae:	ab02      	add	r3, sp, #8
     ab0:	5ad3      	ldrh	r3, [r2, r3]
     ab2:	4303      	orrs	r3, r0
     ab4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     ab6:	78b3      	ldrb	r3, [r6, #2]
     ab8:	2b08      	cmp	r3, #8
     aba:	d100      	bne.n	abe <tc_init+0x8a>
     abc:	e087      	b.n	bce <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     abe:	7833      	ldrb	r3, [r6, #0]
     ac0:	466a      	mov	r2, sp
     ac2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     ac4:	ab03      	add	r3, sp, #12
     ac6:	5ddf      	ldrb	r7, [r3, r7]
     ac8:	4669      	mov	r1, sp
     aca:	0038      	movs	r0, r7
     acc:	4b62      	ldr	r3, [pc, #392]	; (c58 <tc_init+0x224>)
     ace:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     ad0:	0038      	movs	r0, r7
     ad2:	4b62      	ldr	r3, [pc, #392]	; (c5c <tc_init+0x228>)
     ad4:	4798      	blx	r3
	ctrla_tmp =
     ad6:	8931      	ldrh	r1, [r6, #8]
     ad8:	88b3      	ldrh	r3, [r6, #4]
     ada:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     adc:	78b1      	ldrb	r1, [r6, #2]
     ade:	79b2      	ldrb	r2, [r6, #6]
     ae0:	4311      	orrs	r1, r2
	ctrla_tmp =
     ae2:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     ae4:	7873      	ldrb	r3, [r6, #1]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d002      	beq.n	af0 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	011b      	lsls	r3, r3, #4
     aee:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     af0:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     af2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     af4:	b25b      	sxtb	r3, r3
     af6:	2b00      	cmp	r3, #0
     af8:	dbfb      	blt.n	af2 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     afa:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     afc:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     afe:	1e4b      	subs	r3, r1, #1
     b00:	4199      	sbcs	r1, r3
     b02:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     b04:	7bb3      	ldrb	r3, [r6, #14]
     b06:	2b00      	cmp	r3, #0
     b08:	d001      	beq.n	b0e <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     b0a:	2301      	movs	r3, #1
     b0c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b0e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b10:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b12:	b25b      	sxtb	r3, r3
     b14:	2b00      	cmp	r3, #0
     b16:	dbfb      	blt.n	b10 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     b18:	23ff      	movs	r3, #255	; 0xff
     b1a:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     b1c:	2900      	cmp	r1, #0
     b1e:	d005      	beq.n	b2c <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b20:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b22:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     b24:	b25b      	sxtb	r3, r3
     b26:	2b00      	cmp	r3, #0
     b28:	dbfb      	blt.n	b22 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     b2a:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     b2c:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     b2e:	7af3      	ldrb	r3, [r6, #11]
     b30:	2b00      	cmp	r3, #0
     b32:	d001      	beq.n	b38 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     b34:	2310      	movs	r3, #16
     b36:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     b38:	7b33      	ldrb	r3, [r6, #12]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d001      	beq.n	b42 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     b3e:	2320      	movs	r3, #32
     b40:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b44:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b46:	b25b      	sxtb	r3, r3
     b48:	2b00      	cmp	r3, #0
     b4a:	dbfb      	blt.n	b44 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     b4c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b50:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     b52:	b25b      	sxtb	r3, r3
     b54:	2b00      	cmp	r3, #0
     b56:	dbfb      	blt.n	b50 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     b58:	7923      	ldrb	r3, [r4, #4]
     b5a:	2b04      	cmp	r3, #4
     b5c:	d03f      	beq.n	bde <tc_init+0x1aa>
     b5e:	2b08      	cmp	r3, #8
     b60:	d05e      	beq.n	c20 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     b62:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     b64:	2b00      	cmp	r3, #0
     b66:	d000      	beq.n	b6a <tc_init+0x136>
     b68:	e789      	b.n	a7e <tc_init+0x4a>
     b6a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     b6c:	b25b      	sxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	dbfb      	blt.n	b6a <tc_init+0x136>
				= config->counter_16_bit.value;
     b72:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     b74:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b76:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b78:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     b7a:	b25b      	sxtb	r3, r3
     b7c:	2b00      	cmp	r3, #0
     b7e:	dbfb      	blt.n	b78 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     b80:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     b82:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b84:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b86:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     b88:	b25b      	sxtb	r3, r3
     b8a:	2b00      	cmp	r3, #0
     b8c:	dbfb      	blt.n	b86 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     b8e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     b90:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     b92:	2000      	movs	r0, #0
     b94:	e773      	b.n	a7e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b96:	a901      	add	r1, sp, #4
     b98:	2301      	movs	r3, #1
     b9a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     b9c:	2200      	movs	r2, #0
     b9e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     ba0:	7e32      	ldrb	r2, [r6, #24]
     ba2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     ba4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     ba6:	7d30      	ldrb	r0, [r6, #20]
     ba8:	4b2d      	ldr	r3, [pc, #180]	; (c60 <tc_init+0x22c>)
     baa:	4798      	blx	r3
     bac:	e778      	b.n	aa0 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bae:	a901      	add	r1, sp, #4
     bb0:	2301      	movs	r3, #1
     bb2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     bb4:	2200      	movs	r2, #0
     bb6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     bb8:	3224      	adds	r2, #36	; 0x24
     bba:	18b2      	adds	r2, r6, r2
     bbc:	7812      	ldrb	r2, [r2, #0]
     bbe:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     bc0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     bc2:	331f      	adds	r3, #31
     bc4:	18f3      	adds	r3, r6, r3
     bc6:	7818      	ldrb	r0, [r3, #0]
     bc8:	4b25      	ldr	r3, [pc, #148]	; (c60 <tc_init+0x22c>)
     bca:	4798      	blx	r3
     bcc:	e76c      	b.n	aa8 <tc_init+0x74>
     bce:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     bd0:	1c7a      	adds	r2, r7, #1
     bd2:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     bd4:	ab02      	add	r3, sp, #8
     bd6:	5ad3      	ldrh	r3, [r2, r3]
     bd8:	4303      	orrs	r3, r0
     bda:	620b      	str	r3, [r1, #32]
     bdc:	e76f      	b.n	abe <tc_init+0x8a>
     bde:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     be0:	b25b      	sxtb	r3, r3
     be2:	2b00      	cmp	r3, #0
     be4:	dbfb      	blt.n	bde <tc_init+0x1aa>
					config->counter_8_bit.value;
     be6:	2328      	movs	r3, #40	; 0x28
     be8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     bea:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     bee:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     bf0:	b25b      	sxtb	r3, r3
     bf2:	2b00      	cmp	r3, #0
     bf4:	dbfb      	blt.n	bee <tc_init+0x1ba>
					config->counter_8_bit.period;
     bf6:	2329      	movs	r3, #41	; 0x29
     bf8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     bfa:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bfc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     bfe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c00:	b25b      	sxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	dbfb      	blt.n	bfe <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     c06:	232a      	movs	r3, #42	; 0x2a
     c08:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     c0a:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c0c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c0e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c10:	b25b      	sxtb	r3, r3
     c12:	2b00      	cmp	r3, #0
     c14:	dbfb      	blt.n	c0e <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     c16:	232b      	movs	r3, #43	; 0x2b
     c18:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     c1a:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     c1c:	2000      	movs	r0, #0
     c1e:	e72e      	b.n	a7e <tc_init+0x4a>
     c20:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c22:	b25b      	sxtb	r3, r3
     c24:	2b00      	cmp	r3, #0
     c26:	dbfb      	blt.n	c20 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     c28:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c2a:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c2c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c2e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c30:	b25b      	sxtb	r3, r3
     c32:	2b00      	cmp	r3, #0
     c34:	dbfb      	blt.n	c2e <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     c36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     c38:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c3a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c3c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c3e:	b25b      	sxtb	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	dbfb      	blt.n	c3c <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     c44:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     c46:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     c48:	2000      	movs	r0, #0
     c4a:	e718      	b.n	a7e <tc_init+0x4a>
     c4c:	00000a11 	.word	0x00000a11
     c50:	20000108 	.word	0x20000108
     c54:	40000400 	.word	0x40000400
     c58:	00001c61 	.word	0x00001c61
     c5c:	00001bd5 	.word	0x00001bd5
     c60:	00001d59 	.word	0x00001d59

00000c64 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     c64:	6802      	ldr	r2, [r0, #0]
     c66:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     c68:	b25b      	sxtb	r3, r3
     c6a:	2b00      	cmp	r3, #0
     c6c:	dbfb      	blt.n	c66 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     c6e:	7903      	ldrb	r3, [r0, #4]
     c70:	2b04      	cmp	r3, #4
     c72:	d005      	beq.n	c80 <tc_set_count_value+0x1c>
     c74:	2b08      	cmp	r3, #8
     c76:	d00b      	beq.n	c90 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
     c78:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     c7a:	2b00      	cmp	r3, #0
     c7c:	d004      	beq.n	c88 <tc_set_count_value+0x24>
	}
}
     c7e:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     c80:	b2c9      	uxtb	r1, r1
     c82:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
     c84:	2000      	movs	r0, #0
     c86:	e7fa      	b.n	c7e <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     c88:	b289      	uxth	r1, r1
     c8a:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
     c8c:	2000      	movs	r0, #0
     c8e:	e7f6      	b.n	c7e <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     c90:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
     c92:	2000      	movs	r0, #0
     c94:	e7f3      	b.n	c7e <tc_set_count_value+0x1a>

00000c96 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     c96:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     c98:	6804      	ldr	r4, [r0, #0]
     c9a:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     c9c:	b25b      	sxtb	r3, r3
     c9e:	2b00      	cmp	r3, #0
     ca0:	dbfb      	blt.n	c9a <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     ca2:	7903      	ldrb	r3, [r0, #4]
     ca4:	2b04      	cmp	r3, #4
     ca6:	d005      	beq.n	cb4 <tc_set_compare_value+0x1e>
     ca8:	2b08      	cmp	r3, #8
     caa:	d014      	beq.n	cd6 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     cac:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     cae:	2b00      	cmp	r3, #0
     cb0:	d008      	beq.n	cc4 <tc_set_compare_value+0x2e>
}
     cb2:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
     cb4:	2017      	movs	r0, #23
			if (channel_index <
     cb6:	2901      	cmp	r1, #1
     cb8:	d8fb      	bhi.n	cb2 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
     cba:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
     cbc:	1861      	adds	r1, r4, r1
     cbe:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
     cc0:	2000      	movs	r0, #0
     cc2:	e7f6      	b.n	cb2 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
     cc4:	2017      	movs	r0, #23
			if (channel_index <
     cc6:	2901      	cmp	r1, #1
     cc8:	d8f3      	bhi.n	cb2 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
     cca:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
     ccc:	310c      	adds	r1, #12
     cce:	0049      	lsls	r1, r1, #1
     cd0:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     cd2:	2000      	movs	r0, #0
     cd4:	e7ed      	b.n	cb2 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
     cd6:	2017      	movs	r0, #23
			if (channel_index <
     cd8:	2901      	cmp	r1, #1
     cda:	d8ea      	bhi.n	cb2 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
     cdc:	3106      	adds	r1, #6
     cde:	0089      	lsls	r1, r1, #2
     ce0:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     ce2:	2000      	movs	r0, #0
     ce4:	e7e5      	b.n	cb2 <tc_set_compare_value+0x1c>

00000ce6 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ce6:	1c93      	adds	r3, r2, #2
     ce8:	009b      	lsls	r3, r3, #2
     cea:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     cec:	2a02      	cmp	r2, #2
     cee:	d009      	beq.n	d04 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     cf0:	2a03      	cmp	r2, #3
     cf2:	d00c      	beq.n	d0e <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     cf4:	2301      	movs	r3, #1
     cf6:	4093      	lsls	r3, r2
     cf8:	001a      	movs	r2, r3
     cfa:	7e03      	ldrb	r3, [r0, #24]
     cfc:	4313      	orrs	r3, r2
     cfe:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     d00:	2000      	movs	r0, #0
     d02:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     d04:	7e03      	ldrb	r3, [r0, #24]
     d06:	2210      	movs	r2, #16
     d08:	4313      	orrs	r3, r2
     d0a:	7603      	strb	r3, [r0, #24]
     d0c:	e7f8      	b.n	d00 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     d0e:	7e03      	ldrb	r3, [r0, #24]
     d10:	2220      	movs	r2, #32
     d12:	4313      	orrs	r3, r2
     d14:	7603      	strb	r3, [r0, #24]
     d16:	e7f3      	b.n	d00 <tc_register_callback+0x1a>

00000d18 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     d18:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     d1a:	0080      	lsls	r0, r0, #2
     d1c:	4b16      	ldr	r3, [pc, #88]	; (d78 <_tc_interrupt_handler+0x60>)
     d1e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     d20:	6823      	ldr	r3, [r4, #0]
     d22:	7b9d      	ldrb	r5, [r3, #14]
     d24:	7e22      	ldrb	r2, [r4, #24]
     d26:	7e63      	ldrb	r3, [r4, #25]
     d28:	4013      	ands	r3, r2
     d2a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     d2c:	07eb      	lsls	r3, r5, #31
     d2e:	d406      	bmi.n	d3e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     d30:	07ab      	lsls	r3, r5, #30
     d32:	d40b      	bmi.n	d4c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     d34:	06eb      	lsls	r3, r5, #27
     d36:	d410      	bmi.n	d5a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     d38:	06ab      	lsls	r3, r5, #26
     d3a:	d415      	bmi.n	d68 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     d3c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     d3e:	0020      	movs	r0, r4
     d40:	68a3      	ldr	r3, [r4, #8]
     d42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     d44:	2301      	movs	r3, #1
     d46:	6822      	ldr	r2, [r4, #0]
     d48:	7393      	strb	r3, [r2, #14]
     d4a:	e7f1      	b.n	d30 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     d4c:	0020      	movs	r0, r4
     d4e:	68e3      	ldr	r3, [r4, #12]
     d50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     d52:	2302      	movs	r3, #2
     d54:	6822      	ldr	r2, [r4, #0]
     d56:	7393      	strb	r3, [r2, #14]
     d58:	e7ec      	b.n	d34 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     d5a:	0020      	movs	r0, r4
     d5c:	6923      	ldr	r3, [r4, #16]
     d5e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     d60:	2310      	movs	r3, #16
     d62:	6822      	ldr	r2, [r4, #0]
     d64:	7393      	strb	r3, [r2, #14]
     d66:	e7e7      	b.n	d38 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     d68:	0020      	movs	r0, r4
     d6a:	6963      	ldr	r3, [r4, #20]
     d6c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     d6e:	6823      	ldr	r3, [r4, #0]
     d70:	2220      	movs	r2, #32
     d72:	739a      	strb	r2, [r3, #14]
}
     d74:	e7e2      	b.n	d3c <_tc_interrupt_handler+0x24>
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	20000108 	.word	0x20000108

00000d7c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     d7c:	b510      	push	{r4, lr}
     d7e:	2000      	movs	r0, #0
     d80:	4b01      	ldr	r3, [pc, #4]	; (d88 <TC1_Handler+0xc>)
     d82:	4798      	blx	r3
     d84:	bd10      	pop	{r4, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	00000d19 	.word	0x00000d19

00000d8c <TC2_Handler>:
     d8c:	b510      	push	{r4, lr}
     d8e:	2001      	movs	r0, #1
     d90:	4b01      	ldr	r3, [pc, #4]	; (d98 <TC2_Handler+0xc>)
     d92:	4798      	blx	r3
     d94:	bd10      	pop	{r4, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000d19 	.word	0x00000d19

00000d9c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d9c:	b510      	push	{r4, lr}
     d9e:	4b02      	ldr	r3, [pc, #8]	; (da8 <SERCOM0_Handler+0xc>)
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	2000      	movs	r0, #0
     da4:	4798      	blx	r3
     da6:	bd10      	pop	{r4, pc}
     da8:	2000002c 	.word	0x2000002c

00000dac <SERCOM1_Handler>:
     dac:	b510      	push	{r4, lr}
     dae:	4b02      	ldr	r3, [pc, #8]	; (db8 <SERCOM1_Handler+0xc>)
     db0:	685b      	ldr	r3, [r3, #4]
     db2:	2001      	movs	r0, #1
     db4:	4798      	blx	r3
     db6:	bd10      	pop	{r4, pc}
     db8:	2000002c 	.word	0x2000002c

00000dbc <SERCOM2_Handler>:
     dbc:	b510      	push	{r4, lr}
     dbe:	4b02      	ldr	r3, [pc, #8]	; (dc8 <SERCOM2_Handler+0xc>)
     dc0:	689b      	ldr	r3, [r3, #8]
     dc2:	2002      	movs	r0, #2
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000002c 	.word	0x2000002c

00000dcc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     dcc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dce:	2200      	movs	r2, #0
     dd0:	4b10      	ldr	r3, [pc, #64]	; (e14 <EIC_Handler+0x48>)
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     dd6:	4910      	ldr	r1, [pc, #64]	; (e18 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     dd8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     dda:	4e10      	ldr	r6, [pc, #64]	; (e1c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ddc:	4c0d      	ldr	r4, [pc, #52]	; (e14 <EIC_Handler+0x48>)
     dde:	e00a      	b.n	df6 <EIC_Handler+0x2a>
		return eics[eic_index];
     de0:	490d      	ldr	r1, [pc, #52]	; (e18 <EIC_Handler+0x4c>)
     de2:	e008      	b.n	df6 <EIC_Handler+0x2a>
     de4:	7823      	ldrb	r3, [r4, #0]
     de6:	3301      	adds	r3, #1
     de8:	b2db      	uxtb	r3, r3
     dea:	7023      	strb	r3, [r4, #0]
     dec:	2b0f      	cmp	r3, #15
     dee:	d810      	bhi.n	e12 <EIC_Handler+0x46>
		return NULL;
     df0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     df2:	2b1f      	cmp	r3, #31
     df4:	d9f4      	bls.n	de0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     df6:	0028      	movs	r0, r5
     df8:	4018      	ands	r0, r3
     dfa:	2201      	movs	r2, #1
     dfc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     dfe:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     e00:	4210      	tst	r0, r2
     e02:	d0ef      	beq.n	de4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     e04:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e06:	009b      	lsls	r3, r3, #2
     e08:	599b      	ldr	r3, [r3, r6]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d0ea      	beq.n	de4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     e0e:	4798      	blx	r3
     e10:	e7e8      	b.n	de4 <EIC_Handler+0x18>
			}
		}
	}
}
     e12:	bd70      	pop	{r4, r5, r6, pc}
     e14:	20000110 	.word	0x20000110
     e18:	40001800 	.word	0x40001800
     e1c:	20000064 	.word	0x20000064

00000e20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e20:	b500      	push	{lr}
     e22:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e24:	ab01      	add	r3, sp, #4
     e26:	2280      	movs	r2, #128	; 0x80
     e28:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e2a:	780a      	ldrb	r2, [r1, #0]
     e2c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e2e:	784a      	ldrb	r2, [r1, #1]
     e30:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e32:	788a      	ldrb	r2, [r1, #2]
     e34:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e36:	0019      	movs	r1, r3
     e38:	4b01      	ldr	r3, [pc, #4]	; (e40 <port_pin_set_config+0x20>)
     e3a:	4798      	blx	r3
}
     e3c:	b003      	add	sp, #12
     e3e:	bd00      	pop	{pc}
     e40:	00001d59 	.word	0x00001d59

00000e44 <tc_callback_LED_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_LED_PWM(struct tc_module *const module_inst)
{
     e44:	b5f0      	push	{r4, r5, r6, r7, lr}
     e46:	46de      	mov	lr, fp
     e48:	4657      	mov	r7, sl
     e4a:	4646      	mov	r6, r8
     e4c:	b5c0      	push	{r6, r7, lr}
     e4e:	b082      	sub	sp, #8
     e50:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	volatile uint32_t count;
	
	if(first_time == false)
     e52:	4b4f      	ldr	r3, [pc, #316]	; (f90 <tc_callback_LED_PWM+0x14c>)
     e54:	781b      	ldrb	r3, [r3, #0]
     e56:	2b00      	cmp	r3, #0
     e58:	d000      	beq.n	e5c <tc_callback_LED_PWM+0x18>
     e5a:	e091      	b.n	f80 <tc_callback_LED_PWM+0x13c>
	{
		port_pin_set_output_level(pin_led_array[pin_led_array_ID++], LED_ON);
     e5c:	494d      	ldr	r1, [pc, #308]	; (f94 <tc_callback_LED_PWM+0x150>)
     e5e:	780b      	ldrb	r3, [r1, #0]
     e60:	1c5a      	adds	r2, r3, #1
     e62:	b2d2      	uxtb	r2, r2
     e64:	700a      	strb	r2, [r1, #0]
     e66:	494c      	ldr	r1, [pc, #304]	; (f98 <tc_callback_LED_PWM+0x154>)
     e68:	5cc9      	ldrb	r1, [r1, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e6a:	09c8      	lsrs	r0, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e6c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e6e:	2800      	cmp	r0, #0
     e70:	d104      	bne.n	e7c <tc_callback_LED_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
     e72:	094b      	lsrs	r3, r1, #5
     e74:	01db      	lsls	r3, r3, #7
     e76:	4849      	ldr	r0, [pc, #292]	; (f9c <tc_callback_LED_PWM+0x158>)
     e78:	4684      	mov	ip, r0
     e7a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e7c:	201f      	movs	r0, #31
     e7e:	4008      	ands	r0, r1
     e80:	2101      	movs	r1, #1
     e82:	4081      	lsls	r1, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e84:	6159      	str	r1, [r3, #20]
		
		if(compare_led_array_ID < N_valid_led_compares-1 )
     e86:	4b46      	ldr	r3, [pc, #280]	; (fa0 <tc_callback_LED_PWM+0x15c>)
     e88:	781e      	ldrb	r6, [r3, #0]
     e8a:	4b46      	ldr	r3, [pc, #280]	; (fa4 <tc_callback_LED_PWM+0x160>)
     e8c:	781b      	ldrb	r3, [r3, #0]
     e8e:	3b01      	subs	r3, #1
     e90:	4698      	mov	r8, r3
     e92:	429e      	cmp	r6, r3
     e94:	da6e      	bge.n	f74 <tc_callback_LED_PWM+0x130>
		{
			compare_value_last = compare_led_array[compare_led_array_ID];
     e96:	4844      	ldr	r0, [pc, #272]	; (fa8 <tc_callback_LED_PWM+0x164>)
     e98:	5d81      	ldrb	r1, [r0, r6]
     e9a:	4b44      	ldr	r3, [pc, #272]	; (fac <tc_callback_LED_PWM+0x168>)
     e9c:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_led_array[++compare_led_array_ID];
     e9e:	3601      	adds	r6, #1
     ea0:	b2f6      	uxtb	r6, r6
     ea2:	4b3f      	ldr	r3, [pc, #252]	; (fa0 <tc_callback_LED_PWM+0x15c>)
     ea4:	701e      	strb	r6, [r3, #0]
     ea6:	0033      	movs	r3, r6
     ea8:	5d85      	ldrb	r5, [r0, r6]
     eaa:	4841      	ldr	r0, [pc, #260]	; (fb0 <tc_callback_LED_PWM+0x16c>)
     eac:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
     eae:	42a9      	cmp	r1, r5
     eb0:	d135      	bne.n	f1e <tc_callback_LED_PWM+0xda>
     eb2:	45b0      	cmp	r8, r6
     eb4:	db52      	blt.n	f5c <tc_callback_LED_PWM+0x118>
     eb6:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
     eb8:	4937      	ldr	r1, [pc, #220]	; (f98 <tc_callback_LED_PWM+0x154>)
     eba:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ebc:	211f      	movs	r1, #31
     ebe:	468a      	mov	sl, r1
     ec0:	2701      	movs	r7, #1
				compare_value_last = compare_led_array[compare_led_array_ID];
     ec2:	4c39      	ldr	r4, [pc, #228]	; (fa8 <tc_callback_LED_PWM+0x164>)
     ec4:	1ab6      	subs	r6, r6, r2
     ec6:	e00f      	b.n	ee8 <tc_callback_LED_PWM+0xa4>
     ec8:	4655      	mov	r5, sl
     eca:	4029      	ands	r1, r5
     ecc:	003d      	movs	r5, r7
     ece:	408d      	lsls	r5, r1
		port_base->OUTCLR.reg = pin_mask;
     ed0:	6145      	str	r5, [r0, #20]
     ed2:	5ce1      	ldrb	r1, [r4, r3]
     ed4:	1993      	adds	r3, r2, r6
     ed6:	b2db      	uxtb	r3, r3
				compare_value_current = compare_led_array[++compare_led_array_ID];
     ed8:	9300      	str	r3, [sp, #0]
     eda:	5ce0      	ldrb	r0, [r4, r3]
     edc:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
     ede:	4281      	cmp	r1, r0
     ee0:	d112      	bne.n	f08 <tc_callback_LED_PWM+0xc4>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
     ee2:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
     ee4:	4598      	cmp	r8, r3
     ee6:	db2c      	blt.n	f42 <tc_callback_LED_PWM+0xfe>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
     ee8:	1c42      	adds	r2, r0, #1
     eea:	b2d2      	uxtb	r2, r2
     eec:	4659      	mov	r1, fp
     eee:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
     ef0:	09c8      	lsrs	r0, r1, #7
     ef2:	4684      	mov	ip, r0
		return NULL;
     ef4:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
     ef6:	4665      	mov	r5, ip
     ef8:	2d00      	cmp	r5, #0
     efa:	d1e5      	bne.n	ec8 <tc_callback_LED_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
     efc:	0948      	lsrs	r0, r1, #5
     efe:	01c0      	lsls	r0, r0, #7
     f00:	4d26      	ldr	r5, [pc, #152]	; (f9c <tc_callback_LED_PWM+0x158>)
     f02:	46ac      	mov	ip, r5
     f04:	4460      	add	r0, ip
     f06:	e7df      	b.n	ec8 <tc_callback_LED_PWM+0x84>
     f08:	0005      	movs	r5, r0
     f0a:	4b28      	ldr	r3, [pc, #160]	; (fac <tc_callback_LED_PWM+0x168>)
     f0c:	7019      	strb	r1, [r3, #0]
     f0e:	4b24      	ldr	r3, [pc, #144]	; (fa0 <tc_callback_LED_PWM+0x15c>)
     f10:	4668      	mov	r0, sp
     f12:	7800      	ldrb	r0, [r0, #0]
     f14:	7018      	strb	r0, [r3, #0]
     f16:	4b26      	ldr	r3, [pc, #152]	; (fb0 <tc_callback_LED_PWM+0x16c>)
     f18:	701d      	strb	r5, [r3, #0]
     f1a:	4b1e      	ldr	r3, [pc, #120]	; (f94 <tc_callback_LED_PWM+0x150>)
     f1c:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
     f1e:	2dff      	cmp	r5, #255	; 0xff
     f20:	d01e      	beq.n	f60 <tc_callback_LED_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
     f22:	9c01      	ldr	r4, [sp, #4]
     f24:	0020      	movs	r0, r4
     f26:	4b23      	ldr	r3, [pc, #140]	; (fb4 <tc_callback_LED_PWM+0x170>)
     f28:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
     f2a:	4b21      	ldr	r3, [pc, #132]	; (fb0 <tc_callback_LED_PWM+0x16c>)
     f2c:	781a      	ldrb	r2, [r3, #0]
     f2e:	2100      	movs	r1, #0
     f30:	0020      	movs	r0, r4
     f32:	4b21      	ldr	r3, [pc, #132]	; (fb8 <tc_callback_LED_PWM+0x174>)
     f34:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
     f36:	b002      	add	sp, #8
     f38:	bc1c      	pop	{r2, r3, r4}
     f3a:	4690      	mov	r8, r2
     f3c:	469a      	mov	sl, r3
     f3e:	46a3      	mov	fp, r4
     f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f42:	4665      	mov	r5, ip
     f44:	4b19      	ldr	r3, [pc, #100]	; (fac <tc_callback_LED_PWM+0x168>)
     f46:	7019      	strb	r1, [r3, #0]
     f48:	4b15      	ldr	r3, [pc, #84]	; (fa0 <tc_callback_LED_PWM+0x15c>)
     f4a:	4668      	mov	r0, sp
     f4c:	7800      	ldrb	r0, [r0, #0]
     f4e:	7018      	strb	r0, [r3, #0]
     f50:	4b17      	ldr	r3, [pc, #92]	; (fb0 <tc_callback_LED_PWM+0x16c>)
     f52:	7019      	strb	r1, [r3, #0]
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <tc_callback_LED_PWM+0x150>)
     f56:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_led_array[++compare_led_array_ID];
     f58:	4661      	mov	r1, ip
     f5a:	e7e0      	b.n	f1e <tc_callback_LED_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
     f5c:	000d      	movs	r5, r1
     f5e:	e7de      	b.n	f1e <tc_callback_LED_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
     f60:	9c01      	ldr	r4, [sp, #4]
     f62:	0020      	movs	r0, r4
     f64:	4b13      	ldr	r3, [pc, #76]	; (fb4 <tc_callback_LED_PWM+0x170>)
     f66:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
     f68:	2200      	movs	r2, #0
     f6a:	2100      	movs	r1, #0
     f6c:	0020      	movs	r0, r4
     f6e:	4b12      	ldr	r3, [pc, #72]	; (fb8 <tc_callback_LED_PWM+0x174>)
     f70:	4798      	blx	r3
     f72:	e7e0      	b.n	f36 <tc_callback_LED_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
     f74:	2200      	movs	r2, #0
     f76:	2100      	movs	r1, #0
     f78:	9801      	ldr	r0, [sp, #4]
     f7a:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <tc_callback_LED_PWM+0x174>)
     f7c:	4798      	blx	r3
     f7e:	e7da      	b.n	f36 <tc_callback_LED_PWM+0xf2>
		first_time = false;
     f80:	2200      	movs	r2, #0
     f82:	4b03      	ldr	r3, [pc, #12]	; (f90 <tc_callback_LED_PWM+0x14c>)
     f84:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
     f86:	2100      	movs	r1, #0
     f88:	9801      	ldr	r0, [sp, #4]
     f8a:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <tc_callback_LED_PWM+0x174>)
     f8c:	4798      	blx	r3
}
     f8e:	e7d2      	b.n	f36 <tc_callback_LED_PWM+0xf2>
     f90:	20000009 	.word	0x20000009
     f94:	20000138 	.word	0x20000138
     f98:	2000013c 	.word	0x2000013c
     f9c:	41004400 	.word	0x41004400
     fa0:	20000137 	.word	0x20000137
     fa4:	20000008 	.word	0x20000008
     fa8:	20000134 	.word	0x20000134
     fac:	20000039 	.word	0x20000039
     fb0:	20000038 	.word	0x20000038
     fb4:	00000c65 	.word	0x00000c65
     fb8:	00000c97 	.word	0x00000c97

00000fbc <LED_timer_init>:
{
     fbc:	b510      	push	{r4, lr}
     fbe:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     fc0:	aa01      	add	r2, sp, #4
     fc2:	2300      	movs	r3, #0
     fc4:	2100      	movs	r1, #0
     fc6:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     fc8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     fca:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     fcc:	2000      	movs	r0, #0
     fce:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     fd0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     fd2:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     fd4:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     fd6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     fd8:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     fda:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     fdc:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     fde:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     fe0:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     fe2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     fe4:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     fe6:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     fe8:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     fea:	8593      	strh	r3, [r2, #44]	; 0x2c
	led_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     fec:	23c0      	movs	r3, #192	; 0xc0
     fee:	00db      	lsls	r3, r3, #3
     ff0:	8093      	strh	r3, [r2, #4]
	led_tc_config.counter_size    = TC_COUNTER_SIZE_8BIT;
     ff2:	2304      	movs	r3, #4
     ff4:	7093      	strb	r3, [r2, #2]
	led_tc_config.counter_8_bit.period = 0XFF;
     ff6:	21ff      	movs	r1, #255	; 0xff
     ff8:	3325      	adds	r3, #37	; 0x25
     ffa:	54d1      	strb	r1, [r2, r3]
	tc_init(&led_tc_instance, TC2, &led_tc_config);
     ffc:	4c07      	ldr	r4, [pc, #28]	; (101c <LED_timer_init+0x60>)
     ffe:	4908      	ldr	r1, [pc, #32]	; (1020 <LED_timer_init+0x64>)
    1000:	0020      	movs	r0, r4
    1002:	4b08      	ldr	r3, [pc, #32]	; (1024 <LED_timer_init+0x68>)
    1004:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1006:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1008:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    100a:	b25b      	sxtb	r3, r3
    100c:	2b00      	cmp	r3, #0
    100e:	dbfb      	blt.n	1008 <LED_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1010:	8813      	ldrh	r3, [r2, #0]
    1012:	2102      	movs	r1, #2
    1014:	430b      	orrs	r3, r1
    1016:	8013      	strh	r3, [r2, #0]
}
    1018:	b00e      	add	sp, #56	; 0x38
    101a:	bd10      	pop	{r4, pc}
    101c:	20000114 	.word	0x20000114
    1020:	42001c00 	.word	0x42001c00
    1024:	00000a35 	.word	0x00000a35

00001028 <set_drivestrength_LED>:
{
    1028:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_LEDS,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    102a:	2201      	movs	r2, #1
    102c:	4902      	ldr	r1, [pc, #8]	; (1038 <set_drivestrength_LED+0x10>)
    102e:	4803      	ldr	r0, [pc, #12]	; (103c <set_drivestrength_LED+0x14>)
    1030:	4b03      	ldr	r3, [pc, #12]	; (1040 <set_drivestrength_LED+0x18>)
    1032:	4798      	blx	r3
}
    1034:	bd10      	pop	{r4, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	80000300 	.word	0x80000300
    103c:	41004400 	.word	0x41004400
    1040:	00001d89 	.word	0x00001d89

00001044 <LEDS_off>:
	port_base->OUTSET.reg = CLEAR_LEDS ;
    1044:	4b03      	ldr	r3, [pc, #12]	; (1054 <LEDS_off+0x10>)
    1046:	4a04      	ldr	r2, [pc, #16]	; (1058 <LEDS_off+0x14>)
    1048:	619a      	str	r2, [r3, #24]
    104a:	2280      	movs	r2, #128	; 0x80
    104c:	0092      	lsls	r2, r2, #2
    104e:	615a      	str	r2, [r3, #20]
}
    1050:	4770      	bx	lr
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	41004400 	.word	0x41004400
    1058:	80000300 	.word	0x80000300

0000105c <LED_setup_pins>:
{
    105c:	b530      	push	{r4, r5, lr}
    105e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1060:	ac01      	add	r4, sp, #4
    1062:	2301      	movs	r3, #1
    1064:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1066:	2200      	movs	r2, #0
    1068:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    106a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED1, &config_port_pin);
    106c:	0021      	movs	r1, r4
    106e:	201f      	movs	r0, #31
    1070:	4d06      	ldr	r5, [pc, #24]	; (108c <LED_setup_pins+0x30>)
    1072:	47a8      	blx	r5
	port_pin_set_config(LED2, &config_port_pin);
    1074:	0021      	movs	r1, r4
    1076:	2008      	movs	r0, #8
    1078:	47a8      	blx	r5
	port_pin_set_config(LED3, &config_port_pin);
    107a:	0021      	movs	r1, r4
    107c:	2009      	movs	r0, #9
    107e:	47a8      	blx	r5
	set_drivestrength_LED();
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <LED_setup_pins+0x34>)
    1082:	4798      	blx	r3
	LEDS_off();	
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <LED_setup_pins+0x38>)
    1086:	4798      	blx	r3
}
    1088:	b003      	add	sp, #12
    108a:	bd30      	pop	{r4, r5, pc}
    108c:	00000e21 	.word	0x00000e21
    1090:	00001029 	.word	0x00001029
    1094:	00001045 	.word	0x00001045

00001098 <enable_LED>:
{
    1098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    109a:	46ce      	mov	lr, r9
    109c:	4647      	mov	r7, r8
    109e:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    10a0:	4c13      	ldr	r4, [pc, #76]	; (10f0 <enable_LED+0x58>)
    10a2:	6820      	ldr	r0, [r4, #0]
    10a4:	4b13      	ldr	r3, [pc, #76]	; (10f4 <enable_LED+0x5c>)
    10a6:	4699      	mov	r9, r3
    10a8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    10aa:	4b13      	ldr	r3, [pc, #76]	; (10f8 <enable_LED+0x60>)
    10ac:	4698      	mov	r8, r3
    10ae:	5c1b      	ldrb	r3, [r3, r0]
    10b0:	261f      	movs	r6, #31
    10b2:	4033      	ands	r3, r6
    10b4:	2501      	movs	r5, #1
    10b6:	002a      	movs	r2, r5
    10b8:	409a      	lsls	r2, r3
    10ba:	4f10      	ldr	r7, [pc, #64]	; (10fc <enable_LED+0x64>)
    10bc:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    10be:	7e63      	ldrb	r3, [r4, #25]
    10c0:	2201      	movs	r2, #1
    10c2:	4313      	orrs	r3, r2
    10c4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    10c6:	6823      	ldr	r3, [r4, #0]
    10c8:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    10ca:	0018      	movs	r0, r3
    10cc:	47c8      	blx	r9
    10ce:	4643      	mov	r3, r8
    10d0:	5c1b      	ldrb	r3, [r3, r0]
    10d2:	401e      	ands	r6, r3
    10d4:	40b5      	lsls	r5, r6
    10d6:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    10d8:	7e63      	ldrb	r3, [r4, #25]
    10da:	2210      	movs	r2, #16
    10dc:	4313      	orrs	r3, r2
    10de:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    10e0:	6823      	ldr	r3, [r4, #0]
    10e2:	2210      	movs	r2, #16
    10e4:	735a      	strb	r2, [r3, #13]
}
    10e6:	bc0c      	pop	{r2, r3}
    10e8:	4690      	mov	r8, r2
    10ea:	4699      	mov	r9, r3
    10ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	20000114 	.word	0x20000114
    10f4:	00000a11 	.word	0x00000a11
    10f8:	000021f0 	.word	0x000021f0
    10fc:	e000e100 	.word	0xe000e100

00001100 <initializing_LED_pin_array>:
	temp_pin_led_array[0]  = LED1;
    1100:	4b03      	ldr	r3, [pc, #12]	; (1110 <initializing_LED_pin_array+0x10>)
    1102:	221f      	movs	r2, #31
    1104:	701a      	strb	r2, [r3, #0]
	temp_pin_led_array[1]  = LED2;
    1106:	3a17      	subs	r2, #23
    1108:	705a      	strb	r2, [r3, #1]
	temp_pin_led_array[2]  = LED3;
    110a:	3201      	adds	r2, #1
    110c:	709a      	strb	r2, [r3, #2]
}
    110e:	4770      	bx	lr
    1110:	20000130 	.word	0x20000130

00001114 <initializing_LED_compare_array>:
	temp_compare_led_array[0] = 10;//LED1
    1114:	4b03      	ldr	r3, [pc, #12]	; (1124 <initializing_LED_compare_array+0x10>)
    1116:	220a      	movs	r2, #10
    1118:	701a      	strb	r2, [r3, #0]
	temp_compare_led_array[1] = 0;//LED2
    111a:	2200      	movs	r2, #0
    111c:	705a      	strb	r2, [r3, #1]
	temp_compare_led_array[2] = 1;  //LED3
    111e:	3201      	adds	r2, #1
    1120:	709a      	strb	r2, [r3, #2]
}
    1122:	4770      	bx	lr
    1124:	20000140 	.word	0x20000140

00001128 <increasing_LED_sort_tag>:
{
    1128:	b5f0      	push	{r4, r5, r6, r7, lr}
    112a:	2200      	movs	r2, #0
    112c:	2300      	movs	r3, #0
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    112e:	4d16      	ldr	r5, [pc, #88]	; (1188 <increasing_LED_sort_tag+0x60>)
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    1130:	002f      	movs	r7, r5
				temp = temp_pin_led_array[j];
    1132:	4e16      	ldr	r6, [pc, #88]	; (118c <increasing_LED_sort_tag+0x64>)
    1134:	e004      	b.n	1140 <increasing_LED_sort_tag+0x18>
		for(j=0;j< N-i-1;j++)
    1136:	3301      	adds	r3, #1
    1138:	b2db      	uxtb	r3, r3
    113a:	001a      	movs	r2, r3
    113c:	2b01      	cmp	r3, #1
    113e:	dc0b      	bgt.n	1158 <increasing_LED_sort_tag+0x30>
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    1140:	5ca8      	ldrb	r0, [r5, r2]
    1142:	1c51      	adds	r1, r2, #1
    1144:	5c6c      	ldrb	r4, [r5, r1]
    1146:	42a0      	cmp	r0, r4
    1148:	d9f5      	bls.n	1136 <increasing_LED_sort_tag+0xe>
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    114a:	54bc      	strb	r4, [r7, r2]
				temp_compare_led_array[j+1]= temp;
    114c:	5478      	strb	r0, [r7, r1]
				temp = temp_pin_led_array[j];
    114e:	5cb0      	ldrb	r0, [r6, r2]
				temp_pin_led_array[j] = temp_pin_led_array[j+1];
    1150:	5c74      	ldrb	r4, [r6, r1]
    1152:	54b4      	strb	r4, [r6, r2]
				temp_pin_led_array[j+1] = temp;
    1154:	5470      	strb	r0, [r6, r1]
    1156:	e7ee      	b.n	1136 <increasing_LED_sort_tag+0xe>
		for(j=0;j< N-i-1;j++)
    1158:	2200      	movs	r2, #0
    115a:	2300      	movs	r3, #0
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    115c:	4d0a      	ldr	r5, [pc, #40]	; (1188 <increasing_LED_sort_tag+0x60>)
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    115e:	002f      	movs	r7, r5
				temp = temp_pin_led_array[j];
    1160:	4e0a      	ldr	r6, [pc, #40]	; (118c <increasing_LED_sort_tag+0x64>)
    1162:	e003      	b.n	116c <increasing_LED_sort_tag+0x44>
		for(j=0;j< N-i-1;j++)
    1164:	3301      	adds	r3, #1
    1166:	b2db      	uxtb	r3, r3
    1168:	1e1a      	subs	r2, r3, #0
    116a:	dc0b      	bgt.n	1184 <increasing_LED_sort_tag+0x5c>
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    116c:	5ca8      	ldrb	r0, [r5, r2]
    116e:	1c51      	adds	r1, r2, #1
    1170:	5c6c      	ldrb	r4, [r5, r1]
    1172:	42a0      	cmp	r0, r4
    1174:	d9f6      	bls.n	1164 <increasing_LED_sort_tag+0x3c>
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    1176:	54bc      	strb	r4, [r7, r2]
				temp_compare_led_array[j+1]= temp;
    1178:	5478      	strb	r0, [r7, r1]
				temp = temp_pin_led_array[j];
    117a:	5cb0      	ldrb	r0, [r6, r2]
				temp_pin_led_array[j] = temp_pin_led_array[j+1];
    117c:	5c74      	ldrb	r4, [r6, r1]
    117e:	54b4      	strb	r4, [r6, r2]
				temp_pin_led_array[j+1] = temp;
    1180:	5470      	strb	r0, [r6, r1]
    1182:	e7ef      	b.n	1164 <increasing_LED_sort_tag+0x3c>
}
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	20000140 	.word	0x20000140
    118c:	20000130 	.word	0x20000130

00001190 <LED_transfer_temp>:
{
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_led_compares = 0;
    1192:	2200      	movs	r2, #0
    1194:	4b0d      	ldr	r3, [pc, #52]	; (11cc <LED_transfer_temp+0x3c>)
    1196:	701a      	strb	r2, [r3, #0]
    1198:	2300      	movs	r3, #0
    119a:	2000      	movs	r0, #0
		if(temp_compare_led_array[i] != 255)
    119c:	4d0c      	ldr	r5, [pc, #48]	; (11d0 <LED_transfer_temp+0x40>)
		compare_led_array[i] = temp_compare_led_array[i] ;
    119e:	4f0d      	ldr	r7, [pc, #52]	; (11d4 <LED_transfer_temp+0x44>)
		pin_led_array[i]  = temp_pin_led_array[i];
    11a0:	4e0d      	ldr	r6, [pc, #52]	; (11d8 <LED_transfer_temp+0x48>)
    11a2:	4c0e      	ldr	r4, [pc, #56]	; (11dc <LED_transfer_temp+0x4c>)
    11a4:	e005      	b.n	11b2 <LED_transfer_temp+0x22>
		compare_led_array[i] = temp_compare_led_array[i] ;
    11a6:	54f9      	strb	r1, [r7, r3]
		pin_led_array[i]  = temp_pin_led_array[i];
    11a8:	5ce1      	ldrb	r1, [r4, r3]
    11aa:	54f1      	strb	r1, [r6, r3]
    11ac:	3301      	adds	r3, #1
	for(i=0;i<=2;i++)
    11ae:	2b03      	cmp	r3, #3
    11b0:	d006      	beq.n	11c0 <LED_transfer_temp+0x30>
		if(temp_compare_led_array[i] != 255)
    11b2:	5ce9      	ldrb	r1, [r5, r3]
    11b4:	29ff      	cmp	r1, #255	; 0xff
    11b6:	d0f6      	beq.n	11a6 <LED_transfer_temp+0x16>
			N_valid_led_compares++;
    11b8:	3201      	adds	r2, #1
    11ba:	b2d2      	uxtb	r2, r2
    11bc:	2001      	movs	r0, #1
    11be:	e7f2      	b.n	11a6 <LED_transfer_temp+0x16>
    11c0:	2800      	cmp	r0, #0
    11c2:	d100      	bne.n	11c6 <LED_transfer_temp+0x36>
}
    11c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c6:	4b01      	ldr	r3, [pc, #4]	; (11cc <LED_transfer_temp+0x3c>)
    11c8:	701a      	strb	r2, [r3, #0]
    11ca:	e7fb      	b.n	11c4 <LED_transfer_temp+0x34>
    11cc:	20000008 	.word	0x20000008
    11d0:	20000140 	.word	0x20000140
    11d4:	20000134 	.word	0x20000134
    11d8:	2000013c 	.word	0x2000013c
    11dc:	20000130 	.word	0x20000130

000011e0 <tc_callback_LED_OF>:
{
    11e0:	b570      	push	{r4, r5, r6, lr}
    11e2:	0004      	movs	r4, r0
	LEDS_off();
    11e4:	4b1a      	ldr	r3, [pc, #104]	; (1250 <tc_callback_LED_OF+0x70>)
    11e6:	4798      	blx	r3
	if(update_compare_led_array == true)
    11e8:	4b1a      	ldr	r3, [pc, #104]	; (1254 <tc_callback_LED_OF+0x74>)
    11ea:	781b      	ldrb	r3, [r3, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d110      	bne.n	1212 <tc_callback_LED_OF+0x32>
	compare_led_array_ID = 0;
    11f0:	2300      	movs	r3, #0
    11f2:	4a19      	ldr	r2, [pc, #100]	; (1258 <tc_callback_LED_OF+0x78>)
    11f4:	7013      	strb	r3, [r2, #0]
	pin_led_array_ID  = 0;
    11f6:	4a19      	ldr	r2, [pc, #100]	; (125c <tc_callback_LED_OF+0x7c>)
    11f8:	7013      	strb	r3, [r2, #0]
	compare_value = compare_led_array[0];
    11fa:	4b19      	ldr	r3, [pc, #100]	; (1260 <tc_callback_LED_OF+0x80>)
    11fc:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    11fe:	2aff      	cmp	r2, #255	; 0xff
    1200:	d120      	bne.n	1244 <tc_callback_LED_OF+0x64>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1202:	4b18      	ldr	r3, [pc, #96]	; (1264 <tc_callback_LED_OF+0x84>)
    1204:	2110      	movs	r1, #16
    1206:	681a      	ldr	r2, [r3, #0]
    1208:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    120a:	7e5a      	ldrb	r2, [r3, #25]
    120c:	438a      	bics	r2, r1
    120e:	765a      	strb	r2, [r3, #25]
}
    1210:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1212:	4d14      	ldr	r5, [pc, #80]	; (1264 <tc_callback_LED_OF+0x84>)
    1214:	6828      	ldr	r0, [r5, #0]
    1216:	4b14      	ldr	r3, [pc, #80]	; (1268 <tc_callback_LED_OF+0x88>)
    1218:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    121a:	4b14      	ldr	r3, [pc, #80]	; (126c <tc_callback_LED_OF+0x8c>)
    121c:	5c1b      	ldrb	r3, [r3, r0]
    121e:	221f      	movs	r2, #31
    1220:	401a      	ands	r2, r3
    1222:	2301      	movs	r3, #1
    1224:	4093      	lsls	r3, r2
    1226:	4a12      	ldr	r2, [pc, #72]	; (1270 <tc_callback_LED_OF+0x90>)
    1228:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    122a:	7e6b      	ldrb	r3, [r5, #25]
    122c:	2210      	movs	r2, #16
    122e:	4313      	orrs	r3, r2
    1230:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1232:	682b      	ldr	r3, [r5, #0]
    1234:	2210      	movs	r2, #16
    1236:	735a      	strb	r2, [r3, #13]
		LED_transfer_temp();
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <tc_callback_LED_OF+0x94>)
    123a:	4798      	blx	r3
		update_compare_led_array = false;
    123c:	2200      	movs	r2, #0
    123e:	4b05      	ldr	r3, [pc, #20]	; (1254 <tc_callback_LED_OF+0x74>)
    1240:	701a      	strb	r2, [r3, #0]
    1242:	e7d5      	b.n	11f0 <tc_callback_LED_OF+0x10>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    1244:	2100      	movs	r1, #0
    1246:	0020      	movs	r0, r4
    1248:	4b0b      	ldr	r3, [pc, #44]	; (1278 <tc_callback_LED_OF+0x98>)
    124a:	4798      	blx	r3
    124c:	e7e0      	b.n	1210 <tc_callback_LED_OF+0x30>
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00001045 	.word	0x00001045
    1254:	2000003a 	.word	0x2000003a
    1258:	20000137 	.word	0x20000137
    125c:	20000138 	.word	0x20000138
    1260:	20000134 	.word	0x20000134
    1264:	20000114 	.word	0x20000114
    1268:	00000a11 	.word	0x00000a11
    126c:	000021f0 	.word	0x000021f0
    1270:	e000e100 	.word	0xe000e100
    1274:	00001191 	.word	0x00001191
    1278:	00000c97 	.word	0x00000c97

0000127c <LED_init_array>:
{
    127c:	b510      	push	{r4, lr}
	initializing_LED_pin_array();
    127e:	4b04      	ldr	r3, [pc, #16]	; (1290 <LED_init_array+0x14>)
    1280:	4798      	blx	r3
	initializing_LED_compare_array();
    1282:	4b04      	ldr	r3, [pc, #16]	; (1294 <LED_init_array+0x18>)
    1284:	4798      	blx	r3
	increasing_LED_sort_tag();
    1286:	4b04      	ldr	r3, [pc, #16]	; (1298 <LED_init_array+0x1c>)
    1288:	4798      	blx	r3
	LED_transfer_temp();
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <LED_init_array+0x20>)
    128c:	4798      	blx	r3
}
    128e:	bd10      	pop	{r4, pc}
    1290:	00001101 	.word	0x00001101
    1294:	00001115 	.word	0x00001115
    1298:	00001129 	.word	0x00001129
    129c:	00001191 	.word	0x00001191

000012a0 <LED_timer_callbacks_init>:


void LED_timer_callbacks_init()
{
    12a0:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&led_tc_instance, tc_callback_LED_OF,TC_CALLBACK_OVERFLOW);
    12a2:	4d05      	ldr	r5, [pc, #20]	; (12b8 <LED_timer_callbacks_init+0x18>)
    12a4:	2200      	movs	r2, #0
    12a6:	4905      	ldr	r1, [pc, #20]	; (12bc <LED_timer_callbacks_init+0x1c>)
    12a8:	0028      	movs	r0, r5
    12aa:	4c05      	ldr	r4, [pc, #20]	; (12c0 <LED_timer_callbacks_init+0x20>)
    12ac:	47a0      	blx	r4
	tc_register_callback(&led_tc_instance, tc_callback_LED_PWM,TC_CALLBACK_CC_CHANNEL0);
    12ae:	2202      	movs	r2, #2
    12b0:	4904      	ldr	r1, [pc, #16]	; (12c4 <LED_timer_callbacks_init+0x24>)
    12b2:	0028      	movs	r0, r5
    12b4:	47a0      	blx	r4
	
}
    12b6:	bd70      	pop	{r4, r5, r6, pc}
    12b8:	20000114 	.word	0x20000114
    12bc:	000011e1 	.word	0x000011e1
    12c0:	00000ce7 	.word	0x00000ce7
    12c4:	00000e45 	.word	0x00000e45

000012c8 <LED_init>:


void LED_init()
{
    12c8:	b510      	push	{r4, lr}
	LED_timer_init();
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <LED_init+0x14>)
    12cc:	4798      	blx	r3
	LED_setup_pins();
    12ce:	4b04      	ldr	r3, [pc, #16]	; (12e0 <LED_init+0x18>)
    12d0:	4798      	blx	r3
	LED_init_array();
    12d2:	4b04      	ldr	r3, [pc, #16]	; (12e4 <LED_init+0x1c>)
    12d4:	4798      	blx	r3
	//Initialize the timer callbacks
	LED_timer_callbacks_init();
    12d6:	4b04      	ldr	r3, [pc, #16]	; (12e8 <LED_init+0x20>)
    12d8:	4798      	blx	r3
    12da:	bd10      	pop	{r4, pc}
    12dc:	00000fbd 	.word	0x00000fbd
    12e0:	0000105d 	.word	0x0000105d
    12e4:	0000127d 	.word	0x0000127d
    12e8:	000012a1 	.word	0x000012a1

000012ec <tc_callback_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_PWM(struct tc_module *const module_inst)
{
    12ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ee:	46de      	mov	lr, fp
    12f0:	4657      	mov	r7, sl
    12f2:	4646      	mov	r6, r8
    12f4:	b5c0      	push	{r6, r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	volatile uint32_t count;
	
	if(first_time == false)
    12fa:	4b4f      	ldr	r3, [pc, #316]	; (1438 <tc_callback_PWM+0x14c>)
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	2b00      	cmp	r3, #0
    1300:	d000      	beq.n	1304 <tc_callback_PWM+0x18>
    1302:	e091      	b.n	1428 <tc_callback_PWM+0x13c>
	{
		port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
    1304:	494d      	ldr	r1, [pc, #308]	; (143c <tc_callback_PWM+0x150>)
    1306:	780b      	ldrb	r3, [r1, #0]
    1308:	1c5a      	adds	r2, r3, #1
    130a:	b2d2      	uxtb	r2, r2
    130c:	700a      	strb	r2, [r1, #0]
    130e:	494c      	ldr	r1, [pc, #304]	; (1440 <tc_callback_PWM+0x154>)
    1310:	5cc9      	ldrb	r1, [r1, r3]
	if (port_index < PORT_INST_NUM) {
    1312:	09c8      	lsrs	r0, r1, #7
		return NULL;
    1314:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1316:	2800      	cmp	r0, #0
    1318:	d104      	bne.n	1324 <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    131a:	094b      	lsrs	r3, r1, #5
    131c:	01db      	lsls	r3, r3, #7
    131e:	4849      	ldr	r0, [pc, #292]	; (1444 <tc_callback_PWM+0x158>)
    1320:	4684      	mov	ip, r0
    1322:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1324:	201f      	movs	r0, #31
    1326:	4008      	ands	r0, r1
    1328:	2101      	movs	r1, #1
    132a:	4081      	lsls	r1, r0
		port_base->OUTSET.reg = pin_mask;
    132c:	6199      	str	r1, [r3, #24]
		
		if(compare_array_ID < N_valid_compares-1 )
    132e:	4b46      	ldr	r3, [pc, #280]	; (1448 <tc_callback_PWM+0x15c>)
    1330:	781e      	ldrb	r6, [r3, #0]
    1332:	4b46      	ldr	r3, [pc, #280]	; (144c <tc_callback_PWM+0x160>)
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	3b01      	subs	r3, #1
    1338:	4698      	mov	r8, r3
    133a:	429e      	cmp	r6, r3
    133c:	da6e      	bge.n	141c <tc_callback_PWM+0x130>
		{
			compare_value_last = compare_array[compare_array_ID];
    133e:	4844      	ldr	r0, [pc, #272]	; (1450 <tc_callback_PWM+0x164>)
    1340:	5d81      	ldrb	r1, [r0, r6]
    1342:	4b44      	ldr	r3, [pc, #272]	; (1454 <tc_callback_PWM+0x168>)
    1344:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_array[++compare_array_ID];
    1346:	3601      	adds	r6, #1
    1348:	b2f6      	uxtb	r6, r6
    134a:	4b3f      	ldr	r3, [pc, #252]	; (1448 <tc_callback_PWM+0x15c>)
    134c:	701e      	strb	r6, [r3, #0]
    134e:	0033      	movs	r3, r6
    1350:	5d85      	ldrb	r5, [r0, r6]
    1352:	4841      	ldr	r0, [pc, #260]	; (1458 <tc_callback_PWM+0x16c>)
    1354:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    1356:	42a9      	cmp	r1, r5
    1358:	d135      	bne.n	13c6 <tc_callback_PWM+0xda>
    135a:	45b0      	cmp	r8, r6
    135c:	db52      	blt.n	1404 <tc_callback_PWM+0x118>
    135e:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    1360:	4937      	ldr	r1, [pc, #220]	; (1440 <tc_callback_PWM+0x154>)
    1362:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1364:	211f      	movs	r1, #31
    1366:	468a      	mov	sl, r1
    1368:	2701      	movs	r7, #1
				compare_value_last = compare_array[compare_array_ID];
    136a:	4c39      	ldr	r4, [pc, #228]	; (1450 <tc_callback_PWM+0x164>)
    136c:	1ab6      	subs	r6, r6, r2
    136e:	e00f      	b.n	1390 <tc_callback_PWM+0xa4>
    1370:	4655      	mov	r5, sl
    1372:	4029      	ands	r1, r5
    1374:	003d      	movs	r5, r7
    1376:	408d      	lsls	r5, r1
		port_base->OUTSET.reg = pin_mask;
    1378:	6185      	str	r5, [r0, #24]
    137a:	5ce1      	ldrb	r1, [r4, r3]
    137c:	1993      	adds	r3, r2, r6
    137e:	b2db      	uxtb	r3, r3
				compare_value_current = compare_array[++compare_array_ID];
    1380:	9300      	str	r3, [sp, #0]
    1382:	5ce0      	ldrb	r0, [r4, r3]
    1384:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    1386:	4281      	cmp	r1, r0
    1388:	d112      	bne.n	13b0 <tc_callback_PWM+0xc4>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    138a:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    138c:	4598      	cmp	r8, r3
    138e:	db2c      	blt.n	13ea <tc_callback_PWM+0xfe>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    1390:	1c42      	adds	r2, r0, #1
    1392:	b2d2      	uxtb	r2, r2
    1394:	4659      	mov	r1, fp
    1396:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    1398:	09c8      	lsrs	r0, r1, #7
    139a:	4684      	mov	ip, r0
		return NULL;
    139c:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    139e:	4665      	mov	r5, ip
    13a0:	2d00      	cmp	r5, #0
    13a2:	d1e5      	bne.n	1370 <tc_callback_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    13a4:	0948      	lsrs	r0, r1, #5
    13a6:	01c0      	lsls	r0, r0, #7
    13a8:	4d26      	ldr	r5, [pc, #152]	; (1444 <tc_callback_PWM+0x158>)
    13aa:	46ac      	mov	ip, r5
    13ac:	4460      	add	r0, ip
    13ae:	e7df      	b.n	1370 <tc_callback_PWM+0x84>
    13b0:	0005      	movs	r5, r0
    13b2:	4b28      	ldr	r3, [pc, #160]	; (1454 <tc_callback_PWM+0x168>)
    13b4:	7019      	strb	r1, [r3, #0]
    13b6:	4b24      	ldr	r3, [pc, #144]	; (1448 <tc_callback_PWM+0x15c>)
    13b8:	4668      	mov	r0, sp
    13ba:	7800      	ldrb	r0, [r0, #0]
    13bc:	7018      	strb	r0, [r3, #0]
    13be:	4b26      	ldr	r3, [pc, #152]	; (1458 <tc_callback_PWM+0x16c>)
    13c0:	701d      	strb	r5, [r3, #0]
    13c2:	4b1e      	ldr	r3, [pc, #120]	; (143c <tc_callback_PWM+0x150>)
    13c4:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    13c6:	2dff      	cmp	r5, #255	; 0xff
    13c8:	d01e      	beq.n	1408 <tc_callback_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    13ca:	9c01      	ldr	r4, [sp, #4]
    13cc:	0020      	movs	r0, r4
    13ce:	4b23      	ldr	r3, [pc, #140]	; (145c <tc_callback_PWM+0x170>)
    13d0:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    13d2:	4b21      	ldr	r3, [pc, #132]	; (1458 <tc_callback_PWM+0x16c>)
    13d4:	781a      	ldrb	r2, [r3, #0]
    13d6:	2100      	movs	r1, #0
    13d8:	0020      	movs	r0, r4
    13da:	4b21      	ldr	r3, [pc, #132]	; (1460 <tc_callback_PWM+0x174>)
    13dc:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    13de:	b002      	add	sp, #8
    13e0:	bc1c      	pop	{r2, r3, r4}
    13e2:	4690      	mov	r8, r2
    13e4:	469a      	mov	sl, r3
    13e6:	46a3      	mov	fp, r4
    13e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ea:	4665      	mov	r5, ip
    13ec:	4b19      	ldr	r3, [pc, #100]	; (1454 <tc_callback_PWM+0x168>)
    13ee:	7019      	strb	r1, [r3, #0]
    13f0:	4b15      	ldr	r3, [pc, #84]	; (1448 <tc_callback_PWM+0x15c>)
    13f2:	4668      	mov	r0, sp
    13f4:	7800      	ldrb	r0, [r0, #0]
    13f6:	7018      	strb	r0, [r3, #0]
    13f8:	4b17      	ldr	r3, [pc, #92]	; (1458 <tc_callback_PWM+0x16c>)
    13fa:	7019      	strb	r1, [r3, #0]
    13fc:	4b0f      	ldr	r3, [pc, #60]	; (143c <tc_callback_PWM+0x150>)
    13fe:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[++compare_array_ID];
    1400:	4661      	mov	r1, ip
    1402:	e7e0      	b.n	13c6 <tc_callback_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    1404:	000d      	movs	r5, r1
    1406:	e7de      	b.n	13c6 <tc_callback_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    1408:	9c01      	ldr	r4, [sp, #4]
    140a:	0020      	movs	r0, r4
    140c:	4b13      	ldr	r3, [pc, #76]	; (145c <tc_callback_PWM+0x170>)
    140e:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    1410:	2200      	movs	r2, #0
    1412:	2100      	movs	r1, #0
    1414:	0020      	movs	r0, r4
    1416:	4b12      	ldr	r3, [pc, #72]	; (1460 <tc_callback_PWM+0x174>)
    1418:	4798      	blx	r3
    141a:	e7e0      	b.n	13de <tc_callback_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    141c:	2200      	movs	r2, #0
    141e:	2100      	movs	r1, #0
    1420:	9801      	ldr	r0, [sp, #4]
    1422:	4b0f      	ldr	r3, [pc, #60]	; (1460 <tc_callback_PWM+0x174>)
    1424:	4798      	blx	r3
    1426:	e7da      	b.n	13de <tc_callback_PWM+0xf2>
		first_time = false;
    1428:	2200      	movs	r2, #0
    142a:	4b03      	ldr	r3, [pc, #12]	; (1438 <tc_callback_PWM+0x14c>)
    142c:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    142e:	2100      	movs	r1, #0
    1430:	9801      	ldr	r0, [sp, #4]
    1432:	4b0b      	ldr	r3, [pc, #44]	; (1460 <tc_callback_PWM+0x174>)
    1434:	4798      	blx	r3
}
    1436:	e7d2      	b.n	13de <tc_callback_PWM+0xf2>
    1438:	2000000b 	.word	0x2000000b
    143c:	20000176 	.word	0x20000176
    1440:	20000160 	.word	0x20000160
    1444:	41004400 	.word	0x41004400
    1448:	2000017e 	.word	0x2000017e
    144c:	2000000a 	.word	0x2000000a
    1450:	20000170 	.word	0x20000170
    1454:	2000003c 	.word	0x2000003c
    1458:	2000003b 	.word	0x2000003b
    145c:	00000c65 	.word	0x00000c65
    1460:	00000c97 	.word	0x00000c97

00001464 <increasing_sort_tag>:
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	46ce      	mov	lr, r9
    1468:	b500      	push	{lr}
		for(j=0;j< N-i-1;j++)
    146a:	2305      	movs	r3, #5
    146c:	4699      	mov	r9, r3
			if(temp_compare_array[j]>temp_compare_array[j+1])
    146e:	4f13      	ldr	r7, [pc, #76]	; (14bc <increasing_sort_tag+0x58>)
				temp_compare_array[j] = temp_compare_array[j+1];
    1470:	003e      	movs	r6, r7
				temp = temp_pin_array[j];
    1472:	4d13      	ldr	r5, [pc, #76]	; (14c0 <increasing_sort_tag+0x5c>)
    1474:	e017      	b.n	14a6 <increasing_sort_tag+0x42>
		for(j=0;j< N-i-1;j++)
    1476:	3301      	adds	r3, #1
    1478:	b2db      	uxtb	r3, r3
    147a:	001a      	movs	r2, r3
    147c:	4563      	cmp	r3, ip
    147e:	da0b      	bge.n	1498 <increasing_sort_tag+0x34>
			if(temp_compare_array[j]>temp_compare_array[j+1])
    1480:	5cb8      	ldrb	r0, [r7, r2]
    1482:	1c51      	adds	r1, r2, #1
    1484:	5c7c      	ldrb	r4, [r7, r1]
    1486:	42a0      	cmp	r0, r4
    1488:	d9f5      	bls.n	1476 <increasing_sort_tag+0x12>
				temp_compare_array[j] = temp_compare_array[j+1];
    148a:	54b4      	strb	r4, [r6, r2]
				temp_compare_array[j+1]= temp;
    148c:	5470      	strb	r0, [r6, r1]
				temp = temp_pin_array[j];
    148e:	5ca8      	ldrb	r0, [r5, r2]
				temp_pin_array[j] = temp_pin_array[j+1];
    1490:	5c6c      	ldrb	r4, [r5, r1]
    1492:	54ac      	strb	r4, [r5, r2]
				temp_pin_array[j+1] = temp;
    1494:	5468      	strb	r0, [r5, r1]
    1496:	e7ee      	b.n	1476 <increasing_sort_tag+0x12>
    1498:	2301      	movs	r3, #1
    149a:	425b      	negs	r3, r3
    149c:	469c      	mov	ip, r3
    149e:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    14a0:	464b      	mov	r3, r9
    14a2:	2b00      	cmp	r3, #0
    14a4:	d006      	beq.n	14b4 <increasing_sort_tag+0x50>
		for(j=0;j< N-i-1;j++)
    14a6:	46cc      	mov	ip, r9
    14a8:	2200      	movs	r2, #0
    14aa:	2300      	movs	r3, #0
    14ac:	4649      	mov	r1, r9
    14ae:	2900      	cmp	r1, #0
    14b0:	dce6      	bgt.n	1480 <increasing_sort_tag+0x1c>
    14b2:	e7f1      	b.n	1498 <increasing_sort_tag+0x34>
}
    14b4:	bc04      	pop	{r2}
    14b6:	4691      	mov	r9, r2
    14b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	20000168 	.word	0x20000168
    14c0:	20000178 	.word	0x20000178

000014c4 <transfer_temp>:
{
    14c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_compares = 0;
    14c6:	2200      	movs	r2, #0
    14c8:	4b0d      	ldr	r3, [pc, #52]	; (1500 <transfer_temp+0x3c>)
    14ca:	701a      	strb	r2, [r3, #0]
    14cc:	2300      	movs	r3, #0
    14ce:	2600      	movs	r6, #0
		if(temp_compare_array[i] != 255)
    14d0:	4d0c      	ldr	r5, [pc, #48]	; (1504 <transfer_temp+0x40>)
		compare_array[i] = temp_compare_array[i] ;
    14d2:	4f0d      	ldr	r7, [pc, #52]	; (1508 <transfer_temp+0x44>)
		pin_array[i]  = temp_pin_array[i];
    14d4:	4c0d      	ldr	r4, [pc, #52]	; (150c <transfer_temp+0x48>)
    14d6:	480e      	ldr	r0, [pc, #56]	; (1510 <transfer_temp+0x4c>)
    14d8:	e005      	b.n	14e6 <transfer_temp+0x22>
		compare_array[i] = temp_compare_array[i] ;
    14da:	54f9      	strb	r1, [r7, r3]
		pin_array[i]  = temp_pin_array[i];
    14dc:	5cc1      	ldrb	r1, [r0, r3]
    14de:	54e1      	strb	r1, [r4, r3]
    14e0:	3301      	adds	r3, #1
	for(i=0;i<=5;i++)
    14e2:	2b06      	cmp	r3, #6
    14e4:	d006      	beq.n	14f4 <transfer_temp+0x30>
		if(temp_compare_array[i] != 255)
    14e6:	5ce9      	ldrb	r1, [r5, r3]
    14e8:	29ff      	cmp	r1, #255	; 0xff
    14ea:	d0f6      	beq.n	14da <transfer_temp+0x16>
			N_valid_compares++;
    14ec:	3201      	adds	r2, #1
    14ee:	b2d2      	uxtb	r2, r2
    14f0:	2601      	movs	r6, #1
    14f2:	e7f2      	b.n	14da <transfer_temp+0x16>
    14f4:	2e00      	cmp	r6, #0
    14f6:	d100      	bne.n	14fa <transfer_temp+0x36>
}
    14f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14fa:	4b01      	ldr	r3, [pc, #4]	; (1500 <transfer_temp+0x3c>)
    14fc:	701a      	strb	r2, [r3, #0]
    14fe:	e7fb      	b.n	14f8 <transfer_temp+0x34>
    1500:	2000000a 	.word	0x2000000a
    1504:	20000168 	.word	0x20000168
    1508:	20000170 	.word	0x20000170
    150c:	20000160 	.word	0x20000160
    1510:	20000178 	.word	0x20000178

00001514 <tc_callback_OF>:
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	0004      	movs	r4, r0
	port_base->OUTCLR.reg = CLEAR_ORB ;
    1518:	4a1a      	ldr	r2, [pc, #104]	; (1584 <tc_callback_OF+0x70>)
    151a:	4b1b      	ldr	r3, [pc, #108]	; (1588 <tc_callback_OF+0x74>)
    151c:	615a      	str	r2, [r3, #20]
	if(update_compare_array == true)
    151e:	4b1b      	ldr	r3, [pc, #108]	; (158c <tc_callback_OF+0x78>)
    1520:	781b      	ldrb	r3, [r3, #0]
    1522:	2b00      	cmp	r3, #0
    1524:	d110      	bne.n	1548 <tc_callback_OF+0x34>
	compare_array_ID = 0;
    1526:	2300      	movs	r3, #0
    1528:	4a19      	ldr	r2, [pc, #100]	; (1590 <tc_callback_OF+0x7c>)
    152a:	7013      	strb	r3, [r2, #0]
	pin_array_ID  = 0;
    152c:	4a19      	ldr	r2, [pc, #100]	; (1594 <tc_callback_OF+0x80>)
    152e:	7013      	strb	r3, [r2, #0]
	compare_value = compare_array[0];
    1530:	4b19      	ldr	r3, [pc, #100]	; (1598 <tc_callback_OF+0x84>)
    1532:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    1534:	2aff      	cmp	r2, #255	; 0xff
    1536:	d120      	bne.n	157a <tc_callback_OF+0x66>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1538:	4b18      	ldr	r3, [pc, #96]	; (159c <tc_callback_OF+0x88>)
    153a:	2110      	movs	r1, #16
    153c:	681a      	ldr	r2, [r3, #0]
    153e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1540:	7e5a      	ldrb	r2, [r3, #25]
    1542:	438a      	bics	r2, r1
    1544:	765a      	strb	r2, [r3, #25]
}
    1546:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1548:	4d14      	ldr	r5, [pc, #80]	; (159c <tc_callback_OF+0x88>)
    154a:	6828      	ldr	r0, [r5, #0]
    154c:	4b14      	ldr	r3, [pc, #80]	; (15a0 <tc_callback_OF+0x8c>)
    154e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1550:	4b14      	ldr	r3, [pc, #80]	; (15a4 <tc_callback_OF+0x90>)
    1552:	5c1b      	ldrb	r3, [r3, r0]
    1554:	221f      	movs	r2, #31
    1556:	401a      	ands	r2, r3
    1558:	2301      	movs	r3, #1
    155a:	4093      	lsls	r3, r2
    155c:	4a12      	ldr	r2, [pc, #72]	; (15a8 <tc_callback_OF+0x94>)
    155e:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1560:	7e6b      	ldrb	r3, [r5, #25]
    1562:	2210      	movs	r2, #16
    1564:	4313      	orrs	r3, r2
    1566:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1568:	682b      	ldr	r3, [r5, #0]
    156a:	2210      	movs	r2, #16
    156c:	735a      	strb	r2, [r3, #13]
		transfer_temp();
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <tc_callback_OF+0x98>)
    1570:	4798      	blx	r3
		update_compare_array = false;
    1572:	2200      	movs	r2, #0
    1574:	4b05      	ldr	r3, [pc, #20]	; (158c <tc_callback_OF+0x78>)
    1576:	701a      	strb	r2, [r3, #0]
    1578:	e7d5      	b.n	1526 <tc_callback_OF+0x12>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    157a:	2100      	movs	r1, #0
    157c:	0020      	movs	r0, r4
    157e:	4b0c      	ldr	r3, [pc, #48]	; (15b0 <tc_callback_OF+0x9c>)
    1580:	4798      	blx	r3
    1582:	e7e0      	b.n	1546 <tc_callback_OF+0x32>
    1584:	08c38000 	.word	0x08c38000
    1588:	41004400 	.word	0x41004400
    158c:	2000003d 	.word	0x2000003d
    1590:	2000017e 	.word	0x2000017e
    1594:	20000176 	.word	0x20000176
    1598:	20000170 	.word	0x20000170
    159c:	20000144 	.word	0x20000144
    15a0:	00000a11 	.word	0x00000a11
    15a4:	000021f4 	.word	0x000021f4
    15a8:	e000e100 	.word	0xe000e100
    15ac:	000014c5 	.word	0x000014c5
    15b0:	00000c97 	.word	0x00000c97

000015b4 <ORB_timer_init>:
{
    15b4:	b510      	push	{r4, lr}
    15b6:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    15b8:	aa01      	add	r2, sp, #4
    15ba:	2300      	movs	r3, #0
    15bc:	2100      	movs	r1, #0
    15be:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    15c0:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    15c2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    15c4:	2000      	movs	r0, #0
    15c6:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    15c8:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    15ca:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    15cc:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    15ce:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    15d0:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    15d2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    15d4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    15d6:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    15d8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    15da:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    15dc:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    15de:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    15e0:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    15e2:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    15e4:	23c0      	movs	r3, #192	; 0xc0
    15e6:	00db      	lsls	r3, r3, #3
    15e8:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    15ea:	2304      	movs	r3, #4
    15ec:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    15ee:	21ff      	movs	r1, #255	; 0xff
    15f0:	3325      	adds	r3, #37	; 0x25
    15f2:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    15f4:	4c07      	ldr	r4, [pc, #28]	; (1614 <ORB_timer_init+0x60>)
    15f6:	4908      	ldr	r1, [pc, #32]	; (1618 <ORB_timer_init+0x64>)
    15f8:	0020      	movs	r0, r4
    15fa:	4b08      	ldr	r3, [pc, #32]	; (161c <ORB_timer_init+0x68>)
    15fc:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1600:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1602:	b25b      	sxtb	r3, r3
    1604:	2b00      	cmp	r3, #0
    1606:	dbfb      	blt.n	1600 <ORB_timer_init+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1608:	8813      	ldrh	r3, [r2, #0]
    160a:	2102      	movs	r1, #2
    160c:	430b      	orrs	r3, r1
    160e:	8013      	strh	r3, [r2, #0]
}
    1610:	b00e      	add	sp, #56	; 0x38
    1612:	bd10      	pop	{r4, pc}
    1614:	20000144 	.word	0x20000144
    1618:	42001800 	.word	0x42001800
    161c:	00000a35 	.word	0x00000a35

00001620 <set_drivestrength_ORB>:
{
    1620:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    1622:	2201      	movs	r2, #1
    1624:	4902      	ldr	r1, [pc, #8]	; (1630 <set_drivestrength_ORB+0x10>)
    1626:	4803      	ldr	r0, [pc, #12]	; (1634 <set_drivestrength_ORB+0x14>)
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <set_drivestrength_ORB+0x18>)
    162a:	4798      	blx	r3
}
    162c:	bd10      	pop	{r4, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	08c38000 	.word	0x08c38000
    1634:	41004400 	.word	0x41004400
    1638:	00001d89 	.word	0x00001d89

0000163c <ORB_setup_pins>:
{
    163c:	b530      	push	{r4, r5, lr}
    163e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1640:	ac01      	add	r4, sp, #4
    1642:	2301      	movs	r3, #1
    1644:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1646:	2200      	movs	r2, #0
    1648:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    164a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ORB_R1, &config_port_pin);
    164c:	0021      	movs	r1, r4
    164e:	200f      	movs	r0, #15
    1650:	4d0b      	ldr	r5, [pc, #44]	; (1680 <ORB_setup_pins+0x44>)
    1652:	47a8      	blx	r5
	port_pin_set_config(ORB_G1, &config_port_pin);
    1654:	0021      	movs	r1, r4
    1656:	2010      	movs	r0, #16
    1658:	47a8      	blx	r5
	port_pin_set_config(ORB_B1, &config_port_pin);
    165a:	0021      	movs	r1, r4
    165c:	2011      	movs	r0, #17
    165e:	47a8      	blx	r5
	port_pin_set_config(ORB_R2, &config_port_pin);
    1660:	0021      	movs	r1, r4
    1662:	2016      	movs	r0, #22
    1664:	47a8      	blx	r5
	port_pin_set_config(ORB_G2, &config_port_pin);
    1666:	0021      	movs	r1, r4
    1668:	2017      	movs	r0, #23
    166a:	47a8      	blx	r5
	port_pin_set_config(ORB_B2, &config_port_pin);
    166c:	0021      	movs	r1, r4
    166e:	201b      	movs	r0, #27
    1670:	47a8      	blx	r5
	set_drivestrength_ORB();
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <ORB_setup_pins+0x48>)
    1674:	4798      	blx	r3
	port_base->OUTCLR.reg = CLEAR_ORB ;
    1676:	4a04      	ldr	r2, [pc, #16]	; (1688 <ORB_setup_pins+0x4c>)
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <ORB_setup_pins+0x50>)
    167a:	615a      	str	r2, [r3, #20]
}
    167c:	b003      	add	sp, #12
    167e:	bd30      	pop	{r4, r5, pc}
    1680:	00000e21 	.word	0x00000e21
    1684:	00001621 	.word	0x00001621
    1688:	08c38000 	.word	0x08c38000
    168c:	41004400 	.word	0x41004400

00001690 <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    1690:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    1692:	4d05      	ldr	r5, [pc, #20]	; (16a8 <ORB_timer_callbacks_init+0x18>)
    1694:	2200      	movs	r2, #0
    1696:	4905      	ldr	r1, [pc, #20]	; (16ac <ORB_timer_callbacks_init+0x1c>)
    1698:	0028      	movs	r0, r5
    169a:	4c05      	ldr	r4, [pc, #20]	; (16b0 <ORB_timer_callbacks_init+0x20>)
    169c:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    169e:	2202      	movs	r2, #2
    16a0:	4904      	ldr	r1, [pc, #16]	; (16b4 <ORB_timer_callbacks_init+0x24>)
    16a2:	0028      	movs	r0, r5
    16a4:	47a0      	blx	r4
	
}
    16a6:	bd70      	pop	{r4, r5, r6, pc}
    16a8:	20000144 	.word	0x20000144
    16ac:	00001515 	.word	0x00001515
    16b0:	00000ce7 	.word	0x00000ce7
    16b4:	000012ed 	.word	0x000012ed

000016b8 <enable_ORB>:

void enable_ORB()
{
    16b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16ba:	46ce      	mov	lr, r9
    16bc:	4647      	mov	r7, r8
    16be:	b580      	push	{r7, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    16c0:	4c13      	ldr	r4, [pc, #76]	; (1710 <enable_ORB+0x58>)
    16c2:	6820      	ldr	r0, [r4, #0]
    16c4:	4b13      	ldr	r3, [pc, #76]	; (1714 <enable_ORB+0x5c>)
    16c6:	4699      	mov	r9, r3
    16c8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    16ca:	4b13      	ldr	r3, [pc, #76]	; (1718 <enable_ORB+0x60>)
    16cc:	4698      	mov	r8, r3
    16ce:	5c1b      	ldrb	r3, [r3, r0]
    16d0:	261f      	movs	r6, #31
    16d2:	4033      	ands	r3, r6
    16d4:	2501      	movs	r5, #1
    16d6:	002a      	movs	r2, r5
    16d8:	409a      	lsls	r2, r3
    16da:	4f10      	ldr	r7, [pc, #64]	; (171c <enable_ORB+0x64>)
    16dc:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    16de:	7e63      	ldrb	r3, [r4, #25]
    16e0:	2201      	movs	r2, #1
    16e2:	4313      	orrs	r3, r2
    16e4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    16e6:	6823      	ldr	r3, [r4, #0]
    16e8:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    16ea:	0018      	movs	r0, r3
    16ec:	47c8      	blx	r9
    16ee:	4643      	mov	r3, r8
    16f0:	5c1b      	ldrb	r3, [r3, r0]
    16f2:	401e      	ands	r6, r3
    16f4:	40b5      	lsls	r5, r6
    16f6:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    16f8:	7e63      	ldrb	r3, [r4, #25]
    16fa:	2210      	movs	r2, #16
    16fc:	4313      	orrs	r3, r2
    16fe:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1700:	6823      	ldr	r3, [r4, #0]
    1702:	2210      	movs	r2, #16
    1704:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    1706:	bc0c      	pop	{r2, r3}
    1708:	4690      	mov	r8, r2
    170a:	4699      	mov	r9, r3
    170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	20000144 	.word	0x20000144
    1714:	00000a11 	.word	0x00000a11
    1718:	000021f4 	.word	0x000021f4
    171c:	e000e100 	.word	0xe000e100

00001720 <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array[0]  = ORB_R1;
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <initializing_pin_array+0x1c>)
    1722:	220f      	movs	r2, #15
    1724:	701a      	strb	r2, [r3, #0]
	temp_pin_array[1]  = ORB_G1;
    1726:	3201      	adds	r2, #1
    1728:	705a      	strb	r2, [r3, #1]
	temp_pin_array[2]  = ORB_B1;
    172a:	3201      	adds	r2, #1
    172c:	709a      	strb	r2, [r3, #2]
	temp_pin_array[3]  = ORB_R2;
    172e:	3205      	adds	r2, #5
    1730:	70da      	strb	r2, [r3, #3]
	temp_pin_array[4]  = ORB_G2;
    1732:	3201      	adds	r2, #1
    1734:	711a      	strb	r2, [r3, #4]
	temp_pin_array[5]  = ORB_B2;
    1736:	3204      	adds	r2, #4
    1738:	715a      	strb	r2, [r3, #5]
}
    173a:	4770      	bx	lr
    173c:	20000178 	.word	0x20000178

00001740 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array[0] = 255;//Left -- R
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <initializing_compare_array+0x1c>)
    1742:	22ff      	movs	r2, #255	; 0xff
    1744:	701a      	strb	r2, [r3, #0]
	temp_compare_array[1] = 255;//Left  -- G
    1746:	705a      	strb	r2, [r3, #1]
	temp_compare_array[2] = 10;//Left  -- B
    1748:	3af5      	subs	r2, #245	; 0xf5
    174a:	709a      	strb	r2, [r3, #2]
	temp_compare_array[3] = 40;//Right -- R
    174c:	321e      	adds	r2, #30
    174e:	70da      	strb	r2, [r3, #3]
	temp_compare_array[4] = 50;//Right  -- G
    1750:	320a      	adds	r2, #10
    1752:	711a      	strb	r2, [r3, #4]
	temp_compare_array[5] = 60;//Right -- B
    1754:	320a      	adds	r2, #10
    1756:	715a      	strb	r2, [r3, #5]
}
    1758:	4770      	bx	lr
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	20000168 	.word	0x20000168

00001760 <ORB_init_array>:


void ORB_init_array()
{
    1760:	b510      	push	{r4, lr}
	initializing_pin_array();
    1762:	4b04      	ldr	r3, [pc, #16]	; (1774 <ORB_init_array+0x14>)
    1764:	4798      	blx	r3
	initializing_compare_array();
    1766:	4b04      	ldr	r3, [pc, #16]	; (1778 <ORB_init_array+0x18>)
    1768:	4798      	blx	r3
	increasing_sort_tag();
    176a:	4b04      	ldr	r3, [pc, #16]	; (177c <ORB_init_array+0x1c>)
    176c:	4798      	blx	r3
	transfer_temp();
    176e:	4b04      	ldr	r3, [pc, #16]	; (1780 <ORB_init_array+0x20>)
    1770:	4798      	blx	r3
}
    1772:	bd10      	pop	{r4, pc}
    1774:	00001721 	.word	0x00001721
    1778:	00001741 	.word	0x00001741
    177c:	00001465 	.word	0x00001465
    1780:	000014c5 	.word	0x000014c5

00001784 <ORB_init>:

void ORB_init()
{
    1784:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    1786:	4b04      	ldr	r3, [pc, #16]	; (1798 <ORB_init+0x14>)
    1788:	4798      	blx	r3
	ORB_setup_pins();
    178a:	4b04      	ldr	r3, [pc, #16]	; (179c <ORB_init+0x18>)
    178c:	4798      	blx	r3
	ORB_init_array();
    178e:	4b04      	ldr	r3, [pc, #16]	; (17a0 <ORB_init+0x1c>)
    1790:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    1792:	4b04      	ldr	r3, [pc, #16]	; (17a4 <ORB_init+0x20>)
    1794:	4798      	blx	r3

    1796:	bd10      	pop	{r4, pc}
    1798:	000015b5 	.word	0x000015b5
    179c:	0000163d 	.word	0x0000163d
    17a0:	00001761 	.word	0x00001761
    17a4:	00001691 	.word	0x00001691

000017a8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    17a8:	4770      	bx	lr
	...

000017ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17ac:	4b0c      	ldr	r3, [pc, #48]	; (17e0 <cpu_irq_enter_critical+0x34>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d106      	bne.n	17c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17b8:	2b00      	cmp	r3, #0
    17ba:	d007      	beq.n	17cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17bc:	2200      	movs	r2, #0
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <cpu_irq_enter_critical+0x38>)
    17c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17c2:	4a07      	ldr	r2, [pc, #28]	; (17e0 <cpu_irq_enter_critical+0x34>)
    17c4:	6813      	ldr	r3, [r2, #0]
    17c6:	3301      	adds	r3, #1
    17c8:	6013      	str	r3, [r2, #0]
}
    17ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17d2:	2200      	movs	r2, #0
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <cpu_irq_enter_critical+0x3c>)
    17d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17d8:	3201      	adds	r2, #1
    17da:	4b02      	ldr	r3, [pc, #8]	; (17e4 <cpu_irq_enter_critical+0x38>)
    17dc:	701a      	strb	r2, [r3, #0]
    17de:	e7f0      	b.n	17c2 <cpu_irq_enter_critical+0x16>
    17e0:	20000040 	.word	0x20000040
    17e4:	20000044 	.word	0x20000044
    17e8:	2000000c 	.word	0x2000000c

000017ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17ec:	4b08      	ldr	r3, [pc, #32]	; (1810 <cpu_irq_leave_critical+0x24>)
    17ee:	681a      	ldr	r2, [r3, #0]
    17f0:	3a01      	subs	r2, #1
    17f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17f4:	681b      	ldr	r3, [r3, #0]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d109      	bne.n	180e <cpu_irq_leave_critical+0x22>
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <cpu_irq_leave_critical+0x28>)
    17fc:	781b      	ldrb	r3, [r3, #0]
    17fe:	2b00      	cmp	r3, #0
    1800:	d005      	beq.n	180e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1802:	2201      	movs	r2, #1
    1804:	4b04      	ldr	r3, [pc, #16]	; (1818 <cpu_irq_leave_critical+0x2c>)
    1806:	701a      	strb	r2, [r3, #0]
    1808:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    180c:	b662      	cpsie	i
	}
}
    180e:	4770      	bx	lr
    1810:	20000040 	.word	0x20000040
    1814:	20000044 	.word	0x20000044
    1818:	2000000c 	.word	0x2000000c

0000181c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    181c:	b510      	push	{r4, lr}
	switch (clock_source) {
    181e:	2808      	cmp	r0, #8
    1820:	d803      	bhi.n	182a <system_clock_source_get_hz+0xe>
    1822:	0080      	lsls	r0, r0, #2
    1824:	4b1b      	ldr	r3, [pc, #108]	; (1894 <system_clock_source_get_hz+0x78>)
    1826:	581b      	ldr	r3, [r3, r0]
    1828:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    182a:	2000      	movs	r0, #0
    182c:	e030      	b.n	1890 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    182e:	4b1a      	ldr	r3, [pc, #104]	; (1898 <system_clock_source_get_hz+0x7c>)
    1830:	6918      	ldr	r0, [r3, #16]
    1832:	e02d      	b.n	1890 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1834:	4b19      	ldr	r3, [pc, #100]	; (189c <system_clock_source_get_hz+0x80>)
    1836:	6a1b      	ldr	r3, [r3, #32]
    1838:	059b      	lsls	r3, r3, #22
    183a:	0f9b      	lsrs	r3, r3, #30
    183c:	4818      	ldr	r0, [pc, #96]	; (18a0 <system_clock_source_get_hz+0x84>)
    183e:	40d8      	lsrs	r0, r3
    1840:	e026      	b.n	1890 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1842:	4b15      	ldr	r3, [pc, #84]	; (1898 <system_clock_source_get_hz+0x7c>)
    1844:	6958      	ldr	r0, [r3, #20]
    1846:	e023      	b.n	1890 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1848:	4b13      	ldr	r3, [pc, #76]	; (1898 <system_clock_source_get_hz+0x7c>)
    184a:	681b      	ldr	r3, [r3, #0]
			return 0;
    184c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    184e:	079b      	lsls	r3, r3, #30
    1850:	d51e      	bpl.n	1890 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1852:	4912      	ldr	r1, [pc, #72]	; (189c <system_clock_source_get_hz+0x80>)
    1854:	2210      	movs	r2, #16
    1856:	68cb      	ldr	r3, [r1, #12]
    1858:	421a      	tst	r2, r3
    185a:	d0fc      	beq.n	1856 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    185c:	4b0e      	ldr	r3, [pc, #56]	; (1898 <system_clock_source_get_hz+0x7c>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	075b      	lsls	r3, r3, #29
    1862:	d401      	bmi.n	1868 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1864:	480f      	ldr	r0, [pc, #60]	; (18a4 <system_clock_source_get_hz+0x88>)
    1866:	e013      	b.n	1890 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1868:	2000      	movs	r0, #0
    186a:	4b0f      	ldr	r3, [pc, #60]	; (18a8 <system_clock_source_get_hz+0x8c>)
    186c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    186e:	4b0a      	ldr	r3, [pc, #40]	; (1898 <system_clock_source_get_hz+0x7c>)
    1870:	689b      	ldr	r3, [r3, #8]
    1872:	041b      	lsls	r3, r3, #16
    1874:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1876:	4358      	muls	r0, r3
    1878:	e00a      	b.n	1890 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    187a:	2350      	movs	r3, #80	; 0x50
    187c:	4a07      	ldr	r2, [pc, #28]	; (189c <system_clock_source_get_hz+0x80>)
    187e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1880:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1882:	075b      	lsls	r3, r3, #29
    1884:	d504      	bpl.n	1890 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1886:	4b04      	ldr	r3, [pc, #16]	; (1898 <system_clock_source_get_hz+0x7c>)
    1888:	68d8      	ldr	r0, [r3, #12]
    188a:	e001      	b.n	1890 <system_clock_source_get_hz+0x74>
		return 32768UL;
    188c:	2080      	movs	r0, #128	; 0x80
    188e:	0200      	lsls	r0, r0, #8
	}
}
    1890:	bd10      	pop	{r4, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	000021f8 	.word	0x000021f8
    1898:	20000048 	.word	0x20000048
    189c:	40000800 	.word	0x40000800
    18a0:	007a1200 	.word	0x007a1200
    18a4:	02dc6c00 	.word	0x02dc6c00
    18a8:	00001c7d 	.word	0x00001c7d

000018ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18ae:	490c      	ldr	r1, [pc, #48]	; (18e0 <system_clock_source_osc8m_set_config+0x34>)
    18b0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18b2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18b6:	7840      	ldrb	r0, [r0, #1]
    18b8:	2201      	movs	r2, #1
    18ba:	4010      	ands	r0, r2
    18bc:	0180      	lsls	r0, r0, #6
    18be:	2640      	movs	r6, #64	; 0x40
    18c0:	43b3      	bics	r3, r6
    18c2:	4303      	orrs	r3, r0
    18c4:	402a      	ands	r2, r5
    18c6:	01d2      	lsls	r2, r2, #7
    18c8:	2080      	movs	r0, #128	; 0x80
    18ca:	4383      	bics	r3, r0
    18cc:	4313      	orrs	r3, r2
    18ce:	2203      	movs	r2, #3
    18d0:	4022      	ands	r2, r4
    18d2:	0212      	lsls	r2, r2, #8
    18d4:	4803      	ldr	r0, [pc, #12]	; (18e4 <system_clock_source_osc8m_set_config+0x38>)
    18d6:	4003      	ands	r3, r0
    18d8:	4313      	orrs	r3, r2
    18da:	620b      	str	r3, [r1, #32]
}
    18dc:	bd70      	pop	{r4, r5, r6, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	40000800 	.word	0x40000800
    18e4:	fffffcff 	.word	0xfffffcff

000018e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18e8:	2808      	cmp	r0, #8
    18ea:	d803      	bhi.n	18f4 <system_clock_source_enable+0xc>
    18ec:	0080      	lsls	r0, r0, #2
    18ee:	4b25      	ldr	r3, [pc, #148]	; (1984 <system_clock_source_enable+0x9c>)
    18f0:	581b      	ldr	r3, [r3, r0]
    18f2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18f4:	2017      	movs	r0, #23
    18f6:	e044      	b.n	1982 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18f8:	4a23      	ldr	r2, [pc, #140]	; (1988 <system_clock_source_enable+0xa0>)
    18fa:	6a13      	ldr	r3, [r2, #32]
    18fc:	2102      	movs	r1, #2
    18fe:	430b      	orrs	r3, r1
    1900:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1902:	2000      	movs	r0, #0
    1904:	e03d      	b.n	1982 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1906:	4a20      	ldr	r2, [pc, #128]	; (1988 <system_clock_source_enable+0xa0>)
    1908:	6993      	ldr	r3, [r2, #24]
    190a:	2102      	movs	r1, #2
    190c:	430b      	orrs	r3, r1
    190e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1910:	2000      	movs	r0, #0
		break;
    1912:	e036      	b.n	1982 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1914:	4a1c      	ldr	r2, [pc, #112]	; (1988 <system_clock_source_enable+0xa0>)
    1916:	8a13      	ldrh	r3, [r2, #16]
    1918:	2102      	movs	r1, #2
    191a:	430b      	orrs	r3, r1
    191c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    191e:	2000      	movs	r0, #0
		break;
    1920:	e02f      	b.n	1982 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1922:	4a19      	ldr	r2, [pc, #100]	; (1988 <system_clock_source_enable+0xa0>)
    1924:	8a93      	ldrh	r3, [r2, #20]
    1926:	2102      	movs	r1, #2
    1928:	430b      	orrs	r3, r1
    192a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    192c:	2000      	movs	r0, #0
		break;
    192e:	e028      	b.n	1982 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1930:	4916      	ldr	r1, [pc, #88]	; (198c <system_clock_source_enable+0xa4>)
    1932:	680b      	ldr	r3, [r1, #0]
    1934:	2202      	movs	r2, #2
    1936:	4313      	orrs	r3, r2
    1938:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    193a:	4b13      	ldr	r3, [pc, #76]	; (1988 <system_clock_source_enable+0xa0>)
    193c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    193e:	0019      	movs	r1, r3
    1940:	320e      	adds	r2, #14
    1942:	68cb      	ldr	r3, [r1, #12]
    1944:	421a      	tst	r2, r3
    1946:	d0fc      	beq.n	1942 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1948:	4a10      	ldr	r2, [pc, #64]	; (198c <system_clock_source_enable+0xa4>)
    194a:	6891      	ldr	r1, [r2, #8]
    194c:	4b0e      	ldr	r3, [pc, #56]	; (1988 <system_clock_source_enable+0xa0>)
    194e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1950:	6852      	ldr	r2, [r2, #4]
    1952:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1954:	2200      	movs	r2, #0
    1956:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1958:	0019      	movs	r1, r3
    195a:	3210      	adds	r2, #16
    195c:	68cb      	ldr	r3, [r1, #12]
    195e:	421a      	tst	r2, r3
    1960:	d0fc      	beq.n	195c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1962:	4b0a      	ldr	r3, [pc, #40]	; (198c <system_clock_source_enable+0xa4>)
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	b29b      	uxth	r3, r3
    1968:	4a07      	ldr	r2, [pc, #28]	; (1988 <system_clock_source_enable+0xa0>)
    196a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    196c:	2000      	movs	r0, #0
    196e:	e008      	b.n	1982 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1970:	4905      	ldr	r1, [pc, #20]	; (1988 <system_clock_source_enable+0xa0>)
    1972:	2244      	movs	r2, #68	; 0x44
    1974:	5c8b      	ldrb	r3, [r1, r2]
    1976:	2002      	movs	r0, #2
    1978:	4303      	orrs	r3, r0
    197a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    197c:	2000      	movs	r0, #0
		break;
    197e:	e000      	b.n	1982 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1980:	2000      	movs	r0, #0
}
    1982:	4770      	bx	lr
    1984:	0000221c 	.word	0x0000221c
    1988:	40000800 	.word	0x40000800
    198c:	20000048 	.word	0x20000048

00001990 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1990:	b530      	push	{r4, r5, lr}
    1992:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1994:	22c2      	movs	r2, #194	; 0xc2
    1996:	00d2      	lsls	r2, r2, #3
    1998:	4b1a      	ldr	r3, [pc, #104]	; (1a04 <system_clock_init+0x74>)
    199a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    199c:	4a1a      	ldr	r2, [pc, #104]	; (1a08 <system_clock_init+0x78>)
    199e:	6853      	ldr	r3, [r2, #4]
    19a0:	211e      	movs	r1, #30
    19a2:	438b      	bics	r3, r1
    19a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    19a6:	2301      	movs	r3, #1
    19a8:	466a      	mov	r2, sp
    19aa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    19ae:	4d17      	ldr	r5, [pc, #92]	; (1a0c <system_clock_init+0x7c>)
    19b0:	b2e0      	uxtb	r0, r4
    19b2:	4669      	mov	r1, sp
    19b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19b6:	3401      	adds	r4, #1
    19b8:	2c18      	cmp	r4, #24
    19ba:	d1f9      	bne.n	19b0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    19bc:	a803      	add	r0, sp, #12
    19be:	2400      	movs	r4, #0
    19c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    19c2:	2501      	movs	r5, #1
    19c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19c8:	4b11      	ldr	r3, [pc, #68]	; (1a10 <system_clock_init+0x80>)
    19ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19cc:	2006      	movs	r0, #6
    19ce:	4b11      	ldr	r3, [pc, #68]	; (1a14 <system_clock_init+0x84>)
    19d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19d2:	4b11      	ldr	r3, [pc, #68]	; (1a18 <system_clock_init+0x88>)
    19d4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    19d6:	4b11      	ldr	r3, [pc, #68]	; (1a1c <system_clock_init+0x8c>)
    19d8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19da:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19dc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19de:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    19e0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    19e2:	466b      	mov	r3, sp
    19e4:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19e6:	2306      	movs	r3, #6
    19e8:	466a      	mov	r2, sp
    19ea:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    19ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    19ee:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19f0:	4669      	mov	r1, sp
    19f2:	2000      	movs	r0, #0
    19f4:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <system_clock_init+0x90>)
    19f6:	4798      	blx	r3
    19f8:	2000      	movs	r0, #0
    19fa:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <system_clock_init+0x94>)
    19fc:	4798      	blx	r3
#endif
}
    19fe:	b005      	add	sp, #20
    1a00:	bd30      	pop	{r4, r5, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	40000800 	.word	0x40000800
    1a08:	41004000 	.word	0x41004000
    1a0c:	00001c61 	.word	0x00001c61
    1a10:	000018ad 	.word	0x000018ad
    1a14:	000018e9 	.word	0x000018e9
    1a18:	00001a29 	.word	0x00001a29
    1a1c:	40000400 	.word	0x40000400
    1a20:	00001a4d 	.word	0x00001a4d
    1a24:	00001b05 	.word	0x00001b05

00001a28 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a28:	4a06      	ldr	r2, [pc, #24]	; (1a44 <system_gclk_init+0x1c>)
    1a2a:	6993      	ldr	r3, [r2, #24]
    1a2c:	2108      	movs	r1, #8
    1a2e:	430b      	orrs	r3, r1
    1a30:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a32:	2201      	movs	r2, #1
    1a34:	4b04      	ldr	r3, [pc, #16]	; (1a48 <system_gclk_init+0x20>)
    1a36:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a38:	0019      	movs	r1, r3
    1a3a:	780b      	ldrb	r3, [r1, #0]
    1a3c:	4213      	tst	r3, r2
    1a3e:	d1fc      	bne.n	1a3a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a40:	4770      	bx	lr
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	40000400 	.word	0x40000400
    1a48:	40000c00 	.word	0x40000c00

00001a4c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a4c:	b570      	push	{r4, r5, r6, lr}
    1a4e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a50:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a52:	780d      	ldrb	r5, [r1, #0]
    1a54:	022d      	lsls	r5, r5, #8
    1a56:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a58:	784b      	ldrb	r3, [r1, #1]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d002      	beq.n	1a64 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a5e:	2380      	movs	r3, #128	; 0x80
    1a60:	02db      	lsls	r3, r3, #11
    1a62:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a64:	7a4b      	ldrb	r3, [r1, #9]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d002      	beq.n	1a70 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	031b      	lsls	r3, r3, #12
    1a6e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a70:	6848      	ldr	r0, [r1, #4]
    1a72:	2801      	cmp	r0, #1
    1a74:	d910      	bls.n	1a98 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a76:	1e43      	subs	r3, r0, #1
    1a78:	4218      	tst	r0, r3
    1a7a:	d134      	bne.n	1ae6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a7c:	2802      	cmp	r0, #2
    1a7e:	d930      	bls.n	1ae2 <system_gclk_gen_set_config+0x96>
    1a80:	2302      	movs	r3, #2
    1a82:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a84:	3201      	adds	r2, #1
						mask <<= 1) {
    1a86:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a88:	4298      	cmp	r0, r3
    1a8a:	d8fb      	bhi.n	1a84 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a8c:	0212      	lsls	r2, r2, #8
    1a8e:	4332      	orrs	r2, r6
    1a90:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	035b      	lsls	r3, r3, #13
    1a96:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a98:	7a0b      	ldrb	r3, [r1, #8]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d002      	beq.n	1aa4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a9e:	2380      	movs	r3, #128	; 0x80
    1aa0:	039b      	lsls	r3, r3, #14
    1aa2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aa4:	4a13      	ldr	r2, [pc, #76]	; (1af4 <system_gclk_gen_set_config+0xa8>)
    1aa6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1aa8:	b25b      	sxtb	r3, r3
    1aaa:	2b00      	cmp	r3, #0
    1aac:	dbfb      	blt.n	1aa6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1aae:	4b12      	ldr	r3, [pc, #72]	; (1af8 <system_gclk_gen_set_config+0xac>)
    1ab0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ab2:	4b12      	ldr	r3, [pc, #72]	; (1afc <system_gclk_gen_set_config+0xb0>)
    1ab4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab6:	4a0f      	ldr	r2, [pc, #60]	; (1af4 <system_gclk_gen_set_config+0xa8>)
    1ab8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1aba:	b25b      	sxtb	r3, r3
    1abc:	2b00      	cmp	r3, #0
    1abe:	dbfb      	blt.n	1ab8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ac0:	4b0c      	ldr	r3, [pc, #48]	; (1af4 <system_gclk_gen_set_config+0xa8>)
    1ac2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ac4:	001a      	movs	r2, r3
    1ac6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ac8:	b25b      	sxtb	r3, r3
    1aca:	2b00      	cmp	r3, #0
    1acc:	dbfb      	blt.n	1ac6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ace:	4a09      	ldr	r2, [pc, #36]	; (1af4 <system_gclk_gen_set_config+0xa8>)
    1ad0:	6853      	ldr	r3, [r2, #4]
    1ad2:	2180      	movs	r1, #128	; 0x80
    1ad4:	0249      	lsls	r1, r1, #9
    1ad6:	400b      	ands	r3, r1
    1ad8:	431d      	orrs	r5, r3
    1ada:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1adc:	4b08      	ldr	r3, [pc, #32]	; (1b00 <system_gclk_gen_set_config+0xb4>)
    1ade:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1ae2:	2200      	movs	r2, #0
    1ae4:	e7d2      	b.n	1a8c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ae6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ae8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aea:	2380      	movs	r3, #128	; 0x80
    1aec:	029b      	lsls	r3, r3, #10
    1aee:	431d      	orrs	r5, r3
    1af0:	e7d2      	b.n	1a98 <system_gclk_gen_set_config+0x4c>
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	40000c00 	.word	0x40000c00
    1af8:	000017ad 	.word	0x000017ad
    1afc:	40000c08 	.word	0x40000c08
    1b00:	000017ed 	.word	0x000017ed

00001b04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b04:	b510      	push	{r4, lr}
    1b06:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b08:	4a0b      	ldr	r2, [pc, #44]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b0a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b0c:	b25b      	sxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dbfb      	blt.n	1b0a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1b12:	4b0a      	ldr	r3, [pc, #40]	; (1b3c <system_gclk_gen_enable+0x38>)
    1b14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b16:	4b0a      	ldr	r3, [pc, #40]	; (1b40 <system_gclk_gen_enable+0x3c>)
    1b18:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b1a:	4a07      	ldr	r2, [pc, #28]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b1c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b1e:	b25b      	sxtb	r3, r3
    1b20:	2b00      	cmp	r3, #0
    1b22:	dbfb      	blt.n	1b1c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b24:	4a04      	ldr	r2, [pc, #16]	; (1b38 <system_gclk_gen_enable+0x34>)
    1b26:	6851      	ldr	r1, [r2, #4]
    1b28:	2380      	movs	r3, #128	; 0x80
    1b2a:	025b      	lsls	r3, r3, #9
    1b2c:	430b      	orrs	r3, r1
    1b2e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b30:	4b04      	ldr	r3, [pc, #16]	; (1b44 <system_gclk_gen_enable+0x40>)
    1b32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	40000c00 	.word	0x40000c00
    1b3c:	000017ad 	.word	0x000017ad
    1b40:	40000c04 	.word	0x40000c04
    1b44:	000017ed 	.word	0x000017ed

00001b48 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b4c:	4a1a      	ldr	r2, [pc, #104]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b4e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b50:	b25b      	sxtb	r3, r3
    1b52:	2b00      	cmp	r3, #0
    1b54:	dbfb      	blt.n	1b4e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b56:	4b19      	ldr	r3, [pc, #100]	; (1bbc <system_gclk_gen_get_hz+0x74>)
    1b58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b5a:	4b19      	ldr	r3, [pc, #100]	; (1bc0 <system_gclk_gen_get_hz+0x78>)
    1b5c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b5e:	4a16      	ldr	r2, [pc, #88]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b60:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b62:	b25b      	sxtb	r3, r3
    1b64:	2b00      	cmp	r3, #0
    1b66:	dbfb      	blt.n	1b60 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b68:	4e13      	ldr	r6, [pc, #76]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b6a:	6870      	ldr	r0, [r6, #4]
    1b6c:	04c0      	lsls	r0, r0, #19
    1b6e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <system_gclk_gen_get_hz+0x7c>)
    1b72:	4798      	blx	r3
    1b74:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b76:	4b12      	ldr	r3, [pc, #72]	; (1bc0 <system_gclk_gen_get_hz+0x78>)
    1b78:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b7a:	6876      	ldr	r6, [r6, #4]
    1b7c:	02f6      	lsls	r6, r6, #11
    1b7e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b80:	4b11      	ldr	r3, [pc, #68]	; (1bc8 <system_gclk_gen_get_hz+0x80>)
    1b82:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b84:	4a0c      	ldr	r2, [pc, #48]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b88:	b25b      	sxtb	r3, r3
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	dbfb      	blt.n	1b86 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <system_gclk_gen_get_hz+0x70>)
    1b90:	689c      	ldr	r4, [r3, #8]
    1b92:	0224      	lsls	r4, r4, #8
    1b94:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b96:	4b0d      	ldr	r3, [pc, #52]	; (1bcc <system_gclk_gen_get_hz+0x84>)
    1b98:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b9a:	2e00      	cmp	r6, #0
    1b9c:	d107      	bne.n	1bae <system_gclk_gen_get_hz+0x66>
    1b9e:	2c01      	cmp	r4, #1
    1ba0:	d907      	bls.n	1bb2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1ba2:	0021      	movs	r1, r4
    1ba4:	0028      	movs	r0, r5
    1ba6:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <system_gclk_gen_get_hz+0x88>)
    1ba8:	4798      	blx	r3
    1baa:	0005      	movs	r5, r0
    1bac:	e001      	b.n	1bb2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1bae:	3401      	adds	r4, #1
    1bb0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1bb2:	0028      	movs	r0, r5
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	40000c00 	.word	0x40000c00
    1bbc:	000017ad 	.word	0x000017ad
    1bc0:	40000c04 	.word	0x40000c04
    1bc4:	0000181d 	.word	0x0000181d
    1bc8:	40000c08 	.word	0x40000c08
    1bcc:	000017ed 	.word	0x000017ed
    1bd0:	00001f25 	.word	0x00001f25

00001bd4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bd8:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <system_gclk_chan_enable+0x20>)
    1bda:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bdc:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <system_gclk_chan_enable+0x24>)
    1bde:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1be0:	4a06      	ldr	r2, [pc, #24]	; (1bfc <system_gclk_chan_enable+0x28>)
    1be2:	8853      	ldrh	r3, [r2, #2]
    1be4:	2180      	movs	r1, #128	; 0x80
    1be6:	01c9      	lsls	r1, r1, #7
    1be8:	430b      	orrs	r3, r1
    1bea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <system_gclk_chan_enable+0x2c>)
    1bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bf0:	bd10      	pop	{r4, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	000017ad 	.word	0x000017ad
    1bf8:	40000c02 	.word	0x40000c02
    1bfc:	40000c00 	.word	0x40000c00
    1c00:	000017ed 	.word	0x000017ed

00001c04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c04:	b510      	push	{r4, lr}
    1c06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c08:	4b0f      	ldr	r3, [pc, #60]	; (1c48 <system_gclk_chan_disable+0x44>)
    1c0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c0c:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <system_gclk_chan_disable+0x48>)
    1c0e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c10:	4a0f      	ldr	r2, [pc, #60]	; (1c50 <system_gclk_chan_disable+0x4c>)
    1c12:	8853      	ldrh	r3, [r2, #2]
    1c14:	051b      	lsls	r3, r3, #20
    1c16:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c18:	8853      	ldrh	r3, [r2, #2]
    1c1a:	490e      	ldr	r1, [pc, #56]	; (1c54 <system_gclk_chan_disable+0x50>)
    1c1c:	400b      	ands	r3, r1
    1c1e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c20:	8853      	ldrh	r3, [r2, #2]
    1c22:	490d      	ldr	r1, [pc, #52]	; (1c58 <system_gclk_chan_disable+0x54>)
    1c24:	400b      	ands	r3, r1
    1c26:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c28:	0011      	movs	r1, r2
    1c2a:	2280      	movs	r2, #128	; 0x80
    1c2c:	01d2      	lsls	r2, r2, #7
    1c2e:	884b      	ldrh	r3, [r1, #2]
    1c30:	4213      	tst	r3, r2
    1c32:	d1fc      	bne.n	1c2e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c34:	4906      	ldr	r1, [pc, #24]	; (1c50 <system_gclk_chan_disable+0x4c>)
    1c36:	884a      	ldrh	r2, [r1, #2]
    1c38:	0203      	lsls	r3, r0, #8
    1c3a:	4806      	ldr	r0, [pc, #24]	; (1c54 <system_gclk_chan_disable+0x50>)
    1c3c:	4002      	ands	r2, r0
    1c3e:	4313      	orrs	r3, r2
    1c40:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <system_gclk_chan_disable+0x58>)
    1c44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c46:	bd10      	pop	{r4, pc}
    1c48:	000017ad 	.word	0x000017ad
    1c4c:	40000c02 	.word	0x40000c02
    1c50:	40000c00 	.word	0x40000c00
    1c54:	fffff0ff 	.word	0xfffff0ff
    1c58:	ffffbfff 	.word	0xffffbfff
    1c5c:	000017ed 	.word	0x000017ed

00001c60 <system_gclk_chan_set_config>:
{
    1c60:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c62:	780c      	ldrb	r4, [r1, #0]
    1c64:	0224      	lsls	r4, r4, #8
    1c66:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c68:	4b02      	ldr	r3, [pc, #8]	; (1c74 <system_gclk_chan_set_config+0x14>)
    1c6a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c6c:	b2a4      	uxth	r4, r4
    1c6e:	4b02      	ldr	r3, [pc, #8]	; (1c78 <system_gclk_chan_set_config+0x18>)
    1c70:	805c      	strh	r4, [r3, #2]
}
    1c72:	bd10      	pop	{r4, pc}
    1c74:	00001c05 	.word	0x00001c05
    1c78:	40000c00 	.word	0x40000c00

00001c7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c7c:	b510      	push	{r4, lr}
    1c7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <system_gclk_chan_get_hz+0x20>)
    1c82:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c84:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <system_gclk_chan_get_hz+0x24>)
    1c86:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <system_gclk_chan_get_hz+0x28>)
    1c8a:	885c      	ldrh	r4, [r3, #2]
    1c8c:	0524      	lsls	r4, r4, #20
    1c8e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c90:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <system_gclk_chan_get_hz+0x2c>)
    1c92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c94:	0020      	movs	r0, r4
    1c96:	4b05      	ldr	r3, [pc, #20]	; (1cac <system_gclk_chan_get_hz+0x30>)
    1c98:	4798      	blx	r3
}
    1c9a:	bd10      	pop	{r4, pc}
    1c9c:	000017ad 	.word	0x000017ad
    1ca0:	40000c02 	.word	0x40000c02
    1ca4:	40000c00 	.word	0x40000c00
    1ca8:	000017ed 	.word	0x000017ed
    1cac:	00001b49 	.word	0x00001b49

00001cb0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1cb0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cb2:	78d3      	ldrb	r3, [r2, #3]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d135      	bne.n	1d24 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1cb8:	7813      	ldrb	r3, [r2, #0]
    1cba:	2b80      	cmp	r3, #128	; 0x80
    1cbc:	d029      	beq.n	1d12 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1cbe:	061b      	lsls	r3, r3, #24
    1cc0:	2480      	movs	r4, #128	; 0x80
    1cc2:	0264      	lsls	r4, r4, #9
    1cc4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cc6:	7854      	ldrb	r4, [r2, #1]
    1cc8:	2502      	movs	r5, #2
    1cca:	43ac      	bics	r4, r5
    1ccc:	d106      	bne.n	1cdc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cce:	7894      	ldrb	r4, [r2, #2]
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	d120      	bne.n	1d16 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cd4:	2480      	movs	r4, #128	; 0x80
    1cd6:	02a4      	lsls	r4, r4, #10
    1cd8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1cda:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cdc:	7854      	ldrb	r4, [r2, #1]
    1cde:	3c01      	subs	r4, #1
    1ce0:	2c01      	cmp	r4, #1
    1ce2:	d91c      	bls.n	1d1e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ce4:	040d      	lsls	r5, r1, #16
    1ce6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ce8:	24a0      	movs	r4, #160	; 0xa0
    1cea:	05e4      	lsls	r4, r4, #23
    1cec:	432c      	orrs	r4, r5
    1cee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cf0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cf2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cf4:	24d0      	movs	r4, #208	; 0xd0
    1cf6:	0624      	lsls	r4, r4, #24
    1cf8:	432c      	orrs	r4, r5
    1cfa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cfc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cfe:	78d4      	ldrb	r4, [r2, #3]
    1d00:	2c00      	cmp	r4, #0
    1d02:	d122      	bne.n	1d4a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d04:	035b      	lsls	r3, r3, #13
    1d06:	d51c      	bpl.n	1d42 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d08:	7893      	ldrb	r3, [r2, #2]
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	d01e      	beq.n	1d4c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d0e:	6141      	str	r1, [r0, #20]
    1d10:	e017      	b.n	1d42 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1d12:	2300      	movs	r3, #0
    1d14:	e7d7      	b.n	1cc6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d16:	24c0      	movs	r4, #192	; 0xc0
    1d18:	02e4      	lsls	r4, r4, #11
    1d1a:	4323      	orrs	r3, r4
    1d1c:	e7dd      	b.n	1cda <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d1e:	4c0d      	ldr	r4, [pc, #52]	; (1d54 <_system_pinmux_config+0xa4>)
    1d20:	4023      	ands	r3, r4
    1d22:	e7df      	b.n	1ce4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d24:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d26:	040c      	lsls	r4, r1, #16
    1d28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d2a:	23a0      	movs	r3, #160	; 0xa0
    1d2c:	05db      	lsls	r3, r3, #23
    1d2e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d30:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d32:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d34:	23d0      	movs	r3, #208	; 0xd0
    1d36:	061b      	lsls	r3, r3, #24
    1d38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d3c:	78d3      	ldrb	r3, [r2, #3]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d103      	bne.n	1d4a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d42:	7853      	ldrb	r3, [r2, #1]
    1d44:	3b01      	subs	r3, #1
    1d46:	2b01      	cmp	r3, #1
    1d48:	d902      	bls.n	1d50 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d4a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d4c:	6181      	str	r1, [r0, #24]
    1d4e:	e7f8      	b.n	1d42 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d50:	6081      	str	r1, [r0, #8]
}
    1d52:	e7fa      	b.n	1d4a <_system_pinmux_config+0x9a>
    1d54:	fffbffff 	.word	0xfffbffff

00001d58 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d58:	b510      	push	{r4, lr}
    1d5a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d5c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d60:	2900      	cmp	r1, #0
    1d62:	d104      	bne.n	1d6e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d64:	0943      	lsrs	r3, r0, #5
    1d66:	01db      	lsls	r3, r3, #7
    1d68:	4905      	ldr	r1, [pc, #20]	; (1d80 <system_pinmux_pin_set_config+0x28>)
    1d6a:	468c      	mov	ip, r1
    1d6c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d6e:	241f      	movs	r4, #31
    1d70:	4020      	ands	r0, r4
    1d72:	2101      	movs	r1, #1
    1d74:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d76:	0018      	movs	r0, r3
    1d78:	4b02      	ldr	r3, [pc, #8]	; (1d84 <system_pinmux_pin_set_config+0x2c>)
    1d7a:	4798      	blx	r3
}
    1d7c:	bd10      	pop	{r4, pc}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	41004400 	.word	0x41004400
    1d84:	00001cb1 	.word	0x00001cb1

00001d88 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    1d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8a:	46c6      	mov	lr, r8
    1d8c:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    1d8e:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    1d90:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    1d92:	2440      	movs	r4, #64	; 0x40
    1d94:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    1d96:	46a4      	mov	ip, r4
    1d98:	e009      	b.n	1dae <system_pinmux_group_set_output_strength+0x26>
    1d9a:	18c5      	adds	r5, r0, r3
    1d9c:	3540      	adds	r5, #64	; 0x40
    1d9e:	782c      	ldrb	r4, [r5, #0]
    1da0:	4667      	mov	r7, ip
    1da2:	433c      	orrs	r4, r7
    1da4:	b2e4      	uxtb	r4, r4
    1da6:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    1da8:	3301      	adds	r3, #1
    1daa:	2b20      	cmp	r3, #32
    1dac:	d00c      	beq.n	1dc8 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    1dae:	000c      	movs	r4, r1
    1db0:	40dc      	lsrs	r4, r3
    1db2:	4226      	tst	r6, r4
    1db4:	d0f8      	beq.n	1da8 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    1db6:	2a01      	cmp	r2, #1
    1db8:	d0ef      	beq.n	1d9a <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    1dba:	18c4      	adds	r4, r0, r3
    1dbc:	3440      	adds	r4, #64	; 0x40
    1dbe:	7825      	ldrb	r5, [r4, #0]
    1dc0:	4647      	mov	r7, r8
    1dc2:	43bd      	bics	r5, r7
    1dc4:	7025      	strb	r5, [r4, #0]
    1dc6:	e7ef      	b.n	1da8 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    1dc8:	bc04      	pop	{r2}
    1dca:	4690      	mov	r8, r2
    1dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001dce <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1dce:	4770      	bx	lr

00001dd0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1dd0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1dd2:	4b05      	ldr	r3, [pc, #20]	; (1de8 <system_init+0x18>)
    1dd4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <system_init+0x1c>)
    1dd8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <system_init+0x20>)
    1ddc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1dde:	4b05      	ldr	r3, [pc, #20]	; (1df4 <system_init+0x24>)
    1de0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <system_init+0x28>)
    1de4:	4798      	blx	r3
}
    1de6:	bd10      	pop	{r4, pc}
    1de8:	00001991 	.word	0x00001991
    1dec:	000017a9 	.word	0x000017a9
    1df0:	00001dcf 	.word	0x00001dcf
    1df4:	000006a1 	.word	0x000006a1
    1df8:	00001dcf 	.word	0x00001dcf

00001dfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1dfc:	e7fe      	b.n	1dfc <Dummy_Handler>
	...

00001e00 <Reset_Handler>:
{
    1e00:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1e02:	4a26      	ldr	r2, [pc, #152]	; (1e9c <Reset_Handler+0x9c>)
    1e04:	4b26      	ldr	r3, [pc, #152]	; (1ea0 <Reset_Handler+0xa0>)
    1e06:	429a      	cmp	r2, r3
    1e08:	d011      	beq.n	1e2e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1e0a:	001a      	movs	r2, r3
    1e0c:	4b25      	ldr	r3, [pc, #148]	; (1ea4 <Reset_Handler+0xa4>)
    1e0e:	429a      	cmp	r2, r3
    1e10:	d20d      	bcs.n	1e2e <Reset_Handler+0x2e>
    1e12:	4a25      	ldr	r2, [pc, #148]	; (1ea8 <Reset_Handler+0xa8>)
    1e14:	3303      	adds	r3, #3
    1e16:	1a9b      	subs	r3, r3, r2
    1e18:	089b      	lsrs	r3, r3, #2
    1e1a:	3301      	adds	r3, #1
    1e1c:	009b      	lsls	r3, r3, #2
    1e1e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e20:	481f      	ldr	r0, [pc, #124]	; (1ea0 <Reset_Handler+0xa0>)
    1e22:	491e      	ldr	r1, [pc, #120]	; (1e9c <Reset_Handler+0x9c>)
    1e24:	588c      	ldr	r4, [r1, r2]
    1e26:	5084      	str	r4, [r0, r2]
    1e28:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e2a:	429a      	cmp	r2, r3
    1e2c:	d1fa      	bne.n	1e24 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e2e:	4a1f      	ldr	r2, [pc, #124]	; (1eac <Reset_Handler+0xac>)
    1e30:	4b1f      	ldr	r3, [pc, #124]	; (1eb0 <Reset_Handler+0xb0>)
    1e32:	429a      	cmp	r2, r3
    1e34:	d20a      	bcs.n	1e4c <Reset_Handler+0x4c>
    1e36:	43d3      	mvns	r3, r2
    1e38:	491d      	ldr	r1, [pc, #116]	; (1eb0 <Reset_Handler+0xb0>)
    1e3a:	185b      	adds	r3, r3, r1
    1e3c:	2103      	movs	r1, #3
    1e3e:	438b      	bics	r3, r1
    1e40:	3304      	adds	r3, #4
    1e42:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e44:	2100      	movs	r1, #0
    1e46:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e48:	4293      	cmp	r3, r2
    1e4a:	d1fc      	bne.n	1e46 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e4c:	4a19      	ldr	r2, [pc, #100]	; (1eb4 <Reset_Handler+0xb4>)
    1e4e:	21ff      	movs	r1, #255	; 0xff
    1e50:	4b19      	ldr	r3, [pc, #100]	; (1eb8 <Reset_Handler+0xb8>)
    1e52:	438b      	bics	r3, r1
    1e54:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e56:	39fd      	subs	r1, #253	; 0xfd
    1e58:	2390      	movs	r3, #144	; 0x90
    1e5a:	005b      	lsls	r3, r3, #1
    1e5c:	4a17      	ldr	r2, [pc, #92]	; (1ebc <Reset_Handler+0xbc>)
    1e5e:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e60:	4b17      	ldr	r3, [pc, #92]	; (1ec0 <Reset_Handler+0xc0>)
    1e62:	7b9a      	ldrb	r2, [r3, #14]
    1e64:	312e      	adds	r1, #46	; 0x2e
    1e66:	438a      	bics	r2, r1
    1e68:	2120      	movs	r1, #32
    1e6a:	430a      	orrs	r2, r1
    1e6c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e6e:	7b9a      	ldrb	r2, [r3, #14]
    1e70:	210c      	movs	r1, #12
    1e72:	438a      	bics	r2, r1
    1e74:	2108      	movs	r1, #8
    1e76:	430a      	orrs	r2, r1
    1e78:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e7a:	7b9a      	ldrb	r2, [r3, #14]
    1e7c:	2103      	movs	r1, #3
    1e7e:	438a      	bics	r2, r1
    1e80:	2102      	movs	r1, #2
    1e82:	430a      	orrs	r2, r1
    1e84:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e86:	4a0f      	ldr	r2, [pc, #60]	; (1ec4 <Reset_Handler+0xc4>)
    1e88:	6853      	ldr	r3, [r2, #4]
    1e8a:	2180      	movs	r1, #128	; 0x80
    1e8c:	430b      	orrs	r3, r1
    1e8e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e90:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <Reset_Handler+0xc8>)
    1e92:	4798      	blx	r3
        main();
    1e94:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <Reset_Handler+0xcc>)
    1e96:	4798      	blx	r3
    1e98:	e7fe      	b.n	1e98 <Reset_Handler+0x98>
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	00002260 	.word	0x00002260
    1ea0:	20000000 	.word	0x20000000
    1ea4:	20000010 	.word	0x20000010
    1ea8:	20000004 	.word	0x20000004
    1eac:	20000010 	.word	0x20000010
    1eb0:	20000180 	.word	0x20000180
    1eb4:	e000ed00 	.word	0xe000ed00
    1eb8:	00000000 	.word	0x00000000
    1ebc:	41007000 	.word	0x41007000
    1ec0:	41004800 	.word	0x41004800
    1ec4:	41004000 	.word	0x41004000
    1ec8:	0000203d 	.word	0x0000203d
    1ecc:	00001ed1 	.word	0x00001ed1

00001ed0 <main>:
{
	read_all_sensors();	
}

int main (void)
{
    1ed0:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1ed2:	4b0a      	ldr	r3, [pc, #40]	; (1efc <main+0x2c>)
    1ed4:	4798      	blx	r3
	delay_init();
    1ed6:	4b0a      	ldr	r3, [pc, #40]	; (1f00 <main+0x30>)
    1ed8:	4798      	blx	r3
	LED_init();
    1eda:	4b0a      	ldr	r3, [pc, #40]	; (1f04 <main+0x34>)
    1edc:	4798      	blx	r3
	ORB_init();
    1ede:	4b0a      	ldr	r3, [pc, #40]	; (1f08 <main+0x38>)
    1ee0:	4798      	blx	r3
	sensor_init();
    1ee2:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <main+0x3c>)
    1ee4:	4798      	blx	r3
	enable_super_servo();
    1ee6:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <main+0x40>)
    1ee8:	4798      	blx	r3
	enable_ORB();
    1eea:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <main+0x44>)
    1eec:	4798      	blx	r3
	enable_LED();
    1eee:	4b0a      	ldr	r3, [pc, #40]	; (1f18 <main+0x48>)
    1ef0:	4798      	blx	r3
	read_all_sensors();	
    1ef2:	4d0a      	ldr	r5, [pc, #40]	; (1f1c <main+0x4c>)
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		load_input();
		 test_ORB();
    1ef4:	4c0a      	ldr	r4, [pc, #40]	; (1f20 <main+0x50>)
	read_all_sensors();	
    1ef6:	47a8      	blx	r5
		 test_ORB();
    1ef8:	47a0      	blx	r4
    1efa:	e7fc      	b.n	1ef6 <main+0x26>
    1efc:	00001dd1 	.word	0x00001dd1
    1f00:	000000ed 	.word	0x000000ed
    1f04:	000012c9 	.word	0x000012c9
    1f08:	00001785 	.word	0x00001785
    1f0c:	000008b5 	.word	0x000008b5
    1f10:	000008c1 	.word	0x000008c1
    1f14:	000016b9 	.word	0x000016b9
    1f18:	00001099 	.word	0x00001099
    1f1c:	00000759 	.word	0x00000759
    1f20:	000008dd 	.word	0x000008dd

00001f24 <__udivsi3>:
    1f24:	2200      	movs	r2, #0
    1f26:	0843      	lsrs	r3, r0, #1
    1f28:	428b      	cmp	r3, r1
    1f2a:	d374      	bcc.n	2016 <__udivsi3+0xf2>
    1f2c:	0903      	lsrs	r3, r0, #4
    1f2e:	428b      	cmp	r3, r1
    1f30:	d35f      	bcc.n	1ff2 <__udivsi3+0xce>
    1f32:	0a03      	lsrs	r3, r0, #8
    1f34:	428b      	cmp	r3, r1
    1f36:	d344      	bcc.n	1fc2 <__udivsi3+0x9e>
    1f38:	0b03      	lsrs	r3, r0, #12
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d328      	bcc.n	1f90 <__udivsi3+0x6c>
    1f3e:	0c03      	lsrs	r3, r0, #16
    1f40:	428b      	cmp	r3, r1
    1f42:	d30d      	bcc.n	1f60 <__udivsi3+0x3c>
    1f44:	22ff      	movs	r2, #255	; 0xff
    1f46:	0209      	lsls	r1, r1, #8
    1f48:	ba12      	rev	r2, r2
    1f4a:	0c03      	lsrs	r3, r0, #16
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d302      	bcc.n	1f56 <__udivsi3+0x32>
    1f50:	1212      	asrs	r2, r2, #8
    1f52:	0209      	lsls	r1, r1, #8
    1f54:	d065      	beq.n	2022 <__udivsi3+0xfe>
    1f56:	0b03      	lsrs	r3, r0, #12
    1f58:	428b      	cmp	r3, r1
    1f5a:	d319      	bcc.n	1f90 <__udivsi3+0x6c>
    1f5c:	e000      	b.n	1f60 <__udivsi3+0x3c>
    1f5e:	0a09      	lsrs	r1, r1, #8
    1f60:	0bc3      	lsrs	r3, r0, #15
    1f62:	428b      	cmp	r3, r1
    1f64:	d301      	bcc.n	1f6a <__udivsi3+0x46>
    1f66:	03cb      	lsls	r3, r1, #15
    1f68:	1ac0      	subs	r0, r0, r3
    1f6a:	4152      	adcs	r2, r2
    1f6c:	0b83      	lsrs	r3, r0, #14
    1f6e:	428b      	cmp	r3, r1
    1f70:	d301      	bcc.n	1f76 <__udivsi3+0x52>
    1f72:	038b      	lsls	r3, r1, #14
    1f74:	1ac0      	subs	r0, r0, r3
    1f76:	4152      	adcs	r2, r2
    1f78:	0b43      	lsrs	r3, r0, #13
    1f7a:	428b      	cmp	r3, r1
    1f7c:	d301      	bcc.n	1f82 <__udivsi3+0x5e>
    1f7e:	034b      	lsls	r3, r1, #13
    1f80:	1ac0      	subs	r0, r0, r3
    1f82:	4152      	adcs	r2, r2
    1f84:	0b03      	lsrs	r3, r0, #12
    1f86:	428b      	cmp	r3, r1
    1f88:	d301      	bcc.n	1f8e <__udivsi3+0x6a>
    1f8a:	030b      	lsls	r3, r1, #12
    1f8c:	1ac0      	subs	r0, r0, r3
    1f8e:	4152      	adcs	r2, r2
    1f90:	0ac3      	lsrs	r3, r0, #11
    1f92:	428b      	cmp	r3, r1
    1f94:	d301      	bcc.n	1f9a <__udivsi3+0x76>
    1f96:	02cb      	lsls	r3, r1, #11
    1f98:	1ac0      	subs	r0, r0, r3
    1f9a:	4152      	adcs	r2, r2
    1f9c:	0a83      	lsrs	r3, r0, #10
    1f9e:	428b      	cmp	r3, r1
    1fa0:	d301      	bcc.n	1fa6 <__udivsi3+0x82>
    1fa2:	028b      	lsls	r3, r1, #10
    1fa4:	1ac0      	subs	r0, r0, r3
    1fa6:	4152      	adcs	r2, r2
    1fa8:	0a43      	lsrs	r3, r0, #9
    1faa:	428b      	cmp	r3, r1
    1fac:	d301      	bcc.n	1fb2 <__udivsi3+0x8e>
    1fae:	024b      	lsls	r3, r1, #9
    1fb0:	1ac0      	subs	r0, r0, r3
    1fb2:	4152      	adcs	r2, r2
    1fb4:	0a03      	lsrs	r3, r0, #8
    1fb6:	428b      	cmp	r3, r1
    1fb8:	d301      	bcc.n	1fbe <__udivsi3+0x9a>
    1fba:	020b      	lsls	r3, r1, #8
    1fbc:	1ac0      	subs	r0, r0, r3
    1fbe:	4152      	adcs	r2, r2
    1fc0:	d2cd      	bcs.n	1f5e <__udivsi3+0x3a>
    1fc2:	09c3      	lsrs	r3, r0, #7
    1fc4:	428b      	cmp	r3, r1
    1fc6:	d301      	bcc.n	1fcc <__udivsi3+0xa8>
    1fc8:	01cb      	lsls	r3, r1, #7
    1fca:	1ac0      	subs	r0, r0, r3
    1fcc:	4152      	adcs	r2, r2
    1fce:	0983      	lsrs	r3, r0, #6
    1fd0:	428b      	cmp	r3, r1
    1fd2:	d301      	bcc.n	1fd8 <__udivsi3+0xb4>
    1fd4:	018b      	lsls	r3, r1, #6
    1fd6:	1ac0      	subs	r0, r0, r3
    1fd8:	4152      	adcs	r2, r2
    1fda:	0943      	lsrs	r3, r0, #5
    1fdc:	428b      	cmp	r3, r1
    1fde:	d301      	bcc.n	1fe4 <__udivsi3+0xc0>
    1fe0:	014b      	lsls	r3, r1, #5
    1fe2:	1ac0      	subs	r0, r0, r3
    1fe4:	4152      	adcs	r2, r2
    1fe6:	0903      	lsrs	r3, r0, #4
    1fe8:	428b      	cmp	r3, r1
    1fea:	d301      	bcc.n	1ff0 <__udivsi3+0xcc>
    1fec:	010b      	lsls	r3, r1, #4
    1fee:	1ac0      	subs	r0, r0, r3
    1ff0:	4152      	adcs	r2, r2
    1ff2:	08c3      	lsrs	r3, r0, #3
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d301      	bcc.n	1ffc <__udivsi3+0xd8>
    1ff8:	00cb      	lsls	r3, r1, #3
    1ffa:	1ac0      	subs	r0, r0, r3
    1ffc:	4152      	adcs	r2, r2
    1ffe:	0883      	lsrs	r3, r0, #2
    2000:	428b      	cmp	r3, r1
    2002:	d301      	bcc.n	2008 <__udivsi3+0xe4>
    2004:	008b      	lsls	r3, r1, #2
    2006:	1ac0      	subs	r0, r0, r3
    2008:	4152      	adcs	r2, r2
    200a:	0843      	lsrs	r3, r0, #1
    200c:	428b      	cmp	r3, r1
    200e:	d301      	bcc.n	2014 <__udivsi3+0xf0>
    2010:	004b      	lsls	r3, r1, #1
    2012:	1ac0      	subs	r0, r0, r3
    2014:	4152      	adcs	r2, r2
    2016:	1a41      	subs	r1, r0, r1
    2018:	d200      	bcs.n	201c <__udivsi3+0xf8>
    201a:	4601      	mov	r1, r0
    201c:	4152      	adcs	r2, r2
    201e:	4610      	mov	r0, r2
    2020:	4770      	bx	lr
    2022:	e7ff      	b.n	2024 <__udivsi3+0x100>
    2024:	b501      	push	{r0, lr}
    2026:	2000      	movs	r0, #0
    2028:	f000 f806 	bl	2038 <__aeabi_idiv0>
    202c:	bd02      	pop	{r1, pc}
    202e:	46c0      	nop			; (mov r8, r8)

00002030 <__aeabi_uidivmod>:
    2030:	2900      	cmp	r1, #0
    2032:	d0f7      	beq.n	2024 <__udivsi3+0x100>
    2034:	e776      	b.n	1f24 <__udivsi3>
    2036:	4770      	bx	lr

00002038 <__aeabi_idiv0>:
    2038:	4770      	bx	lr
    203a:	46c0      	nop			; (mov r8, r8)

0000203c <__libc_init_array>:
    203c:	b570      	push	{r4, r5, r6, lr}
    203e:	2600      	movs	r6, #0
    2040:	4d0c      	ldr	r5, [pc, #48]	; (2074 <__libc_init_array+0x38>)
    2042:	4c0d      	ldr	r4, [pc, #52]	; (2078 <__libc_init_array+0x3c>)
    2044:	1b64      	subs	r4, r4, r5
    2046:	10a4      	asrs	r4, r4, #2
    2048:	42a6      	cmp	r6, r4
    204a:	d109      	bne.n	2060 <__libc_init_array+0x24>
    204c:	2600      	movs	r6, #0
    204e:	f000 f8f7 	bl	2240 <_init>
    2052:	4d0a      	ldr	r5, [pc, #40]	; (207c <__libc_init_array+0x40>)
    2054:	4c0a      	ldr	r4, [pc, #40]	; (2080 <__libc_init_array+0x44>)
    2056:	1b64      	subs	r4, r4, r5
    2058:	10a4      	asrs	r4, r4, #2
    205a:	42a6      	cmp	r6, r4
    205c:	d105      	bne.n	206a <__libc_init_array+0x2e>
    205e:	bd70      	pop	{r4, r5, r6, pc}
    2060:	00b3      	lsls	r3, r6, #2
    2062:	58eb      	ldr	r3, [r5, r3]
    2064:	4798      	blx	r3
    2066:	3601      	adds	r6, #1
    2068:	e7ee      	b.n	2048 <__libc_init_array+0xc>
    206a:	00b3      	lsls	r3, r6, #2
    206c:	58eb      	ldr	r3, [r5, r3]
    206e:	4798      	blx	r3
    2070:	3601      	adds	r6, #1
    2072:	e7f2      	b.n	205a <__libc_init_array+0x1e>
    2074:	0000224c 	.word	0x0000224c
    2078:	0000224c 	.word	0x0000224c
    207c:	0000224c 	.word	0x0000224c
    2080:	00002250 	.word	0x00002250

00002084 <memcpy>:
    2084:	2300      	movs	r3, #0
    2086:	b510      	push	{r4, lr}
    2088:	429a      	cmp	r2, r3
    208a:	d100      	bne.n	208e <memcpy+0xa>
    208c:	bd10      	pop	{r4, pc}
    208e:	5ccc      	ldrb	r4, [r1, r3]
    2090:	54c4      	strb	r4, [r0, r3]
    2092:	3301      	adds	r3, #1
    2094:	e7f8      	b.n	2088 <memcpy+0x4>
    2096:	0000      	movs	r0, r0
    2098:	0000036a 	.word	0x0000036a
    209c:	000005b6 	.word	0x000005b6
    20a0:	000005b6 	.word	0x000005b6
    20a4:	000005b6 	.word	0x000005b6
    20a8:	000005b6 	.word	0x000005b6
    20ac:	000005b6 	.word	0x000005b6
    20b0:	000005b6 	.word	0x000005b6
    20b4:	000005b6 	.word	0x000005b6
    20b8:	000005b6 	.word	0x000005b6
    20bc:	000005b6 	.word	0x000005b6
    20c0:	000005b6 	.word	0x000005b6
    20c4:	000005b6 	.word	0x000005b6
    20c8:	000005b6 	.word	0x000005b6
    20cc:	000005b6 	.word	0x000005b6
    20d0:	000005b6 	.word	0x000005b6
    20d4:	000005b6 	.word	0x000005b6
    20d8:	00000352 	.word	0x00000352
    20dc:	000005b6 	.word	0x000005b6
    20e0:	000005b6 	.word	0x000005b6
    20e4:	000005b6 	.word	0x000005b6
    20e8:	000005b6 	.word	0x000005b6
    20ec:	000005b6 	.word	0x000005b6
    20f0:	000005b6 	.word	0x000005b6
    20f4:	000005b6 	.word	0x000005b6
    20f8:	000005b6 	.word	0x000005b6
    20fc:	000005b6 	.word	0x000005b6
    2100:	000005b6 	.word	0x000005b6
    2104:	000005b6 	.word	0x000005b6
    2108:	000005b6 	.word	0x000005b6
    210c:	000005b6 	.word	0x000005b6
    2110:	000005b6 	.word	0x000005b6
    2114:	000005b6 	.word	0x000005b6
    2118:	00000362 	.word	0x00000362
    211c:	000005b6 	.word	0x000005b6
    2120:	000005b6 	.word	0x000005b6
    2124:	000005b6 	.word	0x000005b6
    2128:	000005b6 	.word	0x000005b6
    212c:	000005b6 	.word	0x000005b6
    2130:	000005b6 	.word	0x000005b6
    2134:	000005b6 	.word	0x000005b6
    2138:	000005b6 	.word	0x000005b6
    213c:	000005b6 	.word	0x000005b6
    2140:	000005b6 	.word	0x000005b6
    2144:	000005b6 	.word	0x000005b6
    2148:	000005b6 	.word	0x000005b6
    214c:	000005b6 	.word	0x000005b6
    2150:	000005b6 	.word	0x000005b6
    2154:	000005b6 	.word	0x000005b6
    2158:	0000035a 	.word	0x0000035a
    215c:	00000372 	.word	0x00000372
    2160:	0000033a 	.word	0x0000033a
    2164:	0000034a 	.word	0x0000034a
    2168:	00000342 	.word	0x00000342
    216c:	00000002 	.word	0x00000002
    2170:	00000003 	.word	0x00000003
    2174:	00000004 	.word	0x00000004
    2178:	00000005 	.word	0x00000005
    217c:	00000006 	.word	0x00000006
    2180:	00000007 	.word	0x00000007
    2184:	0000000e 	.word	0x0000000e
    2188:	0000000f 	.word	0x0000000f
    218c:	0000000a 	.word	0x0000000a
    2190:	0000000b 	.word	0x0000000b
    2194:	0000ffff 	.word	0x0000ffff
    2198:	0000ffff 	.word	0x0000ffff
    219c:	0000ffff 	.word	0x0000ffff
    21a0:	0000ffff 	.word	0x0000ffff
    21a4:	0000ffff 	.word	0x0000ffff
    21a8:	0000ffff 	.word	0x0000ffff
    21ac:	0000ffff 	.word	0x0000ffff
    21b0:	0000ffff 	.word	0x0000ffff
    21b4:	0000ffff 	.word	0x0000ffff
    21b8:	0000ffff 	.word	0x0000ffff

000021bc <sensor_analog_inputs>:
    21bc:	00080906                                ....

000021c0 <_tcc_intflag>:
    21c0:	00000001 00000002 00000004 00000008     ................
    21d0:	00001000 00002000 00004000 00008000     ..... ...@......
    21e0:	00010000 00020000 00040000 00080000     ................

000021f0 <tc_interrupt_vectors.11931>:
    21f0:	00000e0d                                ....

000021f4 <tc_interrupt_vectors.11931>:
    21f4:	00000e0d 0000182e 0000182a 0000182a     ........*...*...
    2204:	0000188c 0000188c 00001842 00001834     ........B...4...
    2214:	00001848 0000187a 00001914 000018f4     H...z...........
    2224:	000018f4 00001980 00001906 00001922     ............"...
    2234:	000018f8 00001930 00001970              ....0...p...

00002240 <_init>:
    2240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2246:	bc08      	pop	{r3}
    2248:	469e      	mov	lr, r3
    224a:	4770      	bx	lr

0000224c <__init_array_start>:
    224c:	000000b5 	.word	0x000000b5

00002250 <_fini>:
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2256:	bc08      	pop	{r3}
    2258:	469e      	mov	lr, r3
    225a:	4770      	bx	lr

0000225c <__fini_array_start>:
    225c:	0000008d 	.word	0x0000008d
