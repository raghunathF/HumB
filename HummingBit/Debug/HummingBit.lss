
HummingBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f2c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000300  20000074  00003fa0  00020074  2**2
                  ALLOC
  3 .stack        00000404  20000374  000042a0  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054812  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d7e  00000000  00000000  00074907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008d41  00000000  00000000  0007b685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000958  00000000  00000000  000843c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b08  00000000  00000000  00084d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b67e  00000000  00000000  00085826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001801d  00000000  00000000  000a0ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072f10  00000000  00000000  000b8ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016d8  00000000  00000000  0012bdd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 07 00 20 b9 36 00 00 b5 36 00 00 b5 36 00 00     x.. .6...6...6..
	...
      2c:	b5 36 00 00 00 00 00 00 00 00 00 00 b5 36 00 00     .6...........6..
      3c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      4c:	b5 36 00 00 11 26 00 00 b5 36 00 00 b5 36 00 00     .6...&...6...6..
      5c:	00 00 00 00 b5 36 00 00 e1 25 00 00 f1 25 00 00     .....6...%...%..
      6c:	01 26 00 00 dd 1b 00 00 59 1f 00 00 69 1f 00 00     .&......Y...i...
      7c:	75 0c 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     u....6...6...6..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000074 	.word	0x20000074
      ac:	00000000 	.word	0x00000000
      b0:	00003f2c 	.word	0x00003f2c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000078 	.word	0x20000078
      e0:	00003f2c 	.word	0x00003f2c
      e4:	00003f2c 	.word	0x00003f2c
      e8:	00000000 	.word	0x00000000

000000ec <usart_read_callback>:




void usart_read_callback(struct usart_module *const usart_module)
{
      ec:	b530      	push	{r4, r5, lr}
      ee:	b083      	sub	sp, #12
	volatile uint16_t received_data = 0;
      f0:	466b      	mov	r3, sp
      f2:	1d99      	adds	r1, r3, #6
      f4:	2300      	movs	r3, #0
      f6:	800b      	strh	r3, [r1, #0]
	received_data_updated = true;
      f8:	480b      	ldr	r0, [pc, #44]	; (128 <usart_read_callback+0x3c>)
      fa:	2401      	movs	r4, #1
      fc:	7004      	strb	r4, [r0, #0]
	received_data = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
      fe:	4b0b      	ldr	r3, [pc, #44]	; (12c <usart_read_callback+0x40>)
     100:	681b      	ldr	r3, [r3, #0]
     102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     104:	05db      	lsls	r3, r3, #23
     106:	0ddb      	lsrs	r3, r3, #23
     108:	800b      	strh	r3, [r1, #0]
	*(ring_buffer + head_ring_buffer) = (uint8_t)received_data;
     10a:	4a09      	ldr	r2, [pc, #36]	; (130 <usart_read_callback+0x44>)
     10c:	7815      	ldrb	r5, [r2, #0]
     10e:	4b09      	ldr	r3, [pc, #36]	; (134 <usart_read_callback+0x48>)
     110:	195b      	adds	r3, r3, r5
     112:	8809      	ldrh	r1, [r1, #0]
     114:	b2c9      	uxtb	r1, r1
     116:	7019      	strb	r1, [r3, #0]
	head_ring_buffer++;
     118:	7813      	ldrb	r3, [r2, #0]
     11a:	3301      	adds	r3, #1
     11c:	b2db      	uxtb	r3, r3
     11e:	7013      	strb	r3, [r2, #0]
	received_data_updated = true;
     120:	7004      	strb	r4, [r0, #0]
}
     122:	b003      	add	sp, #12
     124:	bd30      	pop	{r4, r5, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	200000f2 	.word	0x200000f2
     12c:	20000100 	.word	0x20000100
     130:	200000f1 	.word	0x200000f1
     134:	20000270 	.word	0x20000270

00000138 <configure_usart>:
{
     138:	b530      	push	{r4, r5, lr}
     13a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     13c:	2380      	movs	r3, #128	; 0x80
     13e:	05db      	lsls	r3, r3, #23
     140:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     142:	2300      	movs	r3, #0
     144:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     146:	22ff      	movs	r2, #255	; 0xff
     148:	4669      	mov	r1, sp
     14a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     14c:	2200      	movs	r2, #0
     14e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     150:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     152:	2101      	movs	r1, #1
     154:	2024      	movs	r0, #36	; 0x24
     156:	466c      	mov	r4, sp
     158:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     15a:	3001      	adds	r0, #1
     15c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     15e:	3125      	adds	r1, #37	; 0x25
     160:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     162:	3101      	adds	r1, #1
     164:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     166:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     168:	3105      	adds	r1, #5
     16a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     16c:	3101      	adds	r1, #1
     16e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     170:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     172:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     174:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     176:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     178:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     17a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     17c:	2313      	movs	r3, #19
     17e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     180:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = BAUDRATE_SERIAL_DEBUG;
     182:	23e1      	movs	r3, #225	; 0xe1
     184:	025b      	lsls	r3, r3, #9
     186:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = SERIAL_SERCOM_MUX_SETTING;
     188:	23c4      	movs	r3, #196	; 0xc4
     18a:	039b      	lsls	r3, r3, #14
     18c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERIAL_SERCOM_PINMUX_PAD0;
     18e:	2301      	movs	r3, #1
     190:	425b      	negs	r3, r3
     192:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERIAL_SERCOM_PINMUX_PAD1;
     194:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERIAL_SERCOM_PINMUX_PAD2;
     196:	4b10      	ldr	r3, [pc, #64]	; (1d8 <configure_usart+0xa0>)
     198:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERIAL_SERCOM_PINMUX_PAD3;
     19a:	4b10      	ldr	r3, [pc, #64]	; (1dc <configure_usart+0xa4>)
     19c:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,SERIAL_MODULE, &config_usart) != STATUS_OK)
     19e:	4d10      	ldr	r5, [pc, #64]	; (1e0 <configure_usart+0xa8>)
     1a0:	4c10      	ldr	r4, [pc, #64]	; (1e4 <configure_usart+0xac>)
     1a2:	466a      	mov	r2, sp
     1a4:	4910      	ldr	r1, [pc, #64]	; (1e8 <configure_usart+0xb0>)
     1a6:	0028      	movs	r0, r5
     1a8:	47a0      	blx	r4
     1aa:	2800      	cmp	r0, #0
     1ac:	d1f9      	bne.n	1a2 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ae:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <configure_usart+0xa8>)
     1b0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1b2:	0020      	movs	r0, r4
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <configure_usart+0xb4>)
     1b6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b8:	231f      	movs	r3, #31
     1ba:	4018      	ands	r0, r3
     1bc:	3b1e      	subs	r3, #30
     1be:	4083      	lsls	r3, r0
     1c0:	4a0b      	ldr	r2, [pc, #44]	; (1f0 <configure_usart+0xb8>)
     1c2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     1c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     1c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     1c8:	2b00      	cmp	r3, #0
     1ca:	d1fc      	bne.n	1c6 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     1cc:	6823      	ldr	r3, [r4, #0]
     1ce:	2202      	movs	r2, #2
     1d0:	4313      	orrs	r3, r2
     1d2:	6023      	str	r3, [r4, #0]
}
     1d4:	b011      	add	sp, #68	; 0x44
     1d6:	bd30      	pop	{r4, r5, pc}
     1d8:	00180002 	.word	0x00180002
     1dc:	00190002 	.word	0x00190002
     1e0:	20000100 	.word	0x20000100
     1e4:	00001f79 	.word	0x00001f79
     1e8:	42000c00 	.word	0x42000c00
     1ec:	000025c1 	.word	0x000025c1
     1f0:	e000e100 	.word	0xe000e100

000001f4 <configure_usart_callbacks>:

void configure_usart_callbacks()
{
     1f4:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     1f6:	2201      	movs	r2, #1
     1f8:	4902      	ldr	r1, [pc, #8]	; (204 <configure_usart_callbacks+0x10>)
     1fa:	4803      	ldr	r0, [pc, #12]	; (208 <configure_usart_callbacks+0x14>)
     1fc:	4b03      	ldr	r3, [pc, #12]	; (20c <configure_usart_callbacks+0x18>)
     1fe:	4798      	blx	r3
}
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	000000ed 	.word	0x000000ed
     208:	20000100 	.word	0x20000100
     20c:	000023f9 	.word	0x000023f9

00000210 <enable_USART>:


void enable_USART()
{
     210:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     212:	4805      	ldr	r0, [pc, #20]	; (228 <enable_USART+0x18>)
     214:	2231      	movs	r2, #49	; 0x31
     216:	5c83      	ldrb	r3, [r0, r2]
     218:	2102      	movs	r1, #2
     21a:	430b      	orrs	r3, r1
     21c:	5483      	strb	r3, [r0, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&usart_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
     21e:	3a30      	subs	r2, #48	; 0x30
     220:	4902      	ldr	r1, [pc, #8]	; (22c <enable_USART+0x1c>)
     222:	4b03      	ldr	r3, [pc, #12]	; (230 <enable_USART+0x20>)
     224:	4798      	blx	r3
}
     226:	bd10      	pop	{r4, pc}
     228:	20000100 	.word	0x20000100
     22c:	20000134 	.word	0x20000134
     230:	00002411 	.word	0x00002411

00000234 <serial_init>:

void serial_init()
{
     234:	b510      	push	{r4, lr}
	configure_usart();
     236:	4b02      	ldr	r3, [pc, #8]	; (240 <serial_init+0xc>)
     238:	4798      	blx	r3
	configure_usart_callbacks();
     23a:	4b02      	ldr	r3, [pc, #8]	; (244 <serial_init+0x10>)
     23c:	4798      	blx	r3
	
}
     23e:	bd10      	pop	{r4, pc}
     240:	00000139 	.word	0x00000139
     244:	000001f5 	.word	0x000001f5

00000248 <serial_receive_bytes>:
extern volatile uint8_t head_ring_buffer;
extern volatile bool received_data_updated;


void serial_receive_bytes(uint8_t count_receive ,uint8_t* receive_data)
{
     248:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
     24a:	4d0f      	ldr	r5, [pc, #60]	; (288 <serial_receive_bytes+0x40>)
     24c:	4c0f      	ldr	r4, [pc, #60]	; (28c <serial_receive_bytes+0x44>)
	{
		if(serial_timeout)
     24e:	4e10      	ldr	r6, [pc, #64]	; (290 <serial_receive_bytes+0x48>)
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
     250:	782b      	ldrb	r3, [r5, #0]
     252:	7822      	ldrb	r2, [r4, #0]
     254:	1a9b      	subs	r3, r3, r2
     256:	4283      	cmp	r3, r0
     258:	da03      	bge.n	262 <serial_receive_bytes+0x1a>
		if(serial_timeout)
     25a:	7833      	ldrb	r3, [r6, #0]
     25c:	2b00      	cmp	r3, #0
     25e:	d0f7      	beq.n	250 <serial_receive_bytes+0x8>
	for(i=1;i<=count_receive;i++)
	{
		receive_data[i] = ring_buffer[tail_ring_buffer];
		tail_ring_buffer++;
	}
}
     260:	bd70      	pop	{r4, r5, r6, pc}
	for(i=1;i<=count_receive;i++)
     262:	2800      	cmp	r0, #0
     264:	d0fc      	beq.n	260 <serial_receive_bytes+0x18>
     266:	2301      	movs	r3, #1
		receive_data[i] = ring_buffer[tail_ring_buffer];
     268:	4c08      	ldr	r4, [pc, #32]	; (28c <serial_receive_bytes+0x44>)
     26a:	4d0a      	ldr	r5, [pc, #40]	; (294 <serial_receive_bytes+0x4c>)
     26c:	7822      	ldrb	r2, [r4, #0]
     26e:	b2d2      	uxtb	r2, r2
     270:	5caa      	ldrb	r2, [r5, r2]
     272:	54ca      	strb	r2, [r1, r3]
		tail_ring_buffer++;
     274:	7822      	ldrb	r2, [r4, #0]
     276:	3201      	adds	r2, #1
     278:	b2d2      	uxtb	r2, r2
     27a:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=count_receive;i++)
     27c:	3301      	adds	r3, #1
     27e:	b2db      	uxtb	r3, r3
     280:	4298      	cmp	r0, r3
     282:	d2f3      	bcs.n	26c <serial_receive_bytes+0x24>
     284:	e7ec      	b.n	260 <serial_receive_bytes+0x18>
     286:	46c0      	nop			; (mov r8, r8)
     288:	200000f1 	.word	0x200000f1
     28c:	200000f5 	.word	0x200000f5
     290:	200000f3 	.word	0x200000f3
     294:	20000270 	.word	0x20000270

00000298 <serial_main_loop_1>:


void serial_main_loop_1()
{
     298:	b530      	push	{r4, r5, lr}
     29a:	b08f      	sub	sp, #60	; 0x3c
	volatile uint8_t received_value[MAX_REC_BYTE];
	volatile static uint8_t prev_rec_value[MAX_REC_BYTE];
	volatile uint8_t transmit_value[MAX_TRANSMIT_VALUE];
	volatile int temp=0;
     29c:	2300      	movs	r3, #0
     29e:	9303      	str	r3, [sp, #12]
	static volatile bool broadcast= false;

	//usart_read_job(&usart_instance ,)
	uint8_t i =0;
	if(head_ring_buffer != tail_ring_buffer)
     2a0:	4bc4      	ldr	r3, [pc, #784]	; (5b4 <STACK_SIZE+0x1b4>)
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	4ac4      	ldr	r2, [pc, #784]	; (5b8 <STACK_SIZE+0x1b8>)
     2a6:	7812      	ldrb	r2, [r2, #0]
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4293      	cmp	r3, r2
     2ac:	d100      	bne.n	2b0 <serial_main_loop_1+0x18>
     2ae:	e22e      	b.n	70e <STACK_SIZE+0x30e>
	{
		received_value[0] = ring_buffer[tail_ring_buffer];
     2b0:	4ac1      	ldr	r2, [pc, #772]	; (5b8 <STACK_SIZE+0x1b8>)
     2b2:	7813      	ldrb	r3, [r2, #0]
     2b4:	b2db      	uxtb	r3, r3
     2b6:	49c1      	ldr	r1, [pc, #772]	; (5bc <STACK_SIZE+0x1bc>)
     2b8:	5ccb      	ldrb	r3, [r1, r3]
     2ba:	b2db      	uxtb	r3, r3
     2bc:	a909      	add	r1, sp, #36	; 0x24
     2be:	700b      	strb	r3, [r1, #0]
		tail_ring_buffer++;
     2c0:	7813      	ldrb	r3, [r2, #0]
     2c2:	3301      	adds	r3, #1
     2c4:	b2db      	uxtb	r3, r3
     2c6:	7013      	strb	r3, [r2, #0]
		switch(received_value[0])
     2c8:	780b      	ldrb	r3, [r1, #0]
     2ca:	3b4c      	subs	r3, #76	; 0x4c
     2cc:	b2da      	uxtb	r2, r3
     2ce:	2a2c      	cmp	r2, #44	; 0x2c
     2d0:	d900      	bls.n	2d4 <serial_main_loop_1+0x3c>
     2d2:	e227      	b.n	724 <STACK_SIZE+0x324>
     2d4:	0093      	lsls	r3, r2, #2
     2d6:	4aba      	ldr	r2, [pc, #744]	; (5c0 <STACK_SIZE+0x1c0>)
     2d8:	58d3      	ldr	r3, [r2, r3]
     2da:	469f      	mov	pc, r3
		{
			
			//Set all the actuator values
			case 'u':
				serial_timeout_count = 0;
     2dc:	2300      	movs	r3, #0
     2de:	4ab9      	ldr	r2, [pc, #740]	; (5c4 <STACK_SIZE+0x1c4>)
     2e0:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     2e2:	4cb9      	ldr	r4, [pc, #740]	; (5c8 <STACK_SIZE+0x1c8>)
     2e4:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ALL_SET_LEN,received_value);
     2e6:	a909      	add	r1, sp, #36	; 0x24
     2e8:	200e      	movs	r0, #14
     2ea:	4bb8      	ldr	r3, [pc, #736]	; (5cc <STACK_SIZE+0x1cc>)
     2ec:	4798      	blx	r3
				if(serial_timeout == false)
     2ee:	7823      	ldrb	r3, [r4, #0]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d000      	beq.n	2f6 <serial_main_loop_1+0x5e>
     2f4:	e093      	b.n	41e <STACK_SIZE+0x1e>
				{
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
     2f6:	ab09      	add	r3, sp, #36	; 0x24
     2f8:	785b      	ldrb	r3, [r3, #1]
     2fa:	4ab5      	ldr	r2, [pc, #724]	; (5d0 <STACK_SIZE+0x1d0>)
     2fc:	7852      	ldrb	r2, [r2, #1]
     2fe:	b2db      	uxtb	r3, r3
     300:	4293      	cmp	r3, r2
     302:	d03c      	beq.n	37e <serial_main_loop_1+0xe6>
					{
						update_ORB(received_value[1] , received_value[2] , received_value[3], received_value[4] , received_value[5] , received_value[6]);
     304:	ac09      	add	r4, sp, #36	; 0x24
     306:	7860      	ldrb	r0, [r4, #1]
     308:	b2c0      	uxtb	r0, r0
     30a:	78a1      	ldrb	r1, [r4, #2]
     30c:	b2c9      	uxtb	r1, r1
     30e:	78e2      	ldrb	r2, [r4, #3]
     310:	b2d2      	uxtb	r2, r2
     312:	7923      	ldrb	r3, [r4, #4]
     314:	b2db      	uxtb	r3, r3
     316:	7965      	ldrb	r5, [r4, #5]
     318:	79a4      	ldrb	r4, [r4, #6]
     31a:	9401      	str	r4, [sp, #4]
     31c:	9500      	str	r5, [sp, #0]
     31e:	4cad      	ldr	r4, [pc, #692]	; (5d4 <STACK_SIZE+0x1d4>)
     320:	47a0      	blx	r4
					}
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
     322:	ab09      	add	r3, sp, #36	; 0x24
     324:	79db      	ldrb	r3, [r3, #7]
     326:	4aaa      	ldr	r2, [pc, #680]	; (5d0 <STACK_SIZE+0x1d0>)
     328:	79d2      	ldrb	r2, [r2, #7]
     32a:	b2db      	uxtb	r3, r3
     32c:	4293      	cmp	r3, r2
     32e:	d04a      	beq.n	3c6 <serial_main_loop_1+0x12e>
					{
						update_super_servo(received_value[7] , received_value[8] , received_value[9] , received_value[10]);
     330:	ab09      	add	r3, sp, #36	; 0x24
     332:	79d8      	ldrb	r0, [r3, #7]
     334:	b2c0      	uxtb	r0, r0
     336:	7a19      	ldrb	r1, [r3, #8]
     338:	b2c9      	uxtb	r1, r1
     33a:	7a5a      	ldrb	r2, [r3, #9]
     33c:	b2d2      	uxtb	r2, r2
     33e:	7a9b      	ldrb	r3, [r3, #10]
     340:	b2db      	uxtb	r3, r3
     342:	4ca5      	ldr	r4, [pc, #660]	; (5d8 <STACK_SIZE+0x1d8>)
     344:	47a0      	blx	r4
					}
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[13]^prev_rec_value[13]))
     346:	ab09      	add	r3, sp, #36	; 0x24
     348:	7adb      	ldrb	r3, [r3, #11]
     34a:	4aa1      	ldr	r2, [pc, #644]	; (5d0 <STACK_SIZE+0x1d0>)
     34c:	7ad2      	ldrb	r2, [r2, #11]
     34e:	b2db      	uxtb	r3, r3
     350:	4293      	cmp	r3, r2
     352:	d04e      	beq.n	3f2 <serial_main_loop_1+0x15a>
					{
						update_LEDS(received_value[11], received_value[12],received_value[13],received_value[14]);
     354:	ab09      	add	r3, sp, #36	; 0x24
     356:	7ad8      	ldrb	r0, [r3, #11]
     358:	b2c0      	uxtb	r0, r0
     35a:	7b19      	ldrb	r1, [r3, #12]
     35c:	b2c9      	uxtb	r1, r1
     35e:	7b5a      	ldrb	r2, [r3, #13]
     360:	b2d2      	uxtb	r2, r2
     362:	7b9b      	ldrb	r3, [r3, #14]
     364:	b2db      	uxtb	r3, r3
     366:	4c9d      	ldr	r4, [pc, #628]	; (5dc <STACK_SIZE+0x1dc>)
     368:	47a0      	blx	r4
{
     36a:	2301      	movs	r3, #1
					}
					for(i=1;i<=ALL_SET_LEN;i++)
					{
						prev_rec_value[i] = received_value[i];
     36c:	a809      	add	r0, sp, #36	; 0x24
     36e:	4998      	ldr	r1, [pc, #608]	; (5d0 <STACK_SIZE+0x1d0>)
     370:	5cc2      	ldrb	r2, [r0, r3]
     372:	b2d2      	uxtb	r2, r2
     374:	54ca      	strb	r2, [r1, r3]
     376:	3301      	adds	r3, #1
					for(i=1;i<=ALL_SET_LEN;i++)
     378:	2b0f      	cmp	r3, #15
     37a:	d1f9      	bne.n	370 <serial_main_loop_1+0xd8>
     37c:	e1b3      	b.n	6e6 <STACK_SIZE+0x2e6>
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
     37e:	ab09      	add	r3, sp, #36	; 0x24
     380:	789b      	ldrb	r3, [r3, #2]
     382:	4a93      	ldr	r2, [pc, #588]	; (5d0 <STACK_SIZE+0x1d0>)
     384:	7892      	ldrb	r2, [r2, #2]
     386:	b2db      	uxtb	r3, r3
     388:	4293      	cmp	r3, r2
     38a:	d1bb      	bne.n	304 <serial_main_loop_1+0x6c>
     38c:	ab09      	add	r3, sp, #36	; 0x24
     38e:	78db      	ldrb	r3, [r3, #3]
     390:	4a8f      	ldr	r2, [pc, #572]	; (5d0 <STACK_SIZE+0x1d0>)
     392:	78d2      	ldrb	r2, [r2, #3]
     394:	b2db      	uxtb	r3, r3
     396:	4293      	cmp	r3, r2
     398:	d1b4      	bne.n	304 <serial_main_loop_1+0x6c>
     39a:	ab09      	add	r3, sp, #36	; 0x24
     39c:	791b      	ldrb	r3, [r3, #4]
     39e:	4a8c      	ldr	r2, [pc, #560]	; (5d0 <STACK_SIZE+0x1d0>)
     3a0:	7912      	ldrb	r2, [r2, #4]
     3a2:	b2db      	uxtb	r3, r3
     3a4:	4293      	cmp	r3, r2
     3a6:	d1ad      	bne.n	304 <serial_main_loop_1+0x6c>
     3a8:	ab09      	add	r3, sp, #36	; 0x24
     3aa:	795b      	ldrb	r3, [r3, #5]
     3ac:	4a88      	ldr	r2, [pc, #544]	; (5d0 <STACK_SIZE+0x1d0>)
     3ae:	7952      	ldrb	r2, [r2, #5]
     3b0:	b2db      	uxtb	r3, r3
     3b2:	4293      	cmp	r3, r2
     3b4:	d1a6      	bne.n	304 <serial_main_loop_1+0x6c>
     3b6:	ab09      	add	r3, sp, #36	; 0x24
     3b8:	799b      	ldrb	r3, [r3, #6]
     3ba:	4a85      	ldr	r2, [pc, #532]	; (5d0 <STACK_SIZE+0x1d0>)
     3bc:	7992      	ldrb	r2, [r2, #6]
     3be:	b2db      	uxtb	r3, r3
     3c0:	4293      	cmp	r3, r2
     3c2:	d19f      	bne.n	304 <serial_main_loop_1+0x6c>
     3c4:	e7ad      	b.n	322 <serial_main_loop_1+0x8a>
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
     3c6:	ab09      	add	r3, sp, #36	; 0x24
     3c8:	7a1b      	ldrb	r3, [r3, #8]
     3ca:	4a81      	ldr	r2, [pc, #516]	; (5d0 <STACK_SIZE+0x1d0>)
     3cc:	7a12      	ldrb	r2, [r2, #8]
     3ce:	b2db      	uxtb	r3, r3
     3d0:	4293      	cmp	r3, r2
     3d2:	d1ad      	bne.n	330 <serial_main_loop_1+0x98>
     3d4:	ab09      	add	r3, sp, #36	; 0x24
     3d6:	7a5b      	ldrb	r3, [r3, #9]
     3d8:	4a7d      	ldr	r2, [pc, #500]	; (5d0 <STACK_SIZE+0x1d0>)
     3da:	7a52      	ldrb	r2, [r2, #9]
     3dc:	b2db      	uxtb	r3, r3
     3de:	4293      	cmp	r3, r2
     3e0:	d1a6      	bne.n	330 <serial_main_loop_1+0x98>
     3e2:	ab09      	add	r3, sp, #36	; 0x24
     3e4:	7a9b      	ldrb	r3, [r3, #10]
     3e6:	4a7a      	ldr	r2, [pc, #488]	; (5d0 <STACK_SIZE+0x1d0>)
     3e8:	7a92      	ldrb	r2, [r2, #10]
     3ea:	b2db      	uxtb	r3, r3
     3ec:	4293      	cmp	r3, r2
     3ee:	d19f      	bne.n	330 <serial_main_loop_1+0x98>
     3f0:	e7a9      	b.n	346 <serial_main_loop_1+0xae>
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[13]^prev_rec_value[13]))
     3f2:	ab09      	add	r3, sp, #36	; 0x24
     3f4:	7b1b      	ldrb	r3, [r3, #12]
     3f6:	4a76      	ldr	r2, [pc, #472]	; (5d0 <STACK_SIZE+0x1d0>)
     3f8:	7b12      	ldrb	r2, [r2, #12]
     3fa:	b2db      	uxtb	r3, r3
     3fc:	4293      	cmp	r3, r2
     3fe:	d1a9      	bne.n	354 <serial_main_loop_1+0xbc>
     400:	ab09      	add	r3, sp, #36	; 0x24
     402:	7b5b      	ldrb	r3, [r3, #13]
     404:	4a72      	ldr	r2, [pc, #456]	; (5d0 <STACK_SIZE+0x1d0>)
     406:	7b52      	ldrb	r2, [r2, #13]
     408:	b2db      	uxtb	r3, r3
     40a:	4293      	cmp	r3, r2
     40c:	d1a2      	bne.n	354 <serial_main_loop_1+0xbc>
     40e:	ab09      	add	r3, sp, #36	; 0x24
     410:	7b5b      	ldrb	r3, [r3, #13]
     412:	4a6f      	ldr	r2, [pc, #444]	; (5d0 <STACK_SIZE+0x1d0>)
     414:	7b52      	ldrb	r2, [r2, #13]
     416:	b2db      	uxtb	r3, r3
     418:	4293      	cmp	r3, r2
     41a:	d19b      	bne.n	354 <serial_main_loop_1+0xbc>
     41c:	e7a5      	b.n	36a <serial_main_loop_1+0xd2>
					}
				}
				else
				{
					serial_timeout_count = 0;
     41e:	2200      	movs	r2, #0
     420:	4b68      	ldr	r3, [pc, #416]	; (5c4 <STACK_SIZE+0x1c4>)
     422:	701a      	strb	r2, [r3, #0]
     424:	e15f      	b.n	6e6 <STACK_SIZE+0x2e6>
				}
				break;
			
			//Get all the sensors values
			case 'v':
				serial_timeout_count = 0;
     426:	2300      	movs	r3, #0
     428:	4a66      	ldr	r2, [pc, #408]	; (5c4 <STACK_SIZE+0x1c4>)
     42a:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     42c:	4a66      	ldr	r2, [pc, #408]	; (5c8 <STACK_SIZE+0x1c8>)
     42e:	7013      	strb	r3, [r2, #0]
				transmit_value[0] = read_sensor(SENSOR_NO_1);
     430:	2000      	movs	r0, #0
     432:	4d6b      	ldr	r5, [pc, #428]	; (5e0 <STACK_SIZE+0x1e0>)
     434:	47a8      	blx	r5
     436:	ac04      	add	r4, sp, #16
     438:	7020      	strb	r0, [r4, #0]
				transmit_value[1] = read_sensor(SENSOR_NO_2);
     43a:	2001      	movs	r0, #1
     43c:	47a8      	blx	r5
     43e:	7060      	strb	r0, [r4, #1]
				transmit_value[2] = read_sensor(SENSOR_NO_3);
     440:	2002      	movs	r0, #2
     442:	47a8      	blx	r5
     444:	70a0      	strb	r0, [r4, #2]
				transmit_value[3] = read_sensor(SENSOR_NO_4);
     446:	2003      	movs	r0, #3
     448:	47a8      	blx	r5
     44a:	70e0      	strb	r0, [r4, #3]
				
				usart_write_buffer_wait(&usart_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
     44c:	2204      	movs	r2, #4
     44e:	0021      	movs	r1, r4
     450:	4864      	ldr	r0, [pc, #400]	; (5e4 <STACK_SIZE+0x1e4>)
     452:	4b65      	ldr	r3, [pc, #404]	; (5e8 <STACK_SIZE+0x1e8>)
     454:	4798      	blx	r3

				break;
     456:	e146      	b.n	6e6 <STACK_SIZE+0x2e6>
				
			//Broadcast
			case 'b':
				serial_timeout_count = 0;
     458:	2400      	movs	r4, #0
     45a:	4b5a      	ldr	r3, [pc, #360]	; (5c4 <STACK_SIZE+0x1c4>)
     45c:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
     45e:	4b5a      	ldr	r3, [pc, #360]	; (5c8 <STACK_SIZE+0x1c8>)
     460:	701c      	strb	r4, [r3, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
     462:	ad09      	add	r5, sp, #36	; 0x24
     464:	0029      	movs	r1, r5
     466:	2001      	movs	r0, #1
     468:	4b58      	ldr	r3, [pc, #352]	; (5cc <STACK_SIZE+0x1cc>)
     46a:	4798      	blx	r3
				count_broadcast = 0;
     46c:	4b5f      	ldr	r3, [pc, #380]	; (5ec <STACK_SIZE+0x1ec>)
     46e:	701c      	strb	r4, [r3, #0]
				switch(received_value[1])
     470:	786b      	ldrb	r3, [r5, #1]
     472:	b2db      	uxtb	r3, r3
     474:	2b67      	cmp	r3, #103	; 0x67
     476:	d007      	beq.n	488 <STACK_SIZE+0x88>
     478:	2b73      	cmp	r3, #115	; 0x73
     47a:	d009      	beq.n	490 <STACK_SIZE+0x90>
						broadcast = false;
						break;
					
					default :
					
						head_ring_buffer = 0;
     47c:	2300      	movs	r3, #0
     47e:	4a4d      	ldr	r2, [pc, #308]	; (5b4 <STACK_SIZE+0x1b4>)
     480:	7013      	strb	r3, [r2, #0]
						tail_ring_buffer = 0;
     482:	4a4d      	ldr	r2, [pc, #308]	; (5b8 <STACK_SIZE+0x1b8>)
     484:	7013      	strb	r3, [r2, #0]
						break;
     486:	e12e      	b.n	6e6 <STACK_SIZE+0x2e6>
						broadcast = true;
     488:	2201      	movs	r2, #1
     48a:	4b59      	ldr	r3, [pc, #356]	; (5f0 <STACK_SIZE+0x1f0>)
     48c:	701a      	strb	r2, [r3, #0]
						break;	
     48e:	e12a      	b.n	6e6 <STACK_SIZE+0x2e6>
						broadcast = false;
     490:	2200      	movs	r2, #0
     492:	4b57      	ldr	r3, [pc, #348]	; (5f0 <STACK_SIZE+0x1f0>)
     494:	701a      	strb	r2, [r3, #0]
						break;
     496:	e126      	b.n	6e6 <STACK_SIZE+0x2e6>
					
				}
				break;
			
			case 'O':
				serial_timeout_count = 0;
     498:	2300      	movs	r3, #0
     49a:	4a4a      	ldr	r2, [pc, #296]	; (5c4 <STACK_SIZE+0x1c4>)
     49c:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     49e:	4c4a      	ldr	r4, [pc, #296]	; (5c8 <STACK_SIZE+0x1c8>)
     4a0:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ORB_SET_LEN,received_value);
     4a2:	a909      	add	r1, sp, #36	; 0x24
     4a4:	2004      	movs	r0, #4
     4a6:	4b49      	ldr	r3, [pc, #292]	; (5cc <STACK_SIZE+0x1cc>)
     4a8:	4798      	blx	r3
				if(serial_timeout == false)
     4aa:	7823      	ldrb	r3, [r4, #0]
     4ac:	2b00      	cmp	r3, #0
     4ae:	d000      	beq.n	4b2 <STACK_SIZE+0xb2>
     4b0:	e119      	b.n	6e6 <STACK_SIZE+0x2e6>
				{
					update_ORB_single(received_value[1],received_value[2], received_value[3], received_value[4]);
     4b2:	ab09      	add	r3, sp, #36	; 0x24
     4b4:	7858      	ldrb	r0, [r3, #1]
     4b6:	b2c0      	uxtb	r0, r0
     4b8:	7899      	ldrb	r1, [r3, #2]
     4ba:	b2c9      	uxtb	r1, r1
     4bc:	78da      	ldrb	r2, [r3, #3]
     4be:	b2d2      	uxtb	r2, r2
     4c0:	791b      	ldrb	r3, [r3, #4]
     4c2:	b2db      	uxtb	r3, r3
     4c4:	4c4b      	ldr	r4, [pc, #300]	; (5f4 <STACK_SIZE+0x1f4>)
     4c6:	47a0      	blx	r4
     4c8:	e10d      	b.n	6e6 <STACK_SIZE+0x2e6>
				}
				
				break;
				
			case 'L':
				serial_timeout_count = 0;
     4ca:	2300      	movs	r3, #0
     4cc:	4a3d      	ldr	r2, [pc, #244]	; (5c4 <STACK_SIZE+0x1c4>)
     4ce:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     4d0:	4c3d      	ldr	r4, [pc, #244]	; (5c8 <STACK_SIZE+0x1c8>)
     4d2:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(LEDS_SET_LEN,received_value);
     4d4:	a909      	add	r1, sp, #36	; 0x24
     4d6:	2002      	movs	r0, #2
     4d8:	4b3c      	ldr	r3, [pc, #240]	; (5cc <STACK_SIZE+0x1cc>)
     4da:	4798      	blx	r3
				if(serial_timeout == false)
     4dc:	7823      	ldrb	r3, [r4, #0]
     4de:	2b00      	cmp	r3, #0
     4e0:	d000      	beq.n	4e4 <STACK_SIZE+0xe4>
     4e2:	e100      	b.n	6e6 <STACK_SIZE+0x2e6>
				{
					update_LEDS_single(received_value[1],received_value[2]);
     4e4:	ab09      	add	r3, sp, #36	; 0x24
     4e6:	7858      	ldrb	r0, [r3, #1]
     4e8:	b2c0      	uxtb	r0, r0
     4ea:	7899      	ldrb	r1, [r3, #2]
     4ec:	b2c9      	uxtb	r1, r1
     4ee:	4b42      	ldr	r3, [pc, #264]	; (5f8 <STACK_SIZE+0x1f8>)
     4f0:	4798      	blx	r3
     4f2:	e0f8      	b.n	6e6 <STACK_SIZE+0x2e6>
				}
				break;
				
				
			case 'S':
				serial_timeout_count = 0;
     4f4:	2300      	movs	r3, #0
     4f6:	4a33      	ldr	r2, [pc, #204]	; (5c4 <STACK_SIZE+0x1c4>)
     4f8:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     4fa:	4c33      	ldr	r4, [pc, #204]	; (5c8 <STACK_SIZE+0x1c8>)
     4fc:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(SUPER_SERVO_SET_LEN,received_value);
     4fe:	a909      	add	r1, sp, #36	; 0x24
     500:	2002      	movs	r0, #2
     502:	4b32      	ldr	r3, [pc, #200]	; (5cc <STACK_SIZE+0x1cc>)
     504:	4798      	blx	r3
				if(serial_timeout == false)
     506:	7823      	ldrb	r3, [r4, #0]
     508:	2b00      	cmp	r3, #0
     50a:	d000      	beq.n	50e <STACK_SIZE+0x10e>
     50c:	e0eb      	b.n	6e6 <STACK_SIZE+0x2e6>
				{
					update_super_servo_single(received_value[1],received_value[2]);
     50e:	ab09      	add	r3, sp, #36	; 0x24
     510:	7858      	ldrb	r0, [r3, #1]
     512:	b2c0      	uxtb	r0, r0
     514:	7899      	ldrb	r1, [r3, #2]
     516:	b2c9      	uxtb	r1, r1
     518:	4b38      	ldr	r3, [pc, #224]	; (5fc <STACK_SIZE+0x1fc>)
     51a:	4798      	blx	r3
     51c:	e0e3      	b.n	6e6 <STACK_SIZE+0x2e6>
				}
				break;
				
			case 's':
				serial_timeout_count = 0;
     51e:	2400      	movs	r4, #0
     520:	4b28      	ldr	r3, [pc, #160]	; (5c4 <STACK_SIZE+0x1c4>)
     522:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
     524:	4d28      	ldr	r5, [pc, #160]	; (5c8 <STACK_SIZE+0x1c8>)
     526:	702c      	strb	r4, [r5, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
     528:	a909      	add	r1, sp, #36	; 0x24
     52a:	2001      	movs	r0, #1
     52c:	4b27      	ldr	r3, [pc, #156]	; (5cc <STACK_SIZE+0x1cc>)
     52e:	4798      	blx	r3
				volatile uint8_t temp = 0 ;
     530:	230b      	movs	r3, #11
     532:	446b      	add	r3, sp
     534:	701c      	strb	r4, [r3, #0]
				if(serial_timeout == false)
     536:	782b      	ldrb	r3, [r5, #0]
     538:	2b00      	cmp	r3, #0
     53a:	d000      	beq.n	53e <STACK_SIZE+0x13e>
     53c:	e0d3      	b.n	6e6 <STACK_SIZE+0x2e6>
				{
					switch(received_value[1])
     53e:	ab09      	add	r3, sp, #36	; 0x24
     540:	785b      	ldrb	r3, [r3, #1]
     542:	b2db      	uxtb	r3, r3
     544:	2b32      	cmp	r3, #50	; 0x32
     546:	d01a      	beq.n	57e <STACK_SIZE+0x17e>
     548:	d90d      	bls.n	566 <STACK_SIZE+0x166>
     54a:	2b33      	cmp	r3, #51	; 0x33
     54c:	d021      	beq.n	592 <STACK_SIZE+0x192>
     54e:	2b34      	cmp	r3, #52	; 0x34
     550:	d129      	bne.n	5a6 <STACK_SIZE+0x1a6>
							transmit_value[0] = read_sensor(SENSOR_NO_3);
							usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
							break;
							
						case '4':
							transmit_value[0] = read_sensor(SENSOR_NO_4);
     552:	2003      	movs	r0, #3
     554:	4b22      	ldr	r3, [pc, #136]	; (5e0 <STACK_SIZE+0x1e0>)
     556:	4798      	blx	r3
     558:	a904      	add	r1, sp, #16
     55a:	7008      	strb	r0, [r1, #0]
							usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     55c:	2201      	movs	r2, #1
     55e:	4821      	ldr	r0, [pc, #132]	; (5e4 <STACK_SIZE+0x1e4>)
     560:	4b21      	ldr	r3, [pc, #132]	; (5e8 <STACK_SIZE+0x1e8>)
     562:	4798      	blx	r3
							break;
     564:	e0bf      	b.n	6e6 <STACK_SIZE+0x2e6>
					switch(received_value[1])
     566:	2b31      	cmp	r3, #49	; 0x31
     568:	d11d      	bne.n	5a6 <STACK_SIZE+0x1a6>
							transmit_value[0] = read_sensor(SENSOR_NO_1);
     56a:	2000      	movs	r0, #0
     56c:	4b1c      	ldr	r3, [pc, #112]	; (5e0 <STACK_SIZE+0x1e0>)
     56e:	4798      	blx	r3
     570:	a904      	add	r1, sp, #16
     572:	7008      	strb	r0, [r1, #0]
							usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     574:	2201      	movs	r2, #1
     576:	481b      	ldr	r0, [pc, #108]	; (5e4 <STACK_SIZE+0x1e4>)
     578:	4b1b      	ldr	r3, [pc, #108]	; (5e8 <STACK_SIZE+0x1e8>)
     57a:	4798      	blx	r3
							break;
     57c:	e0b3      	b.n	6e6 <STACK_SIZE+0x2e6>
							transmit_value[0] = read_sensor(SENSOR_NO_2);
     57e:	2001      	movs	r0, #1
     580:	4b17      	ldr	r3, [pc, #92]	; (5e0 <STACK_SIZE+0x1e0>)
     582:	4798      	blx	r3
     584:	a904      	add	r1, sp, #16
     586:	7008      	strb	r0, [r1, #0]
							usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     588:	2201      	movs	r2, #1
     58a:	4816      	ldr	r0, [pc, #88]	; (5e4 <STACK_SIZE+0x1e4>)
     58c:	4b16      	ldr	r3, [pc, #88]	; (5e8 <STACK_SIZE+0x1e8>)
     58e:	4798      	blx	r3
							break;
     590:	e0a9      	b.n	6e6 <STACK_SIZE+0x2e6>
							transmit_value[0] = read_sensor(SENSOR_NO_3);
     592:	2002      	movs	r0, #2
     594:	4b12      	ldr	r3, [pc, #72]	; (5e0 <STACK_SIZE+0x1e0>)
     596:	4798      	blx	r3
     598:	a904      	add	r1, sp, #16
     59a:	7008      	strb	r0, [r1, #0]
							usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     59c:	2201      	movs	r2, #1
     59e:	4811      	ldr	r0, [pc, #68]	; (5e4 <STACK_SIZE+0x1e4>)
     5a0:	4b11      	ldr	r3, [pc, #68]	; (5e8 <STACK_SIZE+0x1e8>)
     5a2:	4798      	blx	r3
							break;
     5a4:	e09f      	b.n	6e6 <STACK_SIZE+0x2e6>
							
						default:
						
							head_ring_buffer = 0;
     5a6:	2300      	movs	r3, #0
     5a8:	4a02      	ldr	r2, [pc, #8]	; (5b4 <STACK_SIZE+0x1b4>)
     5aa:	7013      	strb	r3, [r2, #0]
							tail_ring_buffer = 0;
     5ac:	4a02      	ldr	r2, [pc, #8]	; (5b8 <STACK_SIZE+0x1b8>)
     5ae:	7013      	strb	r3, [r2, #0]
							break;
     5b0:	e099      	b.n	6e6 <STACK_SIZE+0x2e6>
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	200000f1 	.word	0x200000f1
     5b8:	200000f5 	.word	0x200000f5
     5bc:	20000270 	.word	0x20000270
     5c0:	00003ca4 	.word	0x00003ca4
     5c4:	200000f4 	.word	0x200000f4
     5c8:	200000f3 	.word	0x200000f3
     5cc:	00000249 	.word	0x00000249
     5d0:	20000094 	.word	0x20000094
     5d4:	00001169 	.word	0x00001169
     5d8:	00001491 	.word	0x00001491
     5dc:	00001075 	.word	0x00001075
     5e0:	00001245 	.word	0x00001245
     5e4:	20000100 	.word	0x20000100
     5e8:	000022e9 	.word	0x000022e9
     5ec:	200000f0 	.word	0x200000f0
     5f0:	20000090 	.word	0x20000090
     5f4:	000011b5 	.word	0x000011b5
     5f8:	000010d1 	.word	0x000010d1
     5fc:	00001591 	.word	0x00001591
					
					}
				}
				break;
			case 't':
				serial_timeout_count = 0;
     600:	2300      	movs	r3, #0
     602:	4a57      	ldr	r2, [pc, #348]	; (760 <STACK_SIZE+0x360>)
     604:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
     606:	4c57      	ldr	r4, [pc, #348]	; (764 <STACK_SIZE+0x364>)
     608:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
     60a:	a909      	add	r1, sp, #36	; 0x24
     60c:	2001      	movs	r0, #1
     60e:	4b56      	ldr	r3, [pc, #344]	; (768 <STACK_SIZE+0x368>)
     610:	4798      	blx	r3
				delay_cycles_ms(MC_UART_DELAY);
     612:	2006      	movs	r0, #6
     614:	4b55      	ldr	r3, [pc, #340]	; (76c <STACK_SIZE+0x36c>)
     616:	4798      	blx	r3
				
				if(serial_timeout == false)
     618:	7823      	ldrb	r3, [r4, #0]
     61a:	2b00      	cmp	r3, #0
     61c:	d163      	bne.n	6e6 <STACK_SIZE+0x2e6>
				{
					switch(received_value[1])
     61e:	ab09      	add	r3, sp, #36	; 0x24
     620:	785b      	ldrb	r3, [r3, #1]
     622:	b2db      	uxtb	r3, r3
     624:	2b32      	cmp	r3, #50	; 0x32
     626:	d01a      	beq.n	65e <STACK_SIZE+0x25e>
     628:	d90d      	bls.n	646 <STACK_SIZE+0x246>
     62a:	2b33      	cmp	r3, #51	; 0x33
     62c:	d021      	beq.n	672 <STACK_SIZE+0x272>
     62e:	2b34      	cmp	r3, #52	; 0x34
     630:	d129      	bne.n	686 <STACK_SIZE+0x286>
						transmit_value[0] = read_sensor(SENSOR_NO_3);
						usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
						break;
					
						case '4':
						transmit_value[0] = read_sensor(SENSOR_NO_4);
     632:	2003      	movs	r0, #3
     634:	4b4e      	ldr	r3, [pc, #312]	; (770 <STACK_SIZE+0x370>)
     636:	4798      	blx	r3
     638:	a904      	add	r1, sp, #16
     63a:	7008      	strb	r0, [r1, #0]
						usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     63c:	2201      	movs	r2, #1
     63e:	484d      	ldr	r0, [pc, #308]	; (774 <STACK_SIZE+0x374>)
     640:	4b4d      	ldr	r3, [pc, #308]	; (778 <STACK_SIZE+0x378>)
     642:	4798      	blx	r3
						break;
     644:	e04f      	b.n	6e6 <STACK_SIZE+0x2e6>
					switch(received_value[1])
     646:	2b31      	cmp	r3, #49	; 0x31
     648:	d11d      	bne.n	686 <STACK_SIZE+0x286>
						transmit_value[0] = read_sensor(SENSOR_NO_1);
     64a:	2000      	movs	r0, #0
     64c:	4b48      	ldr	r3, [pc, #288]	; (770 <STACK_SIZE+0x370>)
     64e:	4798      	blx	r3
     650:	a904      	add	r1, sp, #16
     652:	7008      	strb	r0, [r1, #0]
						usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     654:	2201      	movs	r2, #1
     656:	4847      	ldr	r0, [pc, #284]	; (774 <STACK_SIZE+0x374>)
     658:	4b47      	ldr	r3, [pc, #284]	; (778 <STACK_SIZE+0x378>)
     65a:	4798      	blx	r3
						break;
     65c:	e043      	b.n	6e6 <STACK_SIZE+0x2e6>
						transmit_value[0] = read_sensor(SENSOR_NO_2);
     65e:	2001      	movs	r0, #1
     660:	4b43      	ldr	r3, [pc, #268]	; (770 <STACK_SIZE+0x370>)
     662:	4798      	blx	r3
     664:	a904      	add	r1, sp, #16
     666:	7008      	strb	r0, [r1, #0]
						usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     668:	2201      	movs	r2, #1
     66a:	4842      	ldr	r0, [pc, #264]	; (774 <STACK_SIZE+0x374>)
     66c:	4b42      	ldr	r3, [pc, #264]	; (778 <STACK_SIZE+0x378>)
     66e:	4798      	blx	r3
						break;
     670:	e039      	b.n	6e6 <STACK_SIZE+0x2e6>
						transmit_value[0] = read_sensor(SENSOR_NO_3);
     672:	2002      	movs	r0, #2
     674:	4b3e      	ldr	r3, [pc, #248]	; (770 <STACK_SIZE+0x370>)
     676:	4798      	blx	r3
     678:	a904      	add	r1, sp, #16
     67a:	7008      	strb	r0, [r1, #0]
						usart_write_buffer_wait(&usart_instance, transmit_value ,SENSORS_SET_LEN);
     67c:	2201      	movs	r2, #1
     67e:	483d      	ldr	r0, [pc, #244]	; (774 <STACK_SIZE+0x374>)
     680:	4b3d      	ldr	r3, [pc, #244]	; (778 <STACK_SIZE+0x378>)
     682:	4798      	blx	r3
						break;
     684:	e02f      	b.n	6e6 <STACK_SIZE+0x2e6>
					
						default:
					
						head_ring_buffer = 0;
     686:	2300      	movs	r3, #0
     688:	4a3c      	ldr	r2, [pc, #240]	; (77c <STACK_SIZE+0x37c>)
     68a:	7013      	strb	r3, [r2, #0]
						tail_ring_buffer = 0;
     68c:	4a3c      	ldr	r2, [pc, #240]	; (780 <STACK_SIZE+0x380>)
     68e:	7013      	strb	r3, [r2, #0]
						break;
     690:	e029      	b.n	6e6 <STACK_SIZE+0x2e6>
					}
				}
			break;
				
			case 'R':
				serial_timeout_count = 0;
     692:	2400      	movs	r4, #0
     694:	4b32      	ldr	r3, [pc, #200]	; (760 <STACK_SIZE+0x360>)
     696:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
     698:	4b32      	ldr	r3, [pc, #200]	; (764 <STACK_SIZE+0x364>)
     69a:	701c      	strb	r4, [r3, #0]
				switch_off_LEDS();
     69c:	4b39      	ldr	r3, [pc, #228]	; (784 <STACK_SIZE+0x384>)
     69e:	4798      	blx	r3
				switch_off_ORB();
     6a0:	4b39      	ldr	r3, [pc, #228]	; (788 <STACK_SIZE+0x388>)
     6a2:	4798      	blx	r3
				//Previous received values updated
				for(i=0;i<6;i++)
				{
					prev_rec_value[i] = 0;
     6a4:	4b39      	ldr	r3, [pc, #228]	; (78c <STACK_SIZE+0x38c>)
     6a6:	701c      	strb	r4, [r3, #0]
     6a8:	705c      	strb	r4, [r3, #1]
     6aa:	709c      	strb	r4, [r3, #2]
     6ac:	70dc      	strb	r4, [r3, #3]
     6ae:	711c      	strb	r4, [r3, #4]
     6b0:	715c      	strb	r4, [r3, #5]
				}
				for(i=11;i<15;i++)
				{
					prev_rec_value[i] =0;
     6b2:	72dc      	strb	r4, [r3, #11]
     6b4:	731c      	strb	r4, [r3, #12]
     6b6:	735c      	strb	r4, [r3, #13]
     6b8:	739c      	strb	r4, [r3, #14]
				}
				broadcast = false;
     6ba:	4b35      	ldr	r3, [pc, #212]	; (790 <STACK_SIZE+0x390>)
     6bc:	701c      	strb	r4, [r3, #0]
				
			case 'x':
				serial_timeout_count = 0;
     6be:	2400      	movs	r4, #0
     6c0:	4b27      	ldr	r3, [pc, #156]	; (760 <STACK_SIZE+0x360>)
     6c2:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
     6c4:	4b27      	ldr	r3, [pc, #156]	; (764 <STACK_SIZE+0x364>)
     6c6:	701c      	strb	r4, [r3, #0]
				switch_off_LEDS();
     6c8:	4b2e      	ldr	r3, [pc, #184]	; (784 <STACK_SIZE+0x384>)
     6ca:	4798      	blx	r3
				switch_off_ORB();
     6cc:	4b2e      	ldr	r3, [pc, #184]	; (788 <STACK_SIZE+0x388>)
     6ce:	4798      	blx	r3
				for(i=0;i<6;i++)
				{
					prev_rec_value[i] = 0;
     6d0:	4b2e      	ldr	r3, [pc, #184]	; (78c <STACK_SIZE+0x38c>)
     6d2:	701c      	strb	r4, [r3, #0]
     6d4:	705c      	strb	r4, [r3, #1]
     6d6:	709c      	strb	r4, [r3, #2]
     6d8:	70dc      	strb	r4, [r3, #3]
     6da:	711c      	strb	r4, [r3, #4]
     6dc:	715c      	strb	r4, [r3, #5]
				}
				for(i=11;i<15;i++)
				{
					prev_rec_value[i] =0;
     6de:	72dc      	strb	r4, [r3, #11]
     6e0:	731c      	strb	r4, [r3, #12]
     6e2:	735c      	strb	r4, [r3, #13]
     6e4:	739c      	strb	r4, [r3, #14]
				head_ring_buffer = 0;
				tail_ring_buffer = 0;
				break;
		}
		
		if((head_ring_buffer == tail_ring_buffer) || (head_ring_buffer > MAX_LIMIT_RING_BUFFER) || (tail_ring_buffer > MAX_LIMIT_RING_BUFFER) || (serial_timeout == true))
     6e6:	4b25      	ldr	r3, [pc, #148]	; (77c <STACK_SIZE+0x37c>)
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	4a25      	ldr	r2, [pc, #148]	; (780 <STACK_SIZE+0x380>)
     6ec:	7812      	ldrb	r2, [r2, #0]
     6ee:	b2db      	uxtb	r3, r3
     6f0:	4293      	cmp	r3, r2
     6f2:	d007      	beq.n	704 <STACK_SIZE+0x304>
     6f4:	4b21      	ldr	r3, [pc, #132]	; (77c <STACK_SIZE+0x37c>)
     6f6:	781b      	ldrb	r3, [r3, #0]
     6f8:	4b21      	ldr	r3, [pc, #132]	; (780 <STACK_SIZE+0x380>)
     6fa:	781b      	ldrb	r3, [r3, #0]
     6fc:	4b19      	ldr	r3, [pc, #100]	; (764 <STACK_SIZE+0x364>)
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	2b00      	cmp	r3, #0
     702:	d004      	beq.n	70e <STACK_SIZE+0x30e>
		{
			head_ring_buffer = 0;
     704:	2300      	movs	r3, #0
     706:	4a1d      	ldr	r2, [pc, #116]	; (77c <STACK_SIZE+0x37c>)
     708:	7013      	strb	r3, [r2, #0]
			tail_ring_buffer = 0;
     70a:	4a1d      	ldr	r2, [pc, #116]	; (780 <STACK_SIZE+0x380>)
     70c:	7013      	strb	r3, [r2, #0]
		}
	 }		//received_data_updated = false;	
	
	 if(broadcast == true)
     70e:	4b20      	ldr	r3, [pc, #128]	; (790 <STACK_SIZE+0x390>)
     710:	781b      	ldrb	r3, [r3, #0]
     712:	2b00      	cmp	r3, #0
     714:	d004      	beq.n	720 <STACK_SIZE+0x320>
	 {
		if(count_broadcast > MAX_COUNT_BROADCAST)
     716:	4b1f      	ldr	r3, [pc, #124]	; (794 <STACK_SIZE+0x394>)
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	b2db      	uxtb	r3, r3
     71c:	2b02      	cmp	r3, #2
     71e:	d807      	bhi.n	730 <STACK_SIZE+0x330>
			transmit_value[2] = read_sensor(SENSOR_NO_3);
			transmit_value[3] = read_sensor(SENSOR_NO_4);
			usart_write_buffer_wait(&usart_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
		}
	 }	 
     720:	b00f      	add	sp, #60	; 0x3c
     722:	bd30      	pop	{r4, r5, pc}
				head_ring_buffer = 0;
     724:	2300      	movs	r3, #0
     726:	4a15      	ldr	r2, [pc, #84]	; (77c <STACK_SIZE+0x37c>)
     728:	7013      	strb	r3, [r2, #0]
				tail_ring_buffer = 0;
     72a:	4a15      	ldr	r2, [pc, #84]	; (780 <STACK_SIZE+0x380>)
     72c:	7013      	strb	r3, [r2, #0]
				break;
     72e:	e7da      	b.n	6e6 <STACK_SIZE+0x2e6>
			count_broadcast = 0;
     730:	2200      	movs	r2, #0
     732:	4b18      	ldr	r3, [pc, #96]	; (794 <STACK_SIZE+0x394>)
     734:	701a      	strb	r2, [r3, #0]
			transmit_value[0] = read_sensor(SENSOR_NO_1);
     736:	2000      	movs	r0, #0
     738:	4d0d      	ldr	r5, [pc, #52]	; (770 <STACK_SIZE+0x370>)
     73a:	47a8      	blx	r5
     73c:	ac04      	add	r4, sp, #16
     73e:	7020      	strb	r0, [r4, #0]
			transmit_value[1] = read_sensor(SENSOR_NO_2);
     740:	2001      	movs	r0, #1
     742:	47a8      	blx	r5
     744:	7060      	strb	r0, [r4, #1]
			transmit_value[2] = read_sensor(SENSOR_NO_3);
     746:	2002      	movs	r0, #2
     748:	47a8      	blx	r5
     74a:	70a0      	strb	r0, [r4, #2]
			transmit_value[3] = read_sensor(SENSOR_NO_4);
     74c:	2003      	movs	r0, #3
     74e:	47a8      	blx	r5
     750:	70e0      	strb	r0, [r4, #3]
			usart_write_buffer_wait(&usart_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
     752:	2204      	movs	r2, #4
     754:	0021      	movs	r1, r4
     756:	4807      	ldr	r0, [pc, #28]	; (774 <STACK_SIZE+0x374>)
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <STACK_SIZE+0x378>)
     75a:	4798      	blx	r3
     75c:	e7e0      	b.n	720 <STACK_SIZE+0x320>
     75e:	46c0      	nop			; (mov r8, r8)
     760:	200000f4 	.word	0x200000f4
     764:	200000f3 	.word	0x200000f3
     768:	00000249 	.word	0x00000249
     76c:	000007d9 	.word	0x000007d9
     770:	00001245 	.word	0x00001245
     774:	20000100 	.word	0x20000100
     778:	000022e9 	.word	0x000022e9
     77c:	200000f1 	.word	0x200000f1
     780:	200000f5 	.word	0x200000f5
     784:	00001131 	.word	0x00001131
     788:	00001209 	.word	0x00001209
     78c:	20000094 	.word	0x20000094
     790:	20000090 	.word	0x20000090
     794:	200000f0 	.word	0x200000f0

00000798 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     798:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     79a:	2000      	movs	r0, #0
     79c:	4b08      	ldr	r3, [pc, #32]	; (7c0 <delay_init+0x28>)
     79e:	4798      	blx	r3
     7a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7a2:	4c08      	ldr	r4, [pc, #32]	; (7c4 <delay_init+0x2c>)
     7a4:	21fa      	movs	r1, #250	; 0xfa
     7a6:	0089      	lsls	r1, r1, #2
     7a8:	47a0      	blx	r4
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <delay_init+0x30>)
     7ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7ae:	4907      	ldr	r1, [pc, #28]	; (7cc <delay_init+0x34>)
     7b0:	0028      	movs	r0, r5
     7b2:	47a0      	blx	r4
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <delay_init+0x38>)
     7b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7b8:	2205      	movs	r2, #5
     7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <delay_init+0x3c>)
     7bc:	601a      	str	r2, [r3, #0]
}
     7be:	bd70      	pop	{r4, r5, r6, pc}
     7c0:	00003401 	.word	0x00003401
     7c4:	00003811 	.word	0x00003811
     7c8:	20000000 	.word	0x20000000
     7cc:	000f4240 	.word	0x000f4240
     7d0:	20000004 	.word	0x20000004
     7d4:	e000e010 	.word	0xe000e010

000007d8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     7d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     7da:	4b08      	ldr	r3, [pc, #32]	; (7fc <delay_cycles_ms+0x24>)
     7dc:	681c      	ldr	r4, [r3, #0]
static inline void delay_cycles(
		const uint32_t n)

{
	if (n > 0) {
		SysTick->LOAD = n;
     7de:	4a08      	ldr	r2, [pc, #32]	; (800 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     7e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7e2:	2180      	movs	r1, #128	; 0x80
     7e4:	0249      	lsls	r1, r1, #9
	while (n--) {
     7e6:	3801      	subs	r0, #1
     7e8:	d307      	bcc.n	7fa <delay_cycles_ms+0x22>
	if (n > 0) {
     7ea:	2c00      	cmp	r4, #0
     7ec:	d0fb      	beq.n	7e6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     7ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     7f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7f2:	6813      	ldr	r3, [r2, #0]
     7f4:	420b      	tst	r3, r1
     7f6:	d0fc      	beq.n	7f2 <delay_cycles_ms+0x1a>
     7f8:	e7f5      	b.n	7e6 <delay_cycles_ms+0xe>
	}
}
     7fa:	bd30      	pop	{r4, r5, pc}
     7fc:	20000000 	.word	0x20000000
     800:	e000e010 	.word	0xe000e010

00000804 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     804:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     806:	2200      	movs	r2, #0
     808:	2300      	movs	r3, #0
     80a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     80c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     80e:	2100      	movs	r1, #0
     810:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     812:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     814:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     816:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     818:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     81a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     81c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     81e:	24c0      	movs	r4, #192	; 0xc0
     820:	0164      	lsls	r4, r4, #5
     822:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     824:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     826:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     828:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     82a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     82c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     82e:	242a      	movs	r4, #42	; 0x2a
     830:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     832:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     834:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     836:	3c06      	subs	r4, #6
     838:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     83a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     83c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     83e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     840:	232b      	movs	r3, #43	; 0x2b
     842:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     844:	3301      	adds	r3, #1
     846:	54c1      	strb	r1, [r0, r3]
}
     848:	bd10      	pop	{r4, pc}
	...

0000084c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	46d6      	mov	lr, sl
     850:	464f      	mov	r7, r9
     852:	4646      	mov	r6, r8
     854:	b5c0      	push	{r6, r7, lr}
     856:	b096      	sub	sp, #88	; 0x58
     858:	0007      	movs	r7, r0
     85a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     85c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     85e:	4ac6      	ldr	r2, [pc, #792]	; (b78 <adc_init+0x32c>)
     860:	6a10      	ldr	r0, [r2, #32]
     862:	2380      	movs	r3, #128	; 0x80
     864:	005b      	lsls	r3, r3, #1
     866:	4303      	orrs	r3, r0
     868:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     86a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     86c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     86e:	07db      	lsls	r3, r3, #31
     870:	d505      	bpl.n	87e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     872:	b016      	add	sp, #88	; 0x58
     874:	bc1c      	pop	{r2, r3, r4}
     876:	4690      	mov	r8, r2
     878:	4699      	mov	r9, r3
     87a:	46a2      	mov	sl, r4
     87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     87e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     880:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     882:	079b      	lsls	r3, r3, #30
     884:	d4f5      	bmi.n	872 <adc_init+0x26>
	module_inst->reference = config->reference;
     886:	7873      	ldrb	r3, [r6, #1]
     888:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     88a:	2b00      	cmp	r3, #0
     88c:	d104      	bne.n	898 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     88e:	4abb      	ldr	r2, [pc, #748]	; (b7c <adc_init+0x330>)
     890:	6c13      	ldr	r3, [r2, #64]	; 0x40
     892:	2104      	movs	r1, #4
     894:	430b      	orrs	r3, r1
     896:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     898:	2300      	movs	r3, #0
     89a:	60bb      	str	r3, [r7, #8]
     89c:	60fb      	str	r3, [r7, #12]
     89e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     8a0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     8a2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     8a4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     8a6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     8a8:	4bb5      	ldr	r3, [pc, #724]	; (b80 <adc_init+0x334>)
     8aa:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     8ac:	232a      	movs	r3, #42	; 0x2a
     8ae:	5cf3      	ldrb	r3, [r6, r3]
     8b0:	2b00      	cmp	r3, #0
     8b2:	d105      	bne.n	8c0 <adc_init+0x74>
     8b4:	7d33      	ldrb	r3, [r6, #20]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d102      	bne.n	8c0 <adc_init+0x74>
		module_inst->software_trigger = true;
     8ba:	3301      	adds	r3, #1
     8bc:	777b      	strb	r3, [r7, #29]
     8be:	e001      	b.n	8c4 <adc_init+0x78>
		module_inst->software_trigger = false;
     8c0:	2300      	movs	r3, #0
     8c2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     8c4:	683b      	ldr	r3, [r7, #0]
     8c6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     8c8:	7833      	ldrb	r3, [r6, #0]
     8ca:	466a      	mov	r2, sp
     8cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     8ce:	4669      	mov	r1, sp
     8d0:	2013      	movs	r0, #19
     8d2:	4bac      	ldr	r3, [pc, #688]	; (b84 <adc_init+0x338>)
     8d4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     8d6:	2013      	movs	r0, #19
     8d8:	4bab      	ldr	r3, [pc, #684]	; (b88 <adc_init+0x33c>)
     8da:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     8dc:	232c      	movs	r3, #44	; 0x2c
     8de:	5cf2      	ldrb	r2, [r6, r3]
     8e0:	2a00      	cmp	r2, #0
     8e2:	d054      	beq.n	98e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     8e4:	3b01      	subs	r3, #1
     8e6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     8e8:	7b33      	ldrb	r3, [r6, #12]
     8ea:	18eb      	adds	r3, r5, r3
     8ec:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     8ee:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     8f0:	b2c9      	uxtb	r1, r1
     8f2:	428b      	cmp	r3, r1
     8f4:	d221      	bcs.n	93a <adc_init+0xee>
     8f6:	1952      	adds	r2, r2, r5
     8f8:	b2d3      	uxtb	r3, r2
     8fa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     8fc:	4ba3      	ldr	r3, [pc, #652]	; (b8c <adc_init+0x340>)
     8fe:	469a      	mov	sl, r3
     900:	e003      	b.n	90a <adc_init+0xbe>
			offset++;
     902:	3501      	adds	r5, #1
     904:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     906:	454d      	cmp	r5, r9
     908:	d017      	beq.n	93a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     90a:	240f      	movs	r4, #15
     90c:	402c      	ands	r4, r5
     90e:	7b33      	ldrb	r3, [r6, #12]
     910:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     912:	2250      	movs	r2, #80	; 0x50
     914:	499e      	ldr	r1, [pc, #632]	; (b90 <adc_init+0x344>)
     916:	a802      	add	r0, sp, #8
     918:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     91a:	2c09      	cmp	r4, #9
     91c:	d8f1      	bhi.n	902 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     91e:	00a4      	lsls	r4, r4, #2
     920:	ab02      	add	r3, sp, #8
     922:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     924:	a901      	add	r1, sp, #4
     926:	2300      	movs	r3, #0
     928:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     92a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     92c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     92e:	3301      	adds	r3, #1
     930:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     932:	b2c0      	uxtb	r0, r0
     934:	4b97      	ldr	r3, [pc, #604]	; (b94 <adc_init+0x348>)
     936:	4798      	blx	r3
     938:	e7e3      	b.n	902 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     93a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     93c:	2250      	movs	r2, #80	; 0x50
     93e:	4994      	ldr	r1, [pc, #592]	; (b90 <adc_init+0x344>)
     940:	a802      	add	r0, sp, #8
     942:	4b92      	ldr	r3, [pc, #584]	; (b8c <adc_init+0x340>)
     944:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     946:	2c09      	cmp	r4, #9
     948:	d913      	bls.n	972 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     94a:	7d73      	ldrb	r3, [r6, #21]
     94c:	009b      	lsls	r3, r3, #2
     94e:	b2db      	uxtb	r3, r3
     950:	4642      	mov	r2, r8
     952:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     954:	7db3      	ldrb	r3, [r6, #22]
     956:	01db      	lsls	r3, r3, #7
     958:	7872      	ldrb	r2, [r6, #1]
     95a:	4313      	orrs	r3, r2
     95c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     95e:	4642      	mov	r2, r8
     960:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     962:	7933      	ldrb	r3, [r6, #4]
     964:	2b34      	cmp	r3, #52	; 0x34
     966:	d900      	bls.n	96a <adc_init+0x11e>
     968:	e17b      	b.n	c62 <adc_init+0x416>
     96a:	009b      	lsls	r3, r3, #2
     96c:	4a8a      	ldr	r2, [pc, #552]	; (b98 <adc_init+0x34c>)
     96e:	58d3      	ldr	r3, [r2, r3]
     970:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     972:	00a4      	lsls	r4, r4, #2
     974:	ab02      	add	r3, sp, #8
     976:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     978:	a901      	add	r1, sp, #4
     97a:	2300      	movs	r3, #0
     97c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     97e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     980:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     982:	3301      	adds	r3, #1
     984:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     986:	b2c0      	uxtb	r0, r0
     988:	4b82      	ldr	r3, [pc, #520]	; (b94 <adc_init+0x348>)
     98a:	4798      	blx	r3
     98c:	e7dd      	b.n	94a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     98e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     990:	2250      	movs	r2, #80	; 0x50
     992:	497f      	ldr	r1, [pc, #508]	; (b90 <adc_init+0x344>)
     994:	a802      	add	r0, sp, #8
     996:	4b7d      	ldr	r3, [pc, #500]	; (b8c <adc_init+0x340>)
     998:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     99a:	2c09      	cmp	r4, #9
     99c:	d915      	bls.n	9ca <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     99e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     9a0:	2250      	movs	r2, #80	; 0x50
     9a2:	497b      	ldr	r1, [pc, #492]	; (b90 <adc_init+0x344>)
     9a4:	a802      	add	r0, sp, #8
     9a6:	4b79      	ldr	r3, [pc, #484]	; (b8c <adc_init+0x340>)
     9a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     9aa:	2c09      	cmp	r4, #9
     9ac:	d8cd      	bhi.n	94a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9ae:	00a4      	lsls	r4, r4, #2
     9b0:	ab02      	add	r3, sp, #8
     9b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9b4:	a901      	add	r1, sp, #4
     9b6:	2300      	movs	r3, #0
     9b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     9ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     9bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     9be:	3301      	adds	r3, #1
     9c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     9c2:	b2c0      	uxtb	r0, r0
     9c4:	4b73      	ldr	r3, [pc, #460]	; (b94 <adc_init+0x348>)
     9c6:	4798      	blx	r3
     9c8:	e7bf      	b.n	94a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9ca:	00a4      	lsls	r4, r4, #2
     9cc:	ab02      	add	r3, sp, #8
     9ce:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9d0:	a901      	add	r1, sp, #4
     9d2:	2300      	movs	r3, #0
     9d4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     9d6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     9d8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     9da:	3301      	adds	r3, #1
     9dc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     9de:	b2c0      	uxtb	r0, r0
     9e0:	4b6c      	ldr	r3, [pc, #432]	; (b94 <adc_init+0x348>)
     9e2:	4798      	blx	r3
     9e4:	e7db      	b.n	99e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     9e6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     9e8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     9ea:	2102      	movs	r1, #2
     9ec:	e01a      	b.n	a24 <adc_init+0x1d8>
		adjres = config->divide_result;
     9ee:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     9f0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     9f2:	2410      	movs	r4, #16
     9f4:	e016      	b.n	a24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     9f6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     9f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     9fa:	2101      	movs	r1, #1
     9fc:	e012      	b.n	a24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     9fe:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     a00:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     a02:	2100      	movs	r1, #0
     a04:	e00e      	b.n	a24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a06:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     a08:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     a0a:	2100      	movs	r1, #0
     a0c:	e00a      	b.n	a24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a0e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     a10:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     a12:	2100      	movs	r1, #0
     a14:	e006      	b.n	a24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a16:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     a18:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     a1a:	2100      	movs	r1, #0
     a1c:	e002      	b.n	a24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     a1e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     a20:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     a22:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     a24:	0109      	lsls	r1, r1, #4
     a26:	2270      	movs	r2, #112	; 0x70
     a28:	400a      	ands	r2, r1
     a2a:	4313      	orrs	r3, r2
     a2c:	4642      	mov	r2, r8
     a2e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     a30:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     a32:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     a34:	2b3f      	cmp	r3, #63	; 0x3f
     a36:	d900      	bls.n	a3a <adc_init+0x1ee>
     a38:	e71b      	b.n	872 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     a3a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     a3c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a3e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     a40:	b25b      	sxtb	r3, r3
     a42:	2b00      	cmp	r3, #0
     a44:	dbfb      	blt.n	a3e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     a46:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     a48:	8872      	ldrh	r2, [r6, #2]
     a4a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     a4c:	2224      	movs	r2, #36	; 0x24
     a4e:	5cb2      	ldrb	r2, [r6, r2]
     a50:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     a52:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     a54:	7d32      	ldrb	r2, [r6, #20]
     a56:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     a58:	4313      	orrs	r3, r2
     a5a:	7cb2      	ldrb	r2, [r6, #18]
     a5c:	0052      	lsls	r2, r2, #1
     a5e:	4313      	orrs	r3, r2
     a60:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     a62:	4642      	mov	r2, r8
     a64:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     a66:	7e33      	ldrb	r3, [r6, #24]
     a68:	2b00      	cmp	r3, #0
     a6a:	d020      	beq.n	aae <adc_init+0x262>
		switch (resolution) {
     a6c:	2c10      	cmp	r4, #16
     a6e:	d100      	bne.n	a72 <adc_init+0x226>
     a70:	e0d9      	b.n	c26 <adc_init+0x3da>
     a72:	d800      	bhi.n	a76 <adc_init+0x22a>
     a74:	e098      	b.n	ba8 <adc_init+0x35c>
     a76:	2c20      	cmp	r4, #32
     a78:	d100      	bne.n	a7c <adc_init+0x230>
     a7a:	e0b6      	b.n	bea <adc_init+0x39e>
     a7c:	2c30      	cmp	r4, #48	; 0x30
     a7e:	d116      	bne.n	aae <adc_init+0x262>
			if (config->differential_mode &&
     a80:	7cf2      	ldrb	r2, [r6, #19]
     a82:	2a00      	cmp	r2, #0
     a84:	d00a      	beq.n	a9c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     a86:	69f2      	ldr	r2, [r6, #28]
     a88:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     a8a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a8c:	2aff      	cmp	r2, #255	; 0xff
     a8e:	d900      	bls.n	a92 <adc_init+0x246>
     a90:	e6ef      	b.n	872 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     a92:	6a32      	ldr	r2, [r6, #32]
     a94:	3280      	adds	r2, #128	; 0x80
     a96:	2aff      	cmp	r2, #255	; 0xff
     a98:	d900      	bls.n	a9c <adc_init+0x250>
     a9a:	e6ea      	b.n	872 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     a9c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     a9e:	69f2      	ldr	r2, [r6, #28]
     aa0:	2aff      	cmp	r2, #255	; 0xff
     aa2:	dd00      	ble.n	aa6 <adc_init+0x25a>
     aa4:	e6e5      	b.n	872 <adc_init+0x26>
     aa6:	6a32      	ldr	r2, [r6, #32]
     aa8:	2aff      	cmp	r2, #255	; 0xff
     aaa:	dd00      	ble.n	aae <adc_init+0x262>
     aac:	e6e1      	b.n	872 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     aae:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ab0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     ab2:	b252      	sxtb	r2, r2
     ab4:	2a00      	cmp	r2, #0
     ab6:	dbfb      	blt.n	ab0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     ab8:	4642      	mov	r2, r8
     aba:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     abc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     abe:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     ac0:	b25b      	sxtb	r3, r3
     ac2:	2b00      	cmp	r3, #0
     ac4:	dbfb      	blt.n	abe <adc_init+0x272>
	adc_module->WINLT.reg =
     ac6:	8bb3      	ldrh	r3, [r6, #28]
     ac8:	4642      	mov	r2, r8
     aca:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     acc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ace:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     ad0:	b25b      	sxtb	r3, r3
     ad2:	2b00      	cmp	r3, #0
     ad4:	dbfb      	blt.n	ace <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ad6:	8c33      	ldrh	r3, [r6, #32]
     ad8:	4642      	mov	r2, r8
     ada:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     adc:	232c      	movs	r3, #44	; 0x2c
     ade:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     ae0:	2b00      	cmp	r3, #0
     ae2:	d005      	beq.n	af0 <adc_init+0x2a4>
		inputs_to_scan--;
     ae4:	3b01      	subs	r3, #1
     ae6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     ae8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     aea:	2b0f      	cmp	r3, #15
     aec:	d900      	bls.n	af0 <adc_init+0x2a4>
     aee:	e6c0      	b.n	872 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     af0:	222b      	movs	r2, #43	; 0x2b
     af2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     af4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     af6:	290f      	cmp	r1, #15
     af8:	d900      	bls.n	afc <adc_init+0x2b0>
     afa:	e6ba      	b.n	872 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     afc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     afe:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     b00:	b252      	sxtb	r2, r2
     b02:	2a00      	cmp	r2, #0
     b04:	dbfb      	blt.n	afe <adc_init+0x2b2>
			config->negative_input |
     b06:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     b08:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     b0a:	4302      	orrs	r2, r0
     b0c:	68b0      	ldr	r0, [r6, #8]
     b0e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     b10:	0509      	lsls	r1, r1, #20
			config->negative_input |
     b12:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b14:	041b      	lsls	r3, r3, #16
			config->negative_input |
     b16:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     b18:	4642      	mov	r2, r8
     b1a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     b1c:	232a      	movs	r3, #42	; 0x2a
     b1e:	5cf3      	ldrb	r3, [r6, r3]
     b20:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     b22:	230f      	movs	r3, #15
     b24:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     b26:	3315      	adds	r3, #21
     b28:	5cf3      	ldrb	r3, [r6, r3]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d012      	beq.n	b54 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b2e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     b30:	4a1a      	ldr	r2, [pc, #104]	; (b9c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     b32:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b34:	4293      	cmp	r3, r2
     b36:	d900      	bls.n	b3a <adc_init+0x2ee>
     b38:	e69b      	b.n	872 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     b3a:	4642      	mov	r2, r8
     b3c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     b3e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     b40:	2380      	movs	r3, #128	; 0x80
     b42:	011b      	lsls	r3, r3, #4
     b44:	18d3      	adds	r3, r2, r3
     b46:	4915      	ldr	r1, [pc, #84]	; (b9c <adc_init+0x350>)
     b48:	b29b      	uxth	r3, r3
     b4a:	428b      	cmp	r3, r1
     b4c:	d900      	bls.n	b50 <adc_init+0x304>
     b4e:	e690      	b.n	872 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     b50:	4643      	mov	r3, r8
     b52:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     b54:	4b12      	ldr	r3, [pc, #72]	; (ba0 <adc_init+0x354>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	015b      	lsls	r3, r3, #5
     b5a:	22e0      	movs	r2, #224	; 0xe0
     b5c:	00d2      	lsls	r2, r2, #3
     b5e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     b60:	4a10      	ldr	r2, [pc, #64]	; (ba4 <adc_init+0x358>)
     b62:	6851      	ldr	r1, [r2, #4]
     b64:	0149      	lsls	r1, r1, #5
     b66:	6812      	ldr	r2, [r2, #0]
     b68:	0ed2      	lsrs	r2, r2, #27
     b6a:	430a      	orrs	r2, r1
     b6c:	b2d2      	uxtb	r2, r2
			) |
     b6e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     b70:	4642      	mov	r2, r8
     b72:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     b74:	2000      	movs	r0, #0
     b76:	e67c      	b.n	872 <adc_init+0x26>
     b78:	40000400 	.word	0x40000400
     b7c:	40000800 	.word	0x40000800
     b80:	20000138 	.word	0x20000138
     b84:	00003519 	.word	0x00003519
     b88:	0000348d 	.word	0x0000348d
     b8c:	00003bad 	.word	0x00003bad
     b90:	00003e2c 	.word	0x00003e2c
     b94:	00003611 	.word	0x00003611
     b98:	00003d58 	.word	0x00003d58
     b9c:	00000fff 	.word	0x00000fff
     ba0:	00806024 	.word	0x00806024
     ba4:	00806020 	.word	0x00806020
		switch (resolution) {
     ba8:	2c00      	cmp	r4, #0
     baa:	d000      	beq.n	bae <adc_init+0x362>
     bac:	e77f      	b.n	aae <adc_init+0x262>
			if (config->differential_mode &&
     bae:	7cf2      	ldrb	r2, [r6, #19]
     bb0:	2a00      	cmp	r2, #0
     bb2:	d00f      	beq.n	bd4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     bb4:	69f2      	ldr	r2, [r6, #28]
     bb6:	2180      	movs	r1, #128	; 0x80
     bb8:	0109      	lsls	r1, r1, #4
     bba:	468c      	mov	ip, r1
     bbc:	4462      	add	r2, ip
			if (config->differential_mode &&
     bbe:	492a      	ldr	r1, [pc, #168]	; (c68 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     bc0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     bc2:	428a      	cmp	r2, r1
     bc4:	d900      	bls.n	bc8 <adc_init+0x37c>
     bc6:	e654      	b.n	872 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     bc8:	6a32      	ldr	r2, [r6, #32]
     bca:	4462      	add	r2, ip
     bcc:	4926      	ldr	r1, [pc, #152]	; (c68 <adc_init+0x41c>)
     bce:	428a      	cmp	r2, r1
     bd0:	d900      	bls.n	bd4 <adc_init+0x388>
     bd2:	e64e      	b.n	872 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     bd4:	4a24      	ldr	r2, [pc, #144]	; (c68 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     bd6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     bd8:	69f1      	ldr	r1, [r6, #28]
     bda:	4291      	cmp	r1, r2
     bdc:	dd00      	ble.n	be0 <adc_init+0x394>
     bde:	e648      	b.n	872 <adc_init+0x26>
     be0:	6a31      	ldr	r1, [r6, #32]
     be2:	4291      	cmp	r1, r2
     be4:	dd00      	ble.n	be8 <adc_init+0x39c>
     be6:	e644      	b.n	872 <adc_init+0x26>
     be8:	e761      	b.n	aae <adc_init+0x262>
			if (config->differential_mode &&
     bea:	7cf2      	ldrb	r2, [r6, #19]
     bec:	2a00      	cmp	r2, #0
     bee:	d00f      	beq.n	c10 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     bf0:	69f2      	ldr	r2, [r6, #28]
     bf2:	2180      	movs	r1, #128	; 0x80
     bf4:	0089      	lsls	r1, r1, #2
     bf6:	468c      	mov	ip, r1
     bf8:	4462      	add	r2, ip
			if (config->differential_mode &&
     bfa:	491c      	ldr	r1, [pc, #112]	; (c6c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     bfc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     bfe:	428a      	cmp	r2, r1
     c00:	d900      	bls.n	c04 <adc_init+0x3b8>
     c02:	e636      	b.n	872 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     c04:	6a32      	ldr	r2, [r6, #32]
     c06:	4462      	add	r2, ip
     c08:	4918      	ldr	r1, [pc, #96]	; (c6c <adc_init+0x420>)
     c0a:	428a      	cmp	r2, r1
     c0c:	d900      	bls.n	c10 <adc_init+0x3c4>
     c0e:	e630      	b.n	872 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     c10:	4a16      	ldr	r2, [pc, #88]	; (c6c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     c12:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     c14:	69f1      	ldr	r1, [r6, #28]
     c16:	4291      	cmp	r1, r2
     c18:	dd00      	ble.n	c1c <adc_init+0x3d0>
     c1a:	e62a      	b.n	872 <adc_init+0x26>
     c1c:	6a31      	ldr	r1, [r6, #32]
     c1e:	4291      	cmp	r1, r2
     c20:	dd00      	ble.n	c24 <adc_init+0x3d8>
     c22:	e626      	b.n	872 <adc_init+0x26>
     c24:	e743      	b.n	aae <adc_init+0x262>
			if (config->differential_mode &&
     c26:	7cf2      	ldrb	r2, [r6, #19]
     c28:	2a00      	cmp	r2, #0
     c2a:	d00f      	beq.n	c4c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     c2c:	69f2      	ldr	r2, [r6, #28]
     c2e:	2180      	movs	r1, #128	; 0x80
     c30:	0209      	lsls	r1, r1, #8
     c32:	468c      	mov	ip, r1
     c34:	4462      	add	r2, ip
			if (config->differential_mode &&
     c36:	490e      	ldr	r1, [pc, #56]	; (c70 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     c38:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c3a:	428a      	cmp	r2, r1
     c3c:	d900      	bls.n	c40 <adc_init+0x3f4>
     c3e:	e618      	b.n	872 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     c40:	6a32      	ldr	r2, [r6, #32]
     c42:	4462      	add	r2, ip
     c44:	490a      	ldr	r1, [pc, #40]	; (c70 <adc_init+0x424>)
     c46:	428a      	cmp	r2, r1
     c48:	d900      	bls.n	c4c <adc_init+0x400>
     c4a:	e612      	b.n	872 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     c4c:	4a08      	ldr	r2, [pc, #32]	; (c70 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     c4e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     c50:	69f1      	ldr	r1, [r6, #28]
     c52:	4291      	cmp	r1, r2
     c54:	dd00      	ble.n	c58 <adc_init+0x40c>
     c56:	e60c      	b.n	872 <adc_init+0x26>
     c58:	6a31      	ldr	r1, [r6, #32]
     c5a:	4291      	cmp	r1, r2
     c5c:	dd00      	ble.n	c60 <adc_init+0x414>
     c5e:	e608      	b.n	872 <adc_init+0x26>
     c60:	e725      	b.n	aae <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     c62:	2017      	movs	r0, #23
     c64:	e605      	b.n	872 <adc_init+0x26>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00000fff 	.word	0x00000fff
     c6c:	000003ff 	.word	0x000003ff
     c70:	0000ffff 	.word	0x0000ffff

00000c74 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     c74:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     c76:	4b2e      	ldr	r3, [pc, #184]	; (d30 <ADC_Handler+0xbc>)
     c78:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     c7a:	6823      	ldr	r3, [r4, #0]
     c7c:	7e1d      	ldrb	r5, [r3, #24]
     c7e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     c80:	07ea      	lsls	r2, r5, #31
     c82:	d505      	bpl.n	c90 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     c84:	7ee2      	ldrb	r2, [r4, #27]
     c86:	07d2      	lsls	r2, r2, #31
     c88:	d502      	bpl.n	c90 <ADC_Handler+0x1c>
     c8a:	7ea2      	ldrb	r2, [r4, #26]
     c8c:	07d2      	lsls	r2, r2, #31
     c8e:	d416      	bmi.n	cbe <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     c90:	076b      	lsls	r3, r5, #29
     c92:	d508      	bpl.n	ca6 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     c94:	2304      	movs	r3, #4
     c96:	6822      	ldr	r2, [r4, #0]
     c98:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     c9a:	7ee3      	ldrb	r3, [r4, #27]
     c9c:	079b      	lsls	r3, r3, #30
     c9e:	d502      	bpl.n	ca6 <ADC_Handler+0x32>
     ca0:	7ea3      	ldrb	r3, [r4, #26]
     ca2:	079b      	lsls	r3, r3, #30
     ca4:	d43c      	bmi.n	d20 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     ca6:	07ab      	lsls	r3, r5, #30
     ca8:	d508      	bpl.n	cbc <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     caa:	2302      	movs	r3, #2
     cac:	6822      	ldr	r2, [r4, #0]
     cae:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     cb0:	7ee3      	ldrb	r3, [r4, #27]
     cb2:	075b      	lsls	r3, r3, #29
     cb4:	d502      	bpl.n	cbc <ADC_Handler+0x48>
     cb6:	7ea3      	ldrb	r3, [r4, #26]
     cb8:	075b      	lsls	r3, r3, #29
     cba:	d435      	bmi.n	d28 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     cbc:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     cbe:	2201      	movs	r2, #1
     cc0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     cc2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cc4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     cc6:	b25b      	sxtb	r3, r3
     cc8:	2b00      	cmp	r3, #0
     cca:	dbfb      	blt.n	cc4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     ccc:	6961      	ldr	r1, [r4, #20]
     cce:	1c8b      	adds	r3, r1, #2
     cd0:	6163      	str	r3, [r4, #20]
     cd2:	8b53      	ldrh	r3, [r2, #26]
     cd4:	b29b      	uxth	r3, r3
     cd6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     cd8:	8b23      	ldrh	r3, [r4, #24]
     cda:	3b01      	subs	r3, #1
     cdc:	b29b      	uxth	r3, r3
     cde:	8323      	strh	r3, [r4, #24]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d011      	beq.n	d08 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     ce4:	7f63      	ldrb	r3, [r4, #29]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d0d2      	beq.n	c90 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     cea:	6822      	ldr	r2, [r4, #0]
     cec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     cee:	b25b      	sxtb	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	dbfb      	blt.n	cec <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     cf4:	7b13      	ldrb	r3, [r2, #12]
     cf6:	2102      	movs	r1, #2
     cf8:	430b      	orrs	r3, r1
     cfa:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     cfc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cfe:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     d00:	b25b      	sxtb	r3, r3
     d02:	2b00      	cmp	r3, #0
     d04:	dbfb      	blt.n	cfe <ADC_Handler+0x8a>
     d06:	e7c3      	b.n	c90 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     d08:	7f23      	ldrb	r3, [r4, #28]
     d0a:	2b05      	cmp	r3, #5
     d0c:	d1c0      	bne.n	c90 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     d0e:	2300      	movs	r3, #0
     d10:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     d12:	3301      	adds	r3, #1
     d14:	6822      	ldr	r2, [r4, #0]
     d16:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     d18:	0020      	movs	r0, r4
     d1a:	68a3      	ldr	r3, [r4, #8]
     d1c:	4798      	blx	r3
     d1e:	e7b7      	b.n	c90 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     d20:	0020      	movs	r0, r4
     d22:	68e3      	ldr	r3, [r4, #12]
     d24:	4798      	blx	r3
     d26:	e7be      	b.n	ca6 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     d28:	6923      	ldr	r3, [r4, #16]
     d2a:	0020      	movs	r0, r4
     d2c:	4798      	blx	r3
}
     d2e:	e7c5      	b.n	cbc <ADC_Handler+0x48>
     d30:	20000138 	.word	0x20000138

00000d34 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     d34:	4a04      	ldr	r2, [pc, #16]	; (d48 <_extint_enable+0x14>)
     d36:	7813      	ldrb	r3, [r2, #0]
     d38:	2102      	movs	r1, #2
     d3a:	430b      	orrs	r3, r1
     d3c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d3e:	7853      	ldrb	r3, [r2, #1]
     d40:	b25b      	sxtb	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	dbfb      	blt.n	d3e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d46:	4770      	bx	lr
     d48:	40001800 	.word	0x40001800

00000d4c <_system_extint_init>:
{
     d4c:	b500      	push	{lr}
     d4e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     d50:	4a12      	ldr	r2, [pc, #72]	; (d9c <_system_extint_init+0x50>)
     d52:	6993      	ldr	r3, [r2, #24]
     d54:	2140      	movs	r1, #64	; 0x40
     d56:	430b      	orrs	r3, r1
     d58:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d5a:	a901      	add	r1, sp, #4
     d5c:	2300      	movs	r3, #0
     d5e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d60:	2005      	movs	r0, #5
     d62:	4b0f      	ldr	r3, [pc, #60]	; (da0 <_system_extint_init+0x54>)
     d64:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     d66:	2005      	movs	r0, #5
     d68:	4b0e      	ldr	r3, [pc, #56]	; (da4 <_system_extint_init+0x58>)
     d6a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d6c:	4a0e      	ldr	r2, [pc, #56]	; (da8 <_system_extint_init+0x5c>)
     d6e:	7813      	ldrb	r3, [r2, #0]
     d70:	2101      	movs	r1, #1
     d72:	430b      	orrs	r3, r1
     d74:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d76:	7853      	ldrb	r3, [r2, #1]
     d78:	b25b      	sxtb	r3, r3
     d7a:	2b00      	cmp	r3, #0
     d7c:	dbfb      	blt.n	d76 <_system_extint_init+0x2a>
     d7e:	4b0b      	ldr	r3, [pc, #44]	; (dac <_system_extint_init+0x60>)
     d80:	0019      	movs	r1, r3
     d82:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     d84:	2200      	movs	r2, #0
     d86:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d88:	4299      	cmp	r1, r3
     d8a:	d1fc      	bne.n	d86 <_system_extint_init+0x3a>
     d8c:	2210      	movs	r2, #16
     d8e:	4b08      	ldr	r3, [pc, #32]	; (db0 <_system_extint_init+0x64>)
     d90:	601a      	str	r2, [r3, #0]
	_extint_enable();
     d92:	4b08      	ldr	r3, [pc, #32]	; (db4 <_system_extint_init+0x68>)
     d94:	4798      	blx	r3
}
     d96:	b003      	add	sp, #12
     d98:	bd00      	pop	{pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	40000400 	.word	0x40000400
     da0:	00003519 	.word	0x00003519
     da4:	0000348d 	.word	0x0000348d
     da8:	40001800 	.word	0x40001800
     dac:	2000013c 	.word	0x2000013c
     db0:	e000e100 	.word	0xe000e100
     db4:	00000d35 	.word	0x00000d35

00000db8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     db8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dba:	46de      	mov	lr, fp
     dbc:	4657      	mov	r7, sl
     dbe:	464e      	mov	r6, r9
     dc0:	4645      	mov	r5, r8
     dc2:	b5e0      	push	{r5, r6, r7, lr}
     dc4:	b087      	sub	sp, #28
     dc6:	4680      	mov	r8, r0
     dc8:	9104      	str	r1, [sp, #16]
     dca:	0016      	movs	r6, r2
     dcc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     dce:	2200      	movs	r2, #0
     dd0:	2300      	movs	r3, #0
     dd2:	2100      	movs	r1, #0
     dd4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     dd6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     dd8:	2001      	movs	r0, #1
     dda:	0021      	movs	r1, r4
     ddc:	9600      	str	r6, [sp, #0]
     dde:	9701      	str	r7, [sp, #4]
     de0:	465c      	mov	r4, fp
     de2:	9403      	str	r4, [sp, #12]
     de4:	4644      	mov	r4, r8
     de6:	9405      	str	r4, [sp, #20]
     de8:	e013      	b.n	e12 <long_division+0x5a>
     dea:	2420      	movs	r4, #32
     dec:	1a64      	subs	r4, r4, r1
     dee:	0005      	movs	r5, r0
     df0:	40e5      	lsrs	r5, r4
     df2:	46a8      	mov	r8, r5
     df4:	e014      	b.n	e20 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     df6:	9c00      	ldr	r4, [sp, #0]
     df8:	9d01      	ldr	r5, [sp, #4]
     dfa:	1b12      	subs	r2, r2, r4
     dfc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     dfe:	465c      	mov	r4, fp
     e00:	464d      	mov	r5, r9
     e02:	432c      	orrs	r4, r5
     e04:	46a3      	mov	fp, r4
     e06:	9c03      	ldr	r4, [sp, #12]
     e08:	4645      	mov	r5, r8
     e0a:	432c      	orrs	r4, r5
     e0c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     e0e:	3901      	subs	r1, #1
     e10:	d325      	bcc.n	e5e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     e12:	2420      	movs	r4, #32
     e14:	4264      	negs	r4, r4
     e16:	190c      	adds	r4, r1, r4
     e18:	d4e7      	bmi.n	dea <long_division+0x32>
     e1a:	0005      	movs	r5, r0
     e1c:	40a5      	lsls	r5, r4
     e1e:	46a8      	mov	r8, r5
     e20:	0004      	movs	r4, r0
     e22:	408c      	lsls	r4, r1
     e24:	46a1      	mov	r9, r4
		r = r << 1;
     e26:	1892      	adds	r2, r2, r2
     e28:	415b      	adcs	r3, r3
     e2a:	0014      	movs	r4, r2
     e2c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     e2e:	9e05      	ldr	r6, [sp, #20]
     e30:	464f      	mov	r7, r9
     e32:	403e      	ands	r6, r7
     e34:	46b4      	mov	ip, r6
     e36:	9e04      	ldr	r6, [sp, #16]
     e38:	4647      	mov	r7, r8
     e3a:	403e      	ands	r6, r7
     e3c:	46b2      	mov	sl, r6
     e3e:	4666      	mov	r6, ip
     e40:	4657      	mov	r7, sl
     e42:	433e      	orrs	r6, r7
     e44:	d003      	beq.n	e4e <long_division+0x96>
			r |= 0x01;
     e46:	0006      	movs	r6, r0
     e48:	4326      	orrs	r6, r4
     e4a:	0032      	movs	r2, r6
     e4c:	002b      	movs	r3, r5
		if (r >= d) {
     e4e:	9c00      	ldr	r4, [sp, #0]
     e50:	9d01      	ldr	r5, [sp, #4]
     e52:	429d      	cmp	r5, r3
     e54:	d8db      	bhi.n	e0e <long_division+0x56>
     e56:	d1ce      	bne.n	df6 <long_division+0x3e>
     e58:	4294      	cmp	r4, r2
     e5a:	d8d8      	bhi.n	e0e <long_division+0x56>
     e5c:	e7cb      	b.n	df6 <long_division+0x3e>
     e5e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     e60:	4658      	mov	r0, fp
     e62:	0019      	movs	r1, r3
     e64:	b007      	add	sp, #28
     e66:	bc3c      	pop	{r2, r3, r4, r5}
     e68:	4690      	mov	r8, r2
     e6a:	4699      	mov	r9, r3
     e6c:	46a2      	mov	sl, r4
     e6e:	46ab      	mov	fp, r5
     e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e72 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e72:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     e74:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e76:	2340      	movs	r3, #64	; 0x40
     e78:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e7a:	4281      	cmp	r1, r0
     e7c:	d202      	bcs.n	e84 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e7e:	0018      	movs	r0, r3
     e80:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e82:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e84:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e86:	1c63      	adds	r3, r4, #1
     e88:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e8a:	4288      	cmp	r0, r1
     e8c:	d9f9      	bls.n	e82 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e8e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e90:	2cff      	cmp	r4, #255	; 0xff
     e92:	d8f4      	bhi.n	e7e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e94:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e96:	2300      	movs	r3, #0
     e98:	e7f1      	b.n	e7e <_sercom_get_sync_baud_val+0xc>
	...

00000e9c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e9e:	b083      	sub	sp, #12
     ea0:	000f      	movs	r7, r1
     ea2:	0016      	movs	r6, r2
     ea4:	aa08      	add	r2, sp, #32
     ea6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ea8:	0004      	movs	r4, r0
     eaa:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     eac:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     eae:	42bc      	cmp	r4, r7
     eb0:	d902      	bls.n	eb8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     eb2:	0010      	movs	r0, r2
     eb4:	b003      	add	sp, #12
     eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     eb8:	2b00      	cmp	r3, #0
     eba:	d114      	bne.n	ee6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     ebc:	0002      	movs	r2, r0
     ebe:	0008      	movs	r0, r1
     ec0:	2100      	movs	r1, #0
     ec2:	4c19      	ldr	r4, [pc, #100]	; (f28 <_sercom_get_async_baud_val+0x8c>)
     ec4:	47a0      	blx	r4
     ec6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     ec8:	003a      	movs	r2, r7
     eca:	2300      	movs	r3, #0
     ecc:	2000      	movs	r0, #0
     ece:	4c17      	ldr	r4, [pc, #92]	; (f2c <_sercom_get_async_baud_val+0x90>)
     ed0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ed2:	2200      	movs	r2, #0
     ed4:	2301      	movs	r3, #1
     ed6:	1a12      	subs	r2, r2, r0
     ed8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     eda:	0c12      	lsrs	r2, r2, #16
     edc:	041b      	lsls	r3, r3, #16
     ede:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ee0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     ee2:	2200      	movs	r2, #0
     ee4:	e7e5      	b.n	eb2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     ee6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ee8:	2b01      	cmp	r3, #1
     eea:	d1f9      	bne.n	ee0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     eec:	000a      	movs	r2, r1
     eee:	2300      	movs	r3, #0
     ef0:	2100      	movs	r1, #0
     ef2:	4c0d      	ldr	r4, [pc, #52]	; (f28 <_sercom_get_async_baud_val+0x8c>)
     ef4:	47a0      	blx	r4
     ef6:	0002      	movs	r2, r0
     ef8:	000b      	movs	r3, r1
     efa:	9200      	str	r2, [sp, #0]
     efc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     efe:	0038      	movs	r0, r7
     f00:	2100      	movs	r1, #0
     f02:	4c0a      	ldr	r4, [pc, #40]	; (f2c <_sercom_get_async_baud_val+0x90>)
     f04:	47a0      	blx	r4
     f06:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     f08:	2380      	movs	r3, #128	; 0x80
     f0a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f0c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     f0e:	4298      	cmp	r0, r3
     f10:	d8cf      	bhi.n	eb2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     f12:	0f79      	lsrs	r1, r7, #29
     f14:	00f8      	lsls	r0, r7, #3
     f16:	9a00      	ldr	r2, [sp, #0]
     f18:	9b01      	ldr	r3, [sp, #4]
     f1a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     f1c:	00ea      	lsls	r2, r5, #3
     f1e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     f20:	b2d2      	uxtb	r2, r2
     f22:	0352      	lsls	r2, r2, #13
     f24:	432a      	orrs	r2, r5
     f26:	e7db      	b.n	ee0 <_sercom_get_async_baud_val+0x44>
     f28:	00003afd 	.word	0x00003afd
     f2c:	00000db9 	.word	0x00000db9

00000f30 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f30:	b510      	push	{r4, lr}
     f32:	b082      	sub	sp, #8
     f34:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     f36:	4b0e      	ldr	r3, [pc, #56]	; (f70 <sercom_set_gclk_generator+0x40>)
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d007      	beq.n	f4e <sercom_set_gclk_generator+0x1e>
     f3e:	2900      	cmp	r1, #0
     f40:	d105      	bne.n	f4e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <sercom_set_gclk_generator+0x40>)
     f44:	785b      	ldrb	r3, [r3, #1]
     f46:	4283      	cmp	r3, r0
     f48:	d010      	beq.n	f6c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f4a:	201d      	movs	r0, #29
     f4c:	e00c      	b.n	f68 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     f4e:	a901      	add	r1, sp, #4
     f50:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     f52:	200d      	movs	r0, #13
     f54:	4b07      	ldr	r3, [pc, #28]	; (f74 <sercom_set_gclk_generator+0x44>)
     f56:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f58:	200d      	movs	r0, #13
     f5a:	4b07      	ldr	r3, [pc, #28]	; (f78 <sercom_set_gclk_generator+0x48>)
     f5c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     f5e:	4b04      	ldr	r3, [pc, #16]	; (f70 <sercom_set_gclk_generator+0x40>)
     f60:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f62:	2201      	movs	r2, #1
     f64:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     f66:	2000      	movs	r0, #0
}
     f68:	b002      	add	sp, #8
     f6a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     f6c:	2000      	movs	r0, #0
     f6e:	e7fb      	b.n	f68 <sercom_set_gclk_generator+0x38>
     f70:	200000a8 	.word	0x200000a8
     f74:	00003519 	.word	0x00003519
     f78:	0000348d 	.word	0x0000348d

00000f7c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     f7c:	4b20      	ldr	r3, [pc, #128]	; (1000 <_sercom_get_default_pad+0x84>)
     f7e:	4298      	cmp	r0, r3
     f80:	d017      	beq.n	fb2 <_sercom_get_default_pad+0x36>
     f82:	4b20      	ldr	r3, [pc, #128]	; (1004 <_sercom_get_default_pad+0x88>)
     f84:	4298      	cmp	r0, r3
     f86:	d024      	beq.n	fd2 <_sercom_get_default_pad+0x56>
     f88:	4b1f      	ldr	r3, [pc, #124]	; (1008 <_sercom_get_default_pad+0x8c>)
     f8a:	4298      	cmp	r0, r3
     f8c:	d001      	beq.n	f92 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     f8e:	2000      	movs	r0, #0
}
     f90:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f92:	2901      	cmp	r1, #1
     f94:	d007      	beq.n	fa6 <_sercom_get_default_pad+0x2a>
     f96:	2900      	cmp	r1, #0
     f98:	d02b      	beq.n	ff2 <_sercom_get_default_pad+0x76>
     f9a:	2902      	cmp	r1, #2
     f9c:	d005      	beq.n	faa <_sercom_get_default_pad+0x2e>
     f9e:	2903      	cmp	r1, #3
     fa0:	d005      	beq.n	fae <_sercom_get_default_pad+0x32>
	return 0;
     fa2:	2000      	movs	r0, #0
     fa4:	e7f4      	b.n	f90 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fa6:	4819      	ldr	r0, [pc, #100]	; (100c <_sercom_get_default_pad+0x90>)
     fa8:	e7f2      	b.n	f90 <_sercom_get_default_pad+0x14>
     faa:	4819      	ldr	r0, [pc, #100]	; (1010 <_sercom_get_default_pad+0x94>)
     fac:	e7f0      	b.n	f90 <_sercom_get_default_pad+0x14>
     fae:	4819      	ldr	r0, [pc, #100]	; (1014 <_sercom_get_default_pad+0x98>)
     fb0:	e7ee      	b.n	f90 <_sercom_get_default_pad+0x14>
     fb2:	2901      	cmp	r1, #1
     fb4:	d007      	beq.n	fc6 <_sercom_get_default_pad+0x4a>
     fb6:	2900      	cmp	r1, #0
     fb8:	d01d      	beq.n	ff6 <_sercom_get_default_pad+0x7a>
     fba:	2902      	cmp	r1, #2
     fbc:	d005      	beq.n	fca <_sercom_get_default_pad+0x4e>
     fbe:	2903      	cmp	r1, #3
     fc0:	d005      	beq.n	fce <_sercom_get_default_pad+0x52>
	return 0;
     fc2:	2000      	movs	r0, #0
     fc4:	e7e4      	b.n	f90 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fc6:	4814      	ldr	r0, [pc, #80]	; (1018 <_sercom_get_default_pad+0x9c>)
     fc8:	e7e2      	b.n	f90 <_sercom_get_default_pad+0x14>
     fca:	4814      	ldr	r0, [pc, #80]	; (101c <_sercom_get_default_pad+0xa0>)
     fcc:	e7e0      	b.n	f90 <_sercom_get_default_pad+0x14>
     fce:	4814      	ldr	r0, [pc, #80]	; (1020 <_sercom_get_default_pad+0xa4>)
     fd0:	e7de      	b.n	f90 <_sercom_get_default_pad+0x14>
     fd2:	2901      	cmp	r1, #1
     fd4:	d007      	beq.n	fe6 <_sercom_get_default_pad+0x6a>
     fd6:	2900      	cmp	r1, #0
     fd8:	d00f      	beq.n	ffa <_sercom_get_default_pad+0x7e>
     fda:	2902      	cmp	r1, #2
     fdc:	d005      	beq.n	fea <_sercom_get_default_pad+0x6e>
     fde:	2903      	cmp	r1, #3
     fe0:	d005      	beq.n	fee <_sercom_get_default_pad+0x72>
	return 0;
     fe2:	2000      	movs	r0, #0
     fe4:	e7d4      	b.n	f90 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fe6:	480f      	ldr	r0, [pc, #60]	; (1024 <_sercom_get_default_pad+0xa8>)
     fe8:	e7d2      	b.n	f90 <_sercom_get_default_pad+0x14>
     fea:	480f      	ldr	r0, [pc, #60]	; (1028 <_sercom_get_default_pad+0xac>)
     fec:	e7d0      	b.n	f90 <_sercom_get_default_pad+0x14>
     fee:	480f      	ldr	r0, [pc, #60]	; (102c <_sercom_get_default_pad+0xb0>)
     ff0:	e7ce      	b.n	f90 <_sercom_get_default_pad+0x14>
     ff2:	480f      	ldr	r0, [pc, #60]	; (1030 <_sercom_get_default_pad+0xb4>)
     ff4:	e7cc      	b.n	f90 <_sercom_get_default_pad+0x14>
     ff6:	480f      	ldr	r0, [pc, #60]	; (1034 <_sercom_get_default_pad+0xb8>)
     ff8:	e7ca      	b.n	f90 <_sercom_get_default_pad+0x14>
     ffa:	480f      	ldr	r0, [pc, #60]	; (1038 <_sercom_get_default_pad+0xbc>)
     ffc:	e7c8      	b.n	f90 <_sercom_get_default_pad+0x14>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	42000c00 	.word	0x42000c00
    1004:	42001000 	.word	0x42001000
    1008:	42000800 	.word	0x42000800
    100c:	00050003 	.word	0x00050003
    1010:	00060003 	.word	0x00060003
    1014:	00070003 	.word	0x00070003
    1018:	00170002 	.word	0x00170002
    101c:	001e0003 	.word	0x001e0003
    1020:	001f0003 	.word	0x001f0003
    1024:	00170003 	.word	0x00170003
    1028:	00100003 	.word	0x00100003
    102c:	00190003 	.word	0x00190003
    1030:	00040003 	.word	0x00040003
    1034:	00160002 	.word	0x00160002
    1038:	00160003 	.word	0x00160003

0000103c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    103c:	b530      	push	{r4, r5, lr}
    103e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1040:	aa01      	add	r2, sp, #4
    1042:	4b0b      	ldr	r3, [pc, #44]	; (1070 <_sercom_get_sercom_inst_index+0x34>)
    1044:	cb32      	ldmia	r3!, {r1, r4, r5}
    1046:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1048:	0003      	movs	r3, r0
    104a:	9a01      	ldr	r2, [sp, #4]
    104c:	4282      	cmp	r2, r0
    104e:	d00c      	beq.n	106a <_sercom_get_sercom_inst_index+0x2e>
    1050:	9a02      	ldr	r2, [sp, #8]
    1052:	4282      	cmp	r2, r0
    1054:	d007      	beq.n	1066 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1056:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1058:	9a03      	ldr	r2, [sp, #12]
    105a:	429a      	cmp	r2, r3
    105c:	d001      	beq.n	1062 <_sercom_get_sercom_inst_index+0x26>
}
    105e:	b005      	add	sp, #20
    1060:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1062:	3002      	adds	r0, #2
    1064:	e002      	b.n	106c <_sercom_get_sercom_inst_index+0x30>
    1066:	2001      	movs	r0, #1
    1068:	e000      	b.n	106c <_sercom_get_sercom_inst_index+0x30>
    106a:	2000      	movs	r0, #0
			return i;
    106c:	b2c0      	uxtb	r0, r0
    106e:	e7f6      	b.n	105e <_sercom_get_sercom_inst_index+0x22>
    1070:	00003e7c 	.word	0x00003e7c

00001074 <update_LEDS>:
#include <asf.h>
#include "LED.h"
#include "LED_control.h"

void update_LEDS(uint8_t led1, uint8_t led2, uint8_t led3,uint8_t led4)
{
    1074:	b510      	push	{r4, lr}
	if(led1 == 0xff)
    1076:	28ff      	cmp	r0, #255	; 0xff
    1078:	d017      	beq.n	10aa <update_LEDS+0x36>
	{
		led1 = 0xfe;
	}
	if(led2 == 0xff)
    107a:	29ff      	cmp	r1, #255	; 0xff
    107c:	d017      	beq.n	10ae <update_LEDS+0x3a>
	{
		led2 = 0xfe;
	}
	if(led3 == 0xff)
    107e:	2aff      	cmp	r2, #255	; 0xff
    1080:	d017      	beq.n	10b2 <update_LEDS+0x3e>
	{
		led3 = 0xfe;
	}
	if(led4 == 0xff)
    1082:	2bff      	cmp	r3, #255	; 0xff
    1084:	d017      	beq.n	10b6 <update_LEDS+0x42>
	{
		led4 = 0xfe;
	}
	temp_compare_led_array_2[0] = 255 -led1;//Led1
    1086:	4c0d      	ldr	r4, [pc, #52]	; (10bc <update_LEDS+0x48>)
    1088:	43c0      	mvns	r0, r0
    108a:	7020      	strb	r0, [r4, #0]
	temp_compare_led_array_2[1] = 255 -led2;//led2
    108c:	43c9      	mvns	r1, r1
    108e:	7061      	strb	r1, [r4, #1]
	temp_compare_led_array_2[2] = 255 -led3;//Led3
    1090:	43d2      	mvns	r2, r2
    1092:	70a2      	strb	r2, [r4, #2]
	temp_compare_led_array_2[3] =  led4;//Led3
    1094:	70e3      	strb	r3, [r4, #3]
	initializing_LED_pin_array();
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <update_LEDS+0x4c>)
    1098:	4798      	blx	r3
	increasing_LED_sort_tag();
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <update_LEDS+0x50>)
    109c:	4798      	blx	r3
	LED_transfer_temp();
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <update_LEDS+0x54>)
    10a0:	4798      	blx	r3
	update_compare_led_array = true;
    10a2:	2201      	movs	r2, #1
    10a4:	4b09      	ldr	r3, [pc, #36]	; (10cc <update_LEDS+0x58>)
    10a6:	701a      	strb	r2, [r3, #0]
}
    10a8:	bd10      	pop	{r4, pc}
		led1 = 0xfe;
    10aa:	3801      	subs	r0, #1
    10ac:	e7e5      	b.n	107a <update_LEDS+0x6>
		led2 = 0xfe;
    10ae:	3901      	subs	r1, #1
    10b0:	e7e5      	b.n	107e <update_LEDS+0xa>
		led3 = 0xfe;
    10b2:	3a01      	subs	r2, #1
    10b4:	e7e5      	b.n	1082 <update_LEDS+0xe>
		led4 = 0xfe;
    10b6:	3b01      	subs	r3, #1
    10b8:	e7e5      	b.n	1086 <update_LEDS+0x12>
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	20000214 	.word	0x20000214
    10c0:	00002939 	.word	0x00002939
    10c4:	00002985 	.word	0x00002985
    10c8:	000029ed 	.word	0x000029ed
    10cc:	200000c6 	.word	0x200000c6

000010d0 <update_LEDS_single>:

void update_LEDS_single(uint8_t port_no, uint8_t led)
{
    10d0:	b510      	push	{r4, lr}
	if(led == 0xff)
    10d2:	29ff      	cmp	r1, #255	; 0xff
    10d4:	d009      	beq.n	10ea <update_LEDS_single+0x1a>
	{
		led = 0xfe;
	}
	switch (port_no)
    10d6:	2832      	cmp	r0, #50	; 0x32
    10d8:	d018      	beq.n	110c <update_LEDS_single+0x3c>
    10da:	d908      	bls.n	10ee <update_LEDS_single+0x1e>
    10dc:	2833      	cmp	r0, #51	; 0x33
    10de:	d019      	beq.n	1114 <update_LEDS_single+0x44>
    10e0:	2834      	cmp	r0, #52	; 0x34
    10e2:	d109      	bne.n	10f8 <update_LEDS_single+0x28>
					break;
		case '3':
					temp_compare_led_array_2[2] = 255 -led;//Led3
					break;
		case '4':
					temp_compare_led_array_2[3] = led;//Led4
    10e4:	4b0d      	ldr	r3, [pc, #52]	; (111c <update_LEDS_single+0x4c>)
    10e6:	70d9      	strb	r1, [r3, #3]
					break;
    10e8:	e006      	b.n	10f8 <update_LEDS_single+0x28>
		led = 0xfe;
    10ea:	3901      	subs	r1, #1
    10ec:	e7f3      	b.n	10d6 <update_LEDS_single+0x6>
	switch (port_no)
    10ee:	2831      	cmp	r0, #49	; 0x31
    10f0:	d102      	bne.n	10f8 <update_LEDS_single+0x28>
					temp_compare_led_array_2[0] = 255 -led;//Led1
    10f2:	43c9      	mvns	r1, r1
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <update_LEDS_single+0x4c>)
    10f6:	7019      	strb	r1, [r3, #0]
		default:
					break;
	}
	initializing_LED_pin_array();
    10f8:	4b09      	ldr	r3, [pc, #36]	; (1120 <update_LEDS_single+0x50>)
    10fa:	4798      	blx	r3
	increasing_LED_sort_tag();
    10fc:	4b09      	ldr	r3, [pc, #36]	; (1124 <update_LEDS_single+0x54>)
    10fe:	4798      	blx	r3
	LED_transfer_temp();
    1100:	4b09      	ldr	r3, [pc, #36]	; (1128 <update_LEDS_single+0x58>)
    1102:	4798      	blx	r3
	update_compare_led_array = true;
    1104:	2201      	movs	r2, #1
    1106:	4b09      	ldr	r3, [pc, #36]	; (112c <update_LEDS_single+0x5c>)
    1108:	701a      	strb	r2, [r3, #0]
}
    110a:	bd10      	pop	{r4, pc}
					temp_compare_led_array_2[1] = 255 -led;//Led2
    110c:	43c9      	mvns	r1, r1
    110e:	4b03      	ldr	r3, [pc, #12]	; (111c <update_LEDS_single+0x4c>)
    1110:	7059      	strb	r1, [r3, #1]
					break;
    1112:	e7f1      	b.n	10f8 <update_LEDS_single+0x28>
					temp_compare_led_array_2[2] = 255 -led;//Led3
    1114:	43c9      	mvns	r1, r1
    1116:	4b01      	ldr	r3, [pc, #4]	; (111c <update_LEDS_single+0x4c>)
    1118:	7099      	strb	r1, [r3, #2]
					break;
    111a:	e7ed      	b.n	10f8 <update_LEDS_single+0x28>
    111c:	20000214 	.word	0x20000214
    1120:	00002939 	.word	0x00002939
    1124:	00002985 	.word	0x00002985
    1128:	000029ed 	.word	0x000029ed
    112c:	200000c6 	.word	0x200000c6

00001130 <switch_off_LEDS>:


void switch_off_LEDS()
{
    1130:	b510      	push	{r4, lr}
	temp_compare_led_array_2[0] = 255; //Led1
    1132:	4b08      	ldr	r3, [pc, #32]	; (1154 <switch_off_LEDS+0x24>)
    1134:	22ff      	movs	r2, #255	; 0xff
    1136:	701a      	strb	r2, [r3, #0]
	temp_compare_led_array_2[1] = 255; //Led2
    1138:	705a      	strb	r2, [r3, #1]
	temp_compare_led_array_2[2] = 255; //Led3
    113a:	709a      	strb	r2, [r3, #2]
	temp_compare_led_array_2[3] = 0; //Led4
    113c:	2200      	movs	r2, #0
    113e:	70da      	strb	r2, [r3, #3]
	initializing_LED_pin_array();
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <switch_off_LEDS+0x28>)
    1142:	4798      	blx	r3
	increasing_LED_sort_tag();
    1144:	4b05      	ldr	r3, [pc, #20]	; (115c <switch_off_LEDS+0x2c>)
    1146:	4798      	blx	r3
	LED_transfer_temp();
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <switch_off_LEDS+0x30>)
    114a:	4798      	blx	r3
	update_compare_led_array = true;
    114c:	2201      	movs	r2, #1
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <switch_off_LEDS+0x34>)
    1150:	701a      	strb	r2, [r3, #0]
}
    1152:	bd10      	pop	{r4, pc}
    1154:	20000214 	.word	0x20000214
    1158:	00002939 	.word	0x00002939
    115c:	00002985 	.word	0x00002985
    1160:	000029ed 	.word	0x000029ed
    1164:	200000c6 	.word	0x200000c6

00001168 <update_ORB>:
#include <asf.h>
#include "ORB_control.h"
#include "ORB.h"

void update_ORB(uint8_t r1 ,uint8_t g1 ,uint8_t b1 ,uint8_t r2 ,uint8_t b2 ,uint8_t g2  )
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	ac04      	add	r4, sp, #16
    116c:	7826      	ldrb	r6, [r4, #0]
    116e:	ac05      	add	r4, sp, #20
    1170:	7825      	ldrb	r5, [r4, #0]
 	temp_compare_array_2[0] = 255-r1;//Left -- R
    1172:	4c0b      	ldr	r4, [pc, #44]	; (11a0 <update_ORB+0x38>)
    1174:	43c0      	mvns	r0, r0
    1176:	7020      	strb	r0, [r4, #0]
 	temp_compare_array_2[1] = 255-g1;//Left  -- G
    1178:	43c9      	mvns	r1, r1
    117a:	7061      	strb	r1, [r4, #1]
 	temp_compare_array_2[2] = 255-b1;//Left  -- B
    117c:	43d2      	mvns	r2, r2
    117e:	70a2      	strb	r2, [r4, #2]
 	temp_compare_array_2[3] = 255-r2;//Right -- R
    1180:	43db      	mvns	r3, r3
    1182:	70e3      	strb	r3, [r4, #3]
 	temp_compare_array_2[4] = 255-b2;//Right  -- G
    1184:	43f6      	mvns	r6, r6
    1186:	7126      	strb	r6, [r4, #4]
 	temp_compare_array_2[5] = 255-g2;//Right -- B
    1188:	43ed      	mvns	r5, r5
    118a:	7165      	strb	r5, [r4, #5]
	initializing_pin_array();
    118c:	4b05      	ldr	r3, [pc, #20]	; (11a4 <update_ORB+0x3c>)
    118e:	4798      	blx	r3
	increasing_sort_tag();
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <update_ORB+0x40>)
    1192:	4798      	blx	r3
	transfer_temp();
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <update_ORB+0x44>)
    1196:	4798      	blx	r3
	update_compare_array = true;
    1198:	2201      	movs	r2, #1
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <update_ORB+0x48>)
    119c:	701a      	strb	r2, [r3, #0]
}
    119e:	bd70      	pop	{r4, r5, r6, pc}
    11a0:	20000268 	.word	0x20000268
    11a4:	00002fd9 	.word	0x00002fd9
    11a8:	00002e05 	.word	0x00002e05
    11ac:	00002cf9 	.word	0x00002cf9
    11b0:	200000c9 	.word	0x200000c9

000011b4 <update_ORB_single>:


void update_ORB_single(uint8_t port_no , uint8_t r , uint8_t g , uint8_t b)
{
    11b4:	b510      	push	{r4, lr}
	if(port_no == '1') //ASCII 1
    11b6:	2831      	cmp	r0, #49	; 0x31
    11b8:	d00b      	beq.n	11d2 <update_ORB_single+0x1e>
	{
		temp_compare_array_2[0] = 255-r;//Left -- R
		temp_compare_array_2[1] = 255-g;//Left  -- G
		temp_compare_array_2[2] = 255-b;//Left  -- B
	}
	else if(port_no == '2')//ASCII 2
    11ba:	2832      	cmp	r0, #50	; 0x32
    11bc:	d011      	beq.n	11e2 <update_ORB_single+0x2e>
	{
		temp_compare_array_2[3] = 255-r;//Right -- R
		temp_compare_array_2[4] = 255-b;//Right  -- G
		temp_compare_array_2[5] = 255-g;//Right -- B
	}
	initializing_pin_array();
    11be:	4b0d      	ldr	r3, [pc, #52]	; (11f4 <update_ORB_single+0x40>)
    11c0:	4798      	blx	r3
	increasing_sort_tag();
    11c2:	4b0d      	ldr	r3, [pc, #52]	; (11f8 <update_ORB_single+0x44>)
    11c4:	4798      	blx	r3
	transfer_temp();
    11c6:	4b0d      	ldr	r3, [pc, #52]	; (11fc <update_ORB_single+0x48>)
    11c8:	4798      	blx	r3
	update_compare_array = true;
    11ca:	2201      	movs	r2, #1
    11cc:	4b0c      	ldr	r3, [pc, #48]	; (1200 <update_ORB_single+0x4c>)
    11ce:	701a      	strb	r2, [r3, #0]
	
}
    11d0:	bd10      	pop	{r4, pc}
		temp_compare_array_2[0] = 255-r;//Left -- R
    11d2:	480c      	ldr	r0, [pc, #48]	; (1204 <update_ORB_single+0x50>)
    11d4:	43c9      	mvns	r1, r1
    11d6:	7001      	strb	r1, [r0, #0]
		temp_compare_array_2[1] = 255-g;//Left  -- G
    11d8:	43d2      	mvns	r2, r2
    11da:	7042      	strb	r2, [r0, #1]
		temp_compare_array_2[2] = 255-b;//Left  -- B
    11dc:	43db      	mvns	r3, r3
    11de:	7083      	strb	r3, [r0, #2]
    11e0:	e7ed      	b.n	11be <update_ORB_single+0xa>
		temp_compare_array_2[3] = 255-r;//Right -- R
    11e2:	4808      	ldr	r0, [pc, #32]	; (1204 <update_ORB_single+0x50>)
    11e4:	43c9      	mvns	r1, r1
    11e6:	70c1      	strb	r1, [r0, #3]
		temp_compare_array_2[4] = 255-b;//Right  -- G
    11e8:	43db      	mvns	r3, r3
    11ea:	7103      	strb	r3, [r0, #4]
		temp_compare_array_2[5] = 255-g;//Right -- B
    11ec:	43d2      	mvns	r2, r2
    11ee:	7142      	strb	r2, [r0, #5]
    11f0:	e7e5      	b.n	11be <update_ORB_single+0xa>
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	00002fd9 	.word	0x00002fd9
    11f8:	00002e05 	.word	0x00002e05
    11fc:	00002cf9 	.word	0x00002cf9
    1200:	200000c9 	.word	0x200000c9
    1204:	20000268 	.word	0x20000268

00001208 <switch_off_ORB>:

void switch_off_ORB()
{
    1208:	b510      	push	{r4, lr}
	temp_compare_array_2[0] = 255;//Left -- R
    120a:	4b09      	ldr	r3, [pc, #36]	; (1230 <switch_off_ORB+0x28>)
    120c:	22ff      	movs	r2, #255	; 0xff
    120e:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    1210:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    1212:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 255;//Right -- R
    1214:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right  -- G
    1216:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    1218:	715a      	strb	r2, [r3, #5]
	initializing_pin_array();
    121a:	4b06      	ldr	r3, [pc, #24]	; (1234 <switch_off_ORB+0x2c>)
    121c:	4798      	blx	r3
	increasing_sort_tag();
    121e:	4b06      	ldr	r3, [pc, #24]	; (1238 <switch_off_ORB+0x30>)
    1220:	4798      	blx	r3
	transfer_temp();
    1222:	4b06      	ldr	r3, [pc, #24]	; (123c <switch_off_ORB+0x34>)
    1224:	4798      	blx	r3
	update_compare_array = true;
    1226:	2201      	movs	r2, #1
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <switch_off_ORB+0x38>)
    122a:	701a      	strb	r2, [r3, #0]
    122c:	bd10      	pop	{r4, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	20000268 	.word	0x20000268
    1234:	00002fd9 	.word	0x00002fd9
    1238:	00002e05 	.word	0x00002e05
    123c:	00002cf9 	.word	0x00002cf9
    1240:	200000c9 	.word	0x200000c9

00001244 <read_sensor>:
static const  uint8_t sensor_analog_inputs[NO_SENSORS] = SENSORS_AI;
uint8_t sensor_outputs[4];

//0-- sensor-1 , 1-- sensor-2 , 2-- sensor-3 , 3- Volatge_mtr
uint8_t read_sensor(uint8_t sensor_no)
{
    1244:	b510      	push	{r4, lr}
	uint8_t output_single_adc = 0;
	output_single_adc = adc_start_read_result(sensor_analog_inputs[sensor_no]);
    1246:	4b03      	ldr	r3, [pc, #12]	; (1254 <read_sensor+0x10>)
    1248:	5c18      	ldrb	r0, [r3, r0]
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <read_sensor+0x14>)
    124c:	4798      	blx	r3
	return output_single_adc;
    124e:	b2c0      	uxtb	r0, r0
}
    1250:	bd10      	pop	{r4, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	00003e88 	.word	0x00003e88
    1258:	000012e5 	.word	0x000012e5

0000125c <configure_adc>:
struct adc_module adc_instance;
uint16_t* adc_result = NULL;


void configure_adc()
{
    125c:	b510      	push	{r4, lr}
    125e:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1260:	4668      	mov	r0, sp
    1262:	4b19      	ldr	r3, [pc, #100]	; (12c8 <configure_adc+0x6c>)
    1264:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    1266:	2002      	movs	r0, #2
    1268:	4b18      	ldr	r3, [pc, #96]	; (12cc <configure_adc+0x70>)
    126a:	4798      	blx	r3
    126c:	4b18      	ldr	r3, [pc, #96]	; (12d0 <configure_adc+0x74>)
    126e:	6018      	str	r0, [r3, #0]
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference			= ADC_REFERENCE_AREFA;
    1270:	2303      	movs	r3, #3
    1272:	466a      	mov	r2, sp
    1274:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV512;
    1276:	23e0      	movs	r3, #224	; 0xe0
    1278:	00db      	lsls	r3, r3, #3
    127a:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		= 6;
    127c:	2306      	movs	r3, #6
    127e:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1280:	23c0      	movs	r3, #192	; 0xc0
    1282:	015b      	lsls	r3, r3, #5
    1284:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    1286:	2330      	movs	r3, #48	; 0x30
    1288:	7113      	strb	r3, [r2, #4]
	conf_adc.left_adjust		= true;
    128a:	3b2f      	subs	r3, #47	; 0x2f
    128c:	7493      	strb	r3, [r2, #18]
	//conf_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
	//conf_adc.divide_result      = ADC_DIVIDE_RESULT_16;
	//conf_adc.freerunning        = true;
	adc_init(&adc_instance, ADC, &conf_adc);
    128e:	4c11      	ldr	r4, [pc, #68]	; (12d4 <configure_adc+0x78>)
    1290:	4911      	ldr	r1, [pc, #68]	; (12d8 <configure_adc+0x7c>)
    1292:	0020      	movs	r0, r4
    1294:	4b11      	ldr	r3, [pc, #68]	; (12dc <configure_adc+0x80>)
    1296:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1298:	6822      	ldr	r2, [r4, #0]
    129a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    129c:	b25b      	sxtb	r3, r3
    129e:	2b00      	cmp	r3, #0
    12a0:	dbfb      	blt.n	129a <configure_adc+0x3e>
    12a2:	2180      	movs	r1, #128	; 0x80
    12a4:	0209      	lsls	r1, r1, #8
    12a6:	4b0e      	ldr	r3, [pc, #56]	; (12e0 <configure_adc+0x84>)
    12a8:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    12aa:	230f      	movs	r3, #15
    12ac:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    12ae:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    12b0:	7813      	ldrb	r3, [r2, #0]
    12b2:	2102      	movs	r1, #2
    12b4:	430b      	orrs	r3, r1
    12b6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <configure_adc+0x78>)
    12ba:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12bc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12be:	b25b      	sxtb	r3, r3
    12c0:	2b00      	cmp	r3, #0
    12c2:	dbfb      	blt.n	12bc <configure_adc+0x60>
	adc_enable(&adc_instance);
}
    12c4:	b00c      	add	sp, #48	; 0x30
    12c6:	bd10      	pop	{r4, pc}
    12c8:	00000805 	.word	0x00000805
    12cc:	00003b99 	.word	0x00003b99
    12d0:	200000ac 	.word	0x200000ac
    12d4:	2000017c 	.word	0x2000017c
    12d8:	42002000 	.word	0x42002000
    12dc:	0000084d 	.word	0x0000084d
    12e0:	e000e100 	.word	0xe000e100

000012e4 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    12e4:	b530      	push	{r4, r5, lr}
    12e6:	b083      	sub	sp, #12
	
	volatile uint16_t temp = 0;
    12e8:	2300      	movs	r3, #0
    12ea:	466a      	mov	r2, sp
    12ec:	80d3      	strh	r3, [r2, #6]
	volatile uint32_t temp_2 = 0;
    12ee:	9300      	str	r3, [sp, #0]
	Adc *const adc_module = module_inst->hw;
    12f0:	4b2f      	ldr	r3, [pc, #188]	; (13b0 <adc_start_read_result+0xcc>)
    12f2:	6819      	ldr	r1, [r3, #0]
    12f4:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    12f6:	b25b      	sxtb	r3, r3
    12f8:	2b00      	cmp	r3, #0
    12fa:	dbfb      	blt.n	12f4 <adc_start_read_result+0x10>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    12fc:	690b      	ldr	r3, [r1, #16]
    12fe:	221f      	movs	r2, #31
    1300:	4393      	bics	r3, r2
    1302:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1304:	6108      	str	r0, [r1, #16]
    1306:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1308:	b25b      	sxtb	r3, r3
    130a:	2b00      	cmp	r3, #0
    130c:	dbfb      	blt.n	1306 <adc_start_read_result+0x22>
    130e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1310:	b25b      	sxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	dbfb      	blt.n	130e <adc_start_read_result+0x2a>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1316:	7b0b      	ldrb	r3, [r1, #12]
    1318:	2202      	movs	r2, #2
    131a:	4313      	orrs	r3, r2
    131c:	730b      	strb	r3, [r1, #12]
    131e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1320:	b25b      	sxtb	r3, r3
    1322:	2b00      	cmp	r3, #0
    1324:	dbfb      	blt.n	131e <adc_start_read_result+0x3a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1326:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1328:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    132a:	2402      	movs	r4, #2
    132c:	e001      	b.n	1332 <adc_start_read_result+0x4e>
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    132e:	4210      	tst	r0, r2
    1330:	d10a      	bne.n	1348 <adc_start_read_result+0x64>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1332:	7e0b      	ldrb	r3, [r1, #24]
    1334:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1336:	0002      	movs	r2, r0
    1338:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    133a:	421d      	tst	r5, r3
    133c:	d000      	beq.n	1340 <adc_start_read_result+0x5c>
		status_flags |= ADC_STATUS_WINDOW;
    133e:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1340:	421c      	tst	r4, r3
    1342:	d0f4      	beq.n	132e <adc_start_read_result+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    1344:	432a      	orrs	r2, r5
    1346:	e7f2      	b.n	132e <adc_start_read_result+0x4a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1348:	7e0a      	ldrb	r2, [r1, #24]
    134a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    134c:	2301      	movs	r3, #1
    134e:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1350:	0750      	lsls	r0, r2, #29
    1352:	d501      	bpl.n	1358 <adc_start_read_result+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    1354:	2002      	movs	r0, #2
    1356:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1358:	0792      	lsls	r2, r2, #30
    135a:	d501      	bpl.n	1360 <adc_start_read_result+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    135c:	2204      	movs	r2, #4
    135e:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1360:	07db      	lsls	r3, r3, #31
    1362:	d408      	bmi.n	1376 <adc_start_read_result+0x92>
	
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1364:	4b13      	ldr	r3, [pc, #76]	; (13b4 <adc_start_read_result+0xd0>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	881a      	ldrh	r2, [r3, #0]
    136a:	466b      	mov	r3, sp
    136c:	80da      	strh	r2, [r3, #6]

 	return temp;
    136e:	88d8      	ldrh	r0, [r3, #6]
    1370:	b280      	uxth	r0, r0
}
    1372:	b003      	add	sp, #12
    1374:	bd30      	pop	{r4, r5, pc}
    1376:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1378:	b25b      	sxtb	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	dbfb      	blt.n	1376 <adc_start_read_result+0x92>
	adc_read(&adc_instance, adc_result);
    137e:	4b0d      	ldr	r3, [pc, #52]	; (13b4 <adc_start_read_result+0xd0>)
    1380:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1382:	8b4a      	ldrh	r2, [r1, #26]
    1384:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1386:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <adc_start_read_result+0xcc>)
    1388:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    138a:	2301      	movs	r3, #1
    138c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    138e:	7e0a      	ldrb	r2, [r1, #24]
    1390:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1392:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1394:	0750      	lsls	r0, r2, #29
    1396:	d501      	bpl.n	139c <adc_start_read_result+0xb8>
		status_flags |= ADC_STATUS_WINDOW;
    1398:	2002      	movs	r0, #2
    139a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    139c:	0792      	lsls	r2, r2, #30
    139e:	d501      	bpl.n	13a4 <adc_start_read_result+0xc0>
		status_flags |= ADC_STATUS_OVERRUN;
    13a0:	2204      	movs	r2, #4
    13a2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    13a4:	075b      	lsls	r3, r3, #29
    13a6:	d5dd      	bpl.n	1364 <adc_start_read_result+0x80>
	adc_module->INTFLAG.reg = int_flags;
    13a8:	2302      	movs	r3, #2
    13aa:	760b      	strb	r3, [r1, #24]
    13ac:	e7da      	b.n	1364 <adc_start_read_result+0x80>
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	2000017c 	.word	0x2000017c
    13b4:	200000ac 	.word	0x200000ac

000013b8 <sensor_init>:
	
	
}

void sensor_init()
{
    13b8:	b510      	push	{r4, lr}
	//Enable Analog input 
	//Pull ADC inputs low
	
	configure_adc();
    13ba:	4b01      	ldr	r3, [pc, #4]	; (13c0 <sensor_init+0x8>)
    13bc:	4798      	blx	r3
	//configure_adc_inputs();
    13be:	bd10      	pop	{r4, pc}
    13c0:	0000125d 	.word	0x0000125d

000013c4 <enable_super_servo>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    13c4:	4b05      	ldr	r3, [pc, #20]	; (13dc <enable_super_servo+0x18>)
    13c6:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    13c8:	2102      	movs	r1, #2
    13ca:	6893      	ldr	r3, [r2, #8]
    13cc:	4219      	tst	r1, r3
    13ce:	d1fc      	bne.n	13ca <enable_super_servo+0x6>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    13d0:	6813      	ldr	r3, [r2, #0]
    13d2:	2102      	movs	r1, #2
    13d4:	430b      	orrs	r3, r1
    13d6:	6013      	str	r3, [r2, #0]
struct tcc_module tcc_ss_instance0;

void enable_super_servo()
{
	tcc_enable(&tcc_ss_instance0);
}
    13d8:	4770      	bx	lr
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	2000019c 	.word	0x2000019c

000013e0 <super_servo_tcc_init>:
{
	tcc_disable(&tcc_ss_instance0);
}

void super_servo_tcc_init()
{
    13e0:	b530      	push	{r4, r5, lr}
    13e2:	b0ab      	sub	sp, #172	; 0xac
	struct tcc_config config_tcc_ss;
	tcc_get_config_defaults(&config_tcc_ss, TCC0);
    13e4:	4d1d      	ldr	r5, [pc, #116]	; (145c <super_servo_tcc_init+0x7c>)
    13e6:	ac01      	add	r4, sp, #4
    13e8:	0029      	movs	r1, r5
    13ea:	0020      	movs	r0, r4
    13ec:	4b1c      	ldr	r3, [pc, #112]	; (1460 <super_servo_tcc_init+0x80>)
    13ee:	4798      	blx	r3
	
	config_tcc_ss.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
    13f0:	2302      	movs	r3, #2
    13f2:	72e3      	strb	r3, [r4, #11]
	config_tcc_ss.counter.period = 0x9C40;
    13f4:	4a1b      	ldr	r2, [pc, #108]	; (1464 <super_servo_tcc_init+0x84>)
    13f6:	6062      	str	r2, [r4, #4]
	config_tcc_ss.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    13f8:	7623      	strb	r3, [r4, #24]
	
	config_tcc_ss.compare.wave_polarity[SERVO_1_CH] = TCC_WAVE_POLARITY_0;
    13fa:	2300      	movs	r3, #0
    13fc:	7523      	strb	r3, [r4, #20]
	config_tcc_ss.compare.wave_polarity[SERVO_2_CH] = TCC_WAVE_POLARITY_0;
    13fe:	7563      	strb	r3, [r4, #21]
	config_tcc_ss.compare.wave_polarity[SERVO_3_CH] = TCC_WAVE_POLARITY_0;
    1400:	75a3      	strb	r3, [r4, #22]
	config_tcc_ss.compare.wave_polarity[SERVO_4_CH] = TCC_WAVE_POLARITY_0;
    1402:	75e3      	strb	r3, [r4, #23]
	
	config_tcc_ss.compare.match[SERVO_1_CH] = 2000;
    1404:	22fa      	movs	r2, #250	; 0xfa
    1406:	00d2      	lsls	r2, r2, #3
    1408:	61e2      	str	r2, [r4, #28]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_1_WO] = true;
    140a:	3301      	adds	r3, #1
    140c:	2198      	movs	r1, #152	; 0x98
    140e:	5463      	strb	r3, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_1_WO]        = PIN_PA04F_TCC0_WO0; //this is no longer correct--- should be now
    1410:	3994      	subs	r1, #148	; 0x94
    1412:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_1_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    1414:	4914      	ldr	r1, [pc, #80]	; (1468 <super_servo_tcc_init+0x88>)
    1416:	67a1      	str	r1, [r4, #120]	; 0x78
	
	config_tcc_ss.compare.match[SERVO_2_CH] = 3000;
    1418:	4914      	ldr	r1, [pc, #80]	; (146c <super_servo_tcc_init+0x8c>)
    141a:	6221      	str	r1, [r4, #32]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_2_WO] = true;
    141c:	2199      	movs	r1, #153	; 0x99
    141e:	5463      	strb	r3, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_2_WO]        = PIN_PA05F_TCC0_WO1; //this is no longer correct--- should be now
    1420:	3994      	subs	r1, #148	; 0x94
    1422:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_2_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    1424:	4912      	ldr	r1, [pc, #72]	; (1470 <super_servo_tcc_init+0x90>)
    1426:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	
	config_tcc_ss.compare.match[SERVO_3_CH] = 4000;
    1428:	21fa      	movs	r1, #250	; 0xfa
    142a:	0109      	lsls	r1, r1, #4
    142c:	6261      	str	r1, [r4, #36]	; 0x24
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_3_WO] = true;
    142e:	219a      	movs	r1, #154	; 0x9a
    1430:	5463      	strb	r3, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_3_WO]        = PIN_PA06F_TCC0_WO2; //this is no longer correct--- should be now
    1432:	3994      	subs	r1, #148	; 0x94
    1434:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_3_WO]    = PINMUX_PA06F_TCC0_WO2; // this is no longer correct --- should be now
    1436:	480f      	ldr	r0, [pc, #60]	; (1474 <super_servo_tcc_init+0x94>)
    1438:	317a      	adds	r1, #122	; 0x7a
    143a:	5060      	str	r0, [r4, r1]
	
	config_tcc_ss.compare.match[SERVO_4_CH] = 2000;
    143c:	62a2      	str	r2, [r4, #40]	; 0x28
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_4_WO] = true;
    143e:	229b      	movs	r2, #155	; 0x9b
    1440:	54a3      	strb	r3, [r4, r2]
	config_tcc_ss.pins.wave_out_pin[SERVO_4_WO]        = PIN_PA07F_TCC0_WO3; //this is no longer correct--- should be now
    1442:	3306      	adds	r3, #6
    1444:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_4_WO]    = PINMUX_PA07F_TCC0_WO3; // this is no longer correct --- should be now
    1446:	4a0c      	ldr	r2, [pc, #48]	; (1478 <super_servo_tcc_init+0x98>)
    1448:	337d      	adds	r3, #125	; 0x7d
    144a:	50e2      	str	r2, [r4, r3]
	
	tcc_init(&tcc_ss_instance0, TCC0, &config_tcc_ss);
    144c:	0022      	movs	r2, r4
    144e:	0029      	movs	r1, r5
    1450:	480a      	ldr	r0, [pc, #40]	; (147c <super_servo_tcc_init+0x9c>)
    1452:	4b0b      	ldr	r3, [pc, #44]	; (1480 <super_servo_tcc_init+0xa0>)
    1454:	4798      	blx	r3
	
}
    1456:	b02b      	add	sp, #172	; 0xac
    1458:	bd30      	pop	{r4, r5, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	42001400 	.word	0x42001400
    1460:	000016bd 	.word	0x000016bd
    1464:	00009c40 	.word	0x00009c40
    1468:	00040005 	.word	0x00040005
    146c:	00000bb8 	.word	0x00000bb8
    1470:	00050005 	.word	0x00050005
    1474:	00060005 	.word	0x00060005
    1478:	00070005 	.word	0x00070005
    147c:	2000019c 	.word	0x2000019c
    1480:	000017f9 	.word	0x000017f9

00001484 <super_servo_init>:

void super_servo_init()
{
    1484:	b510      	push	{r4, lr}
	super_servo_tcc_init();
    1486:	4b01      	ldr	r3, [pc, #4]	; (148c <super_servo_init+0x8>)
    1488:	4798      	blx	r3
}
    148a:	bd10      	pop	{r4, pc}
    148c:	000013e1 	.word	0x000013e1

00001490 <update_super_servo>:
#include <asf.h>
#include "super_servo_control.h"
#include "super_servo.h"

void update_super_servo(uint8_t servo1 , uint8_t servo2 , uint8_t servo3, uint8_t servo4)
{
    1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1492:	0007      	movs	r7, r0
    1494:	000e      	movs	r6, r1
    1496:	0015      	movs	r5, r2
    1498:	001c      	movs	r4, r3
	static uint8_t prev_servo1 = 0;
	static uint8_t prev_servo2 = 0;
	static uint8_t prev_servo3 = 0;
	static uint8_t prev_servo4 = 0;
	//Servo--1
	if(servo1  != prev_servo1)
    149a:	4b36      	ldr	r3, [pc, #216]	; (1574 <update_super_servo+0xe4>)
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	4283      	cmp	r3, r0
    14a0:	d010      	beq.n	14c4 <update_super_servo+0x34>
	{
		if(servo1 != 255)
    14a2:	28ff      	cmp	r0, #255	; 0xff
    14a4:	d04e      	beq.n	1544 <update_super_servo+0xb4>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*servo1)/254) + 1280));
    14a6:	20dc      	movs	r0, #220	; 0xdc
    14a8:	0100      	lsls	r0, r0, #4
    14aa:	4378      	muls	r0, r7
    14ac:	21fe      	movs	r1, #254	; 0xfe
    14ae:	4b32      	ldr	r3, [pc, #200]	; (1578 <update_super_servo+0xe8>)
    14b0:	4798      	blx	r3
    14b2:	23a0      	movs	r3, #160	; 0xa0
    14b4:	00db      	lsls	r3, r3, #3
    14b6:	18c2      	adds	r2, r0, r3
    14b8:	2100      	movs	r1, #0
    14ba:	4830      	ldr	r0, [pc, #192]	; (157c <update_super_servo+0xec>)
    14bc:	4b30      	ldr	r3, [pc, #192]	; (1580 <update_super_servo+0xf0>)
    14be:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
		}
		prev_servo1 = servo1;
    14c0:	4b2c      	ldr	r3, [pc, #176]	; (1574 <update_super_servo+0xe4>)
    14c2:	701f      	strb	r7, [r3, #0]
	}
	
	//Servo--2
	if(servo2  != prev_servo2)
    14c4:	4b2f      	ldr	r3, [pc, #188]	; (1584 <update_super_servo+0xf4>)
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	42b3      	cmp	r3, r6
    14ca:	d010      	beq.n	14ee <update_super_servo+0x5e>
	{
		if(servo2 != 255)
    14cc:	2eff      	cmp	r6, #255	; 0xff
    14ce:	d03f      	beq.n	1550 <update_super_servo+0xc0>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*servo2)/254) + 1280));
    14d0:	20dc      	movs	r0, #220	; 0xdc
    14d2:	0100      	lsls	r0, r0, #4
    14d4:	4370      	muls	r0, r6
    14d6:	21fe      	movs	r1, #254	; 0xfe
    14d8:	4b27      	ldr	r3, [pc, #156]	; (1578 <update_super_servo+0xe8>)
    14da:	4798      	blx	r3
    14dc:	23a0      	movs	r3, #160	; 0xa0
    14de:	00db      	lsls	r3, r3, #3
    14e0:	18c2      	adds	r2, r0, r3
    14e2:	2101      	movs	r1, #1
    14e4:	4825      	ldr	r0, [pc, #148]	; (157c <update_super_servo+0xec>)
    14e6:	4b26      	ldr	r3, [pc, #152]	; (1580 <update_super_servo+0xf0>)
    14e8:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
		}
		prev_servo2 = servo2;
    14ea:	4b26      	ldr	r3, [pc, #152]	; (1584 <update_super_servo+0xf4>)
    14ec:	701e      	strb	r6, [r3, #0]
	}
	//Servo--3
	if(servo3  != prev_servo3)
    14ee:	4b26      	ldr	r3, [pc, #152]	; (1588 <update_super_servo+0xf8>)
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	42ab      	cmp	r3, r5
    14f4:	d010      	beq.n	1518 <update_super_servo+0x88>
	{
		if(servo3 != 255)
    14f6:	2dff      	cmp	r5, #255	; 0xff
    14f8:	d030      	beq.n	155c <update_super_servo+0xcc>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*servo3)/254) + 1280));
    14fa:	20dc      	movs	r0, #220	; 0xdc
    14fc:	0100      	lsls	r0, r0, #4
    14fe:	4368      	muls	r0, r5
    1500:	21fe      	movs	r1, #254	; 0xfe
    1502:	4b1d      	ldr	r3, [pc, #116]	; (1578 <update_super_servo+0xe8>)
    1504:	4798      	blx	r3
    1506:	23a0      	movs	r3, #160	; 0xa0
    1508:	00db      	lsls	r3, r3, #3
    150a:	18c2      	adds	r2, r0, r3
    150c:	2102      	movs	r1, #2
    150e:	481b      	ldr	r0, [pc, #108]	; (157c <update_super_servo+0xec>)
    1510:	4b1b      	ldr	r3, [pc, #108]	; (1580 <update_super_servo+0xf0>)
    1512:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
		}
		prev_servo3 = servo3;
    1514:	4b1c      	ldr	r3, [pc, #112]	; (1588 <update_super_servo+0xf8>)
    1516:	701d      	strb	r5, [r3, #0]
	}
	//Servo--4
	if(servo4  != prev_servo4)
    1518:	4b1c      	ldr	r3, [pc, #112]	; (158c <update_super_servo+0xfc>)
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	42a3      	cmp	r3, r4
    151e:	d010      	beq.n	1542 <update_super_servo+0xb2>
	{
		if(servo4 != 255)
    1520:	2cff      	cmp	r4, #255	; 0xff
    1522:	d021      	beq.n	1568 <update_super_servo+0xd8>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*servo4)/254) + 1280));
    1524:	20dc      	movs	r0, #220	; 0xdc
    1526:	0100      	lsls	r0, r0, #4
    1528:	4360      	muls	r0, r4
    152a:	21fe      	movs	r1, #254	; 0xfe
    152c:	4b12      	ldr	r3, [pc, #72]	; (1578 <update_super_servo+0xe8>)
    152e:	4798      	blx	r3
    1530:	23a0      	movs	r3, #160	; 0xa0
    1532:	00db      	lsls	r3, r3, #3
    1534:	18c2      	adds	r2, r0, r3
    1536:	2103      	movs	r1, #3
    1538:	4810      	ldr	r0, [pc, #64]	; (157c <update_super_servo+0xec>)
    153a:	4b11      	ldr	r3, [pc, #68]	; (1580 <update_super_servo+0xf0>)
    153c:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
		}
		prev_servo4 = servo4;
    153e:	4b13      	ldr	r3, [pc, #76]	; (158c <update_super_servo+0xfc>)
    1540:	701c      	strb	r4, [r3, #0]
	}
}
    1542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    1544:	2200      	movs	r2, #0
    1546:	2100      	movs	r1, #0
    1548:	480c      	ldr	r0, [pc, #48]	; (157c <update_super_servo+0xec>)
    154a:	4b0d      	ldr	r3, [pc, #52]	; (1580 <update_super_servo+0xf0>)
    154c:	4798      	blx	r3
    154e:	e7b7      	b.n	14c0 <update_super_servo+0x30>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1550:	2200      	movs	r2, #0
    1552:	2101      	movs	r1, #1
    1554:	4809      	ldr	r0, [pc, #36]	; (157c <update_super_servo+0xec>)
    1556:	4b0a      	ldr	r3, [pc, #40]	; (1580 <update_super_servo+0xf0>)
    1558:	4798      	blx	r3
    155a:	e7c6      	b.n	14ea <update_super_servo+0x5a>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    155c:	2200      	movs	r2, #0
    155e:	2102      	movs	r1, #2
    1560:	4806      	ldr	r0, [pc, #24]	; (157c <update_super_servo+0xec>)
    1562:	4b07      	ldr	r3, [pc, #28]	; (1580 <update_super_servo+0xf0>)
    1564:	4798      	blx	r3
    1566:	e7d5      	b.n	1514 <update_super_servo+0x84>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    1568:	2200      	movs	r2, #0
    156a:	2103      	movs	r1, #3
    156c:	4803      	ldr	r0, [pc, #12]	; (157c <update_super_servo+0xec>)
    156e:	4b04      	ldr	r3, [pc, #16]	; (1580 <update_super_servo+0xf0>)
    1570:	4798      	blx	r3
    1572:	e7e4      	b.n	153e <update_super_servo+0xae>
    1574:	200000b0 	.word	0x200000b0
    1578:	00003925 	.word	0x00003925
    157c:	2000019c 	.word	0x2000019c
    1580:	00001b81 	.word	0x00001b81
    1584:	200000b1 	.word	0x200000b1
    1588:	200000b2 	.word	0x200000b2
    158c:	200000b3 	.word	0x200000b3

00001590 <update_super_servo_single>:

void update_super_servo_single(uint8_t port_no ,uint8_t super_servo)
{
    1590:	b510      	push	{r4, lr}
	switch (port_no)
    1592:	2832      	cmp	r0, #50	; 0x32
    1594:	d02c      	beq.n	15f0 <update_super_servo_single+0x60>
    1596:	d913      	bls.n	15c0 <update_super_servo_single+0x30>
    1598:	2833      	cmp	r0, #51	; 0x33
    159a:	d03f      	beq.n	161c <update_super_servo_single+0x8c>
    159c:	2834      	cmp	r0, #52	; 0x34
    159e:	d120      	bne.n	15e2 <update_super_servo_single+0x52>
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
				}
				break;
		case '4':
				if(super_servo != 255)
    15a0:	29ff      	cmp	r1, #255	; 0xff
    15a2:	d051      	beq.n	1648 <update_super_servo_single+0xb8>
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*super_servo)/254) + 1280));
    15a4:	20dc      	movs	r0, #220	; 0xdc
    15a6:	0100      	lsls	r0, r0, #4
    15a8:	4348      	muls	r0, r1
    15aa:	21fe      	movs	r1, #254	; 0xfe
    15ac:	4b29      	ldr	r3, [pc, #164]	; (1654 <update_super_servo_single+0xc4>)
    15ae:	4798      	blx	r3
    15b0:	23a0      	movs	r3, #160	; 0xa0
    15b2:	00db      	lsls	r3, r3, #3
    15b4:	18c2      	adds	r2, r0, r3
    15b6:	2103      	movs	r1, #3
    15b8:	4827      	ldr	r0, [pc, #156]	; (1658 <update_super_servo_single+0xc8>)
    15ba:	4b28      	ldr	r3, [pc, #160]	; (165c <update_super_servo_single+0xcc>)
    15bc:	4798      	blx	r3
    15be:	e010      	b.n	15e2 <update_super_servo_single+0x52>
	switch (port_no)
    15c0:	2831      	cmp	r0, #49	; 0x31
    15c2:	d10e      	bne.n	15e2 <update_super_servo_single+0x52>
				if(super_servo != 255)
    15c4:	29ff      	cmp	r1, #255	; 0xff
    15c6:	d00d      	beq.n	15e4 <update_super_servo_single+0x54>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*super_servo)/254) + 1280));
    15c8:	20dc      	movs	r0, #220	; 0xdc
    15ca:	0100      	lsls	r0, r0, #4
    15cc:	4348      	muls	r0, r1
    15ce:	21fe      	movs	r1, #254	; 0xfe
    15d0:	4b20      	ldr	r3, [pc, #128]	; (1654 <update_super_servo_single+0xc4>)
    15d2:	4798      	blx	r3
    15d4:	23a0      	movs	r3, #160	; 0xa0
    15d6:	00db      	lsls	r3, r3, #3
    15d8:	18c2      	adds	r2, r0, r3
    15da:	2100      	movs	r1, #0
    15dc:	481e      	ldr	r0, [pc, #120]	; (1658 <update_super_servo_single+0xc8>)
    15de:	4b1f      	ldr	r3, [pc, #124]	; (165c <update_super_servo_single+0xcc>)
    15e0:	4798      	blx	r3
				break;	
		default:
				break;
	}
	
    15e2:	bd10      	pop	{r4, pc}
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    15e4:	2200      	movs	r2, #0
    15e6:	2100      	movs	r1, #0
    15e8:	481b      	ldr	r0, [pc, #108]	; (1658 <update_super_servo_single+0xc8>)
    15ea:	4b1c      	ldr	r3, [pc, #112]	; (165c <update_super_servo_single+0xcc>)
    15ec:	4798      	blx	r3
    15ee:	e7f8      	b.n	15e2 <update_super_servo_single+0x52>
				if(super_servo != 255)
    15f0:	29ff      	cmp	r1, #255	; 0xff
    15f2:	d00d      	beq.n	1610 <update_super_servo_single+0x80>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*super_servo)/254) + 1280));
    15f4:	20dc      	movs	r0, #220	; 0xdc
    15f6:	0100      	lsls	r0, r0, #4
    15f8:	4348      	muls	r0, r1
    15fa:	21fe      	movs	r1, #254	; 0xfe
    15fc:	4b15      	ldr	r3, [pc, #84]	; (1654 <update_super_servo_single+0xc4>)
    15fe:	4798      	blx	r3
    1600:	23a0      	movs	r3, #160	; 0xa0
    1602:	00db      	lsls	r3, r3, #3
    1604:	18c2      	adds	r2, r0, r3
    1606:	2101      	movs	r1, #1
    1608:	4813      	ldr	r0, [pc, #76]	; (1658 <update_super_servo_single+0xc8>)
    160a:	4b14      	ldr	r3, [pc, #80]	; (165c <update_super_servo_single+0xcc>)
    160c:	4798      	blx	r3
    160e:	e7e8      	b.n	15e2 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1610:	2200      	movs	r2, #0
    1612:	2101      	movs	r1, #1
    1614:	4810      	ldr	r0, [pc, #64]	; (1658 <update_super_servo_single+0xc8>)
    1616:	4b11      	ldr	r3, [pc, #68]	; (165c <update_super_servo_single+0xcc>)
    1618:	4798      	blx	r3
    161a:	e7e2      	b.n	15e2 <update_super_servo_single+0x52>
				if(super_servo != 255)
    161c:	29ff      	cmp	r1, #255	; 0xff
    161e:	d00d      	beq.n	163c <update_super_servo_single+0xac>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*super_servo)/254) + 1280));
    1620:	20dc      	movs	r0, #220	; 0xdc
    1622:	0100      	lsls	r0, r0, #4
    1624:	4348      	muls	r0, r1
    1626:	21fe      	movs	r1, #254	; 0xfe
    1628:	4b0a      	ldr	r3, [pc, #40]	; (1654 <update_super_servo_single+0xc4>)
    162a:	4798      	blx	r3
    162c:	23a0      	movs	r3, #160	; 0xa0
    162e:	00db      	lsls	r3, r3, #3
    1630:	18c2      	adds	r2, r0, r3
    1632:	2102      	movs	r1, #2
    1634:	4808      	ldr	r0, [pc, #32]	; (1658 <update_super_servo_single+0xc8>)
    1636:	4b09      	ldr	r3, [pc, #36]	; (165c <update_super_servo_single+0xcc>)
    1638:	4798      	blx	r3
    163a:	e7d2      	b.n	15e2 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    163c:	2200      	movs	r2, #0
    163e:	2102      	movs	r1, #2
    1640:	4805      	ldr	r0, [pc, #20]	; (1658 <update_super_servo_single+0xc8>)
    1642:	4b06      	ldr	r3, [pc, #24]	; (165c <update_super_servo_single+0xcc>)
    1644:	4798      	blx	r3
    1646:	e7cc      	b.n	15e2 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    1648:	2200      	movs	r2, #0
    164a:	2103      	movs	r1, #3
    164c:	4802      	ldr	r0, [pc, #8]	; (1658 <update_super_servo_single+0xc8>)
    164e:	4b03      	ldr	r3, [pc, #12]	; (165c <update_super_servo_single+0xcc>)
    1650:	4798      	blx	r3
    1652:	e7c6      	b.n	15e2 <update_super_servo_single+0x52>
    1654:	00003925 	.word	0x00003925
    1658:	2000019c 	.word	0x2000019c
    165c:	00001b81 	.word	0x00001b81

00001660 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1660:	2000      	movs	r0, #0
    1662:	4770      	bx	lr

00001664 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1664:	b530      	push	{r4, r5, lr}
    1666:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1668:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    166a:	2903      	cmp	r1, #3
    166c:	d900      	bls.n	1670 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    166e:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1670:	4d11      	ldr	r5, [pc, #68]	; (16b8 <_tcc_set_compare_value+0x54>)
    1672:	42aa      	cmp	r2, r5
    1674:	d8fb      	bhi.n	166e <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    1676:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    1678:	2b00      	cmp	r3, #0
    167a:	d010      	beq.n	169e <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    167c:	2480      	movs	r4, #128	; 0x80
    167e:	0264      	lsls	r4, r4, #9
    1680:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    1682:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1684:	421c      	tst	r4, r3
    1686:	d1fc      	bne.n	1682 <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1688:	2480      	movs	r4, #128	; 0x80
    168a:	0324      	lsls	r4, r4, #12
    168c:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    168e:	6883      	ldr	r3, [r0, #8]
    1690:	421c      	tst	r4, r3
    1692:	d1fc      	bne.n	168e <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    1694:	311c      	adds	r1, #28
    1696:	0089      	lsls	r1, r1, #2
    1698:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    169a:	2000      	movs	r0, #0
    169c:	e7e7      	b.n	166e <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    169e:	2480      	movs	r4, #128	; 0x80
    16a0:	0064      	lsls	r4, r4, #1
    16a2:	408c      	lsls	r4, r1
    16a4:	6883      	ldr	r3, [r0, #8]
    16a6:	421c      	tst	r4, r3
    16a8:	d1fc      	bne.n	16a4 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    16aa:	3110      	adds	r1, #16
    16ac:	0089      	lsls	r1, r1, #2
    16ae:	1841      	adds	r1, r0, r1
    16b0:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    16b2:	2000      	movs	r0, #0
    16b4:	e7db      	b.n	166e <_tcc_set_compare_value+0xa>
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	00ffffff 	.word	0x00ffffff

000016bc <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    16bc:	2300      	movs	r3, #0
    16be:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    16c0:	4a4c      	ldr	r2, [pc, #304]	; (17f4 <tcc_get_config_defaults+0x138>)
    16c2:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    16c4:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    16c6:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    16c8:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    16ca:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    16cc:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    16ce:	61c3      	str	r3, [r0, #28]
    16d0:	6203      	str	r3, [r0, #32]
    16d2:	6243      	str	r3, [r0, #36]	; 0x24
    16d4:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    16d6:	7503      	strb	r3, [r0, #20]
    16d8:	7543      	strb	r3, [r0, #21]
    16da:	7583      	strb	r3, [r0, #22]
    16dc:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    16de:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    16e0:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    16e2:	7403      	strb	r3, [r0, #16]
    16e4:	7443      	strb	r3, [r0, #17]
    16e6:	7483      	strb	r3, [r0, #18]
    16e8:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    16ea:	222c      	movs	r2, #44	; 0x2c
    16ec:	5483      	strb	r3, [r0, r2]
    16ee:	3201      	adds	r2, #1
    16f0:	5483      	strb	r3, [r0, r2]
    16f2:	3201      	adds	r2, #1
    16f4:	5483      	strb	r3, [r0, r2]
    16f6:	3201      	adds	r2, #1
    16f8:	5483      	strb	r3, [r0, r2]
    16fa:	3201      	adds	r2, #1
    16fc:	5483      	strb	r3, [r0, r2]
    16fe:	3201      	adds	r2, #1
    1700:	5483      	strb	r3, [r0, r2]
    1702:	3201      	adds	r2, #1
    1704:	5483      	strb	r3, [r0, r2]
    1706:	3201      	adds	r2, #1
    1708:	5483      	strb	r3, [r0, r2]
    170a:	3201      	adds	r2, #1
    170c:	5483      	strb	r3, [r0, r2]
    170e:	3201      	adds	r2, #1
    1710:	5483      	strb	r3, [r0, r2]
    1712:	3201      	adds	r2, #1
    1714:	5483      	strb	r3, [r0, r2]
    1716:	3201      	adds	r2, #1
    1718:	5483      	strb	r3, [r0, r2]
    171a:	3201      	adds	r2, #1
    171c:	5483      	strb	r3, [r0, r2]
    171e:	3201      	adds	r2, #1
    1720:	5483      	strb	r3, [r0, r2]
    1722:	3201      	adds	r2, #1
    1724:	5483      	strb	r3, [r0, r2]
    1726:	3201      	adds	r2, #1
    1728:	5483      	strb	r3, [r0, r2]
    172a:	3201      	adds	r2, #1
    172c:	5483      	strb	r3, [r0, r2]
    172e:	3201      	adds	r2, #1
    1730:	5483      	strb	r3, [r0, r2]
    1732:	3201      	adds	r2, #1
    1734:	5483      	strb	r3, [r0, r2]
    1736:	3201      	adds	r2, #1
    1738:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    173a:	3201      	adds	r2, #1
    173c:	5483      	strb	r3, [r0, r2]
    173e:	3201      	adds	r2, #1
    1740:	5483      	strb	r3, [r0, r2]
    1742:	3201      	adds	r2, #1
    1744:	5483      	strb	r3, [r0, r2]
    1746:	3201      	adds	r2, #1
    1748:	5483      	strb	r3, [r0, r2]
    174a:	3201      	adds	r2, #1
    174c:	5483      	strb	r3, [r0, r2]
    174e:	3201      	adds	r2, #1
    1750:	5483      	strb	r3, [r0, r2]
    1752:	3201      	adds	r2, #1
    1754:	5483      	strb	r3, [r0, r2]
    1756:	3201      	adds	r2, #1
    1758:	5483      	strb	r3, [r0, r2]
    175a:	3201      	adds	r2, #1
    175c:	5483      	strb	r3, [r0, r2]
    175e:	3201      	adds	r2, #1
    1760:	5483      	strb	r3, [r0, r2]
    1762:	3201      	adds	r2, #1
    1764:	5483      	strb	r3, [r0, r2]
    1766:	3201      	adds	r2, #1
    1768:	5483      	strb	r3, [r0, r2]
    176a:	3201      	adds	r2, #1
    176c:	5483      	strb	r3, [r0, r2]
    176e:	3201      	adds	r2, #1
    1770:	5483      	strb	r3, [r0, r2]
    1772:	3201      	adds	r2, #1
    1774:	5483      	strb	r3, [r0, r2]
    1776:	3201      	adds	r2, #1
    1778:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    177a:	3201      	adds	r2, #1
    177c:	5483      	strb	r3, [r0, r2]
    177e:	3201      	adds	r2, #1
    1780:	5483      	strb	r3, [r0, r2]
    1782:	3201      	adds	r2, #1
    1784:	5483      	strb	r3, [r0, r2]
    1786:	3201      	adds	r2, #1
    1788:	5483      	strb	r3, [r0, r2]
    178a:	3201      	adds	r2, #1
    178c:	5483      	strb	r3, [r0, r2]
    178e:	3201      	adds	r2, #1
    1790:	5483      	strb	r3, [r0, r2]
    1792:	3201      	adds	r2, #1
    1794:	5483      	strb	r3, [r0, r2]
    1796:	3201      	adds	r2, #1
    1798:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    179a:	3241      	adds	r2, #65	; 0x41
    179c:	5483      	strb	r3, [r0, r2]
    179e:	6583      	str	r3, [r0, #88]	; 0x58
    17a0:	6783      	str	r3, [r0, #120]	; 0x78
    17a2:	3201      	adds	r2, #1
    17a4:	5483      	strb	r3, [r0, r2]
    17a6:	65c3      	str	r3, [r0, #92]	; 0x5c
    17a8:	67c3      	str	r3, [r0, #124]	; 0x7c
    17aa:	3201      	adds	r2, #1
    17ac:	5483      	strb	r3, [r0, r2]
    17ae:	6603      	str	r3, [r0, #96]	; 0x60
    17b0:	3a1a      	subs	r2, #26
    17b2:	5083      	str	r3, [r0, r2]
    17b4:	321b      	adds	r2, #27
    17b6:	5483      	strb	r3, [r0, r2]
    17b8:	6643      	str	r3, [r0, #100]	; 0x64
    17ba:	3a17      	subs	r2, #23
    17bc:	5083      	str	r3, [r0, r2]
    17be:	3218      	adds	r2, #24
    17c0:	5483      	strb	r3, [r0, r2]
    17c2:	6683      	str	r3, [r0, #104]	; 0x68
    17c4:	3a14      	subs	r2, #20
    17c6:	5083      	str	r3, [r0, r2]
    17c8:	3215      	adds	r2, #21
    17ca:	5483      	strb	r3, [r0, r2]
    17cc:	66c3      	str	r3, [r0, #108]	; 0x6c
    17ce:	3a11      	subs	r2, #17
    17d0:	5083      	str	r3, [r0, r2]
    17d2:	3212      	adds	r2, #18
    17d4:	5483      	strb	r3, [r0, r2]
    17d6:	6703      	str	r3, [r0, #112]	; 0x70
    17d8:	3a0e      	subs	r2, #14
    17da:	5083      	str	r3, [r0, r2]
    17dc:	320f      	adds	r2, #15
    17de:	5483      	strb	r3, [r0, r2]
    17e0:	6743      	str	r3, [r0, #116]	; 0x74
    17e2:	3a0b      	subs	r2, #11
    17e4:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    17e6:	2101      	movs	r1, #1
    17e8:	320c      	adds	r2, #12
    17ea:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    17ec:	3201      	adds	r2, #1
    17ee:	5483      	strb	r3, [r0, r2]
}
    17f0:	4770      	bx	lr
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	00ffffff 	.word	0x00ffffff

000017f8 <tcc_init>:
{
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fa:	46de      	mov	lr, fp
    17fc:	4657      	mov	r7, sl
    17fe:	464e      	mov	r6, r9
    1800:	4645      	mov	r5, r8
    1802:	b5e0      	push	{r5, r6, r7, lr}
    1804:	b08d      	sub	sp, #52	; 0x34
    1806:	0006      	movs	r6, r0
    1808:	000c      	movs	r4, r1
    180a:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    180c:	0008      	movs	r0, r1
    180e:	4bcd      	ldr	r3, [pc, #820]	; (1b44 <tcc_init+0x34c>)
    1810:	4798      	blx	r3
    1812:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    1814:	49cc      	ldr	r1, [pc, #816]	; (1b48 <tcc_init+0x350>)
    1816:	6a0a      	ldr	r2, [r1, #32]
    1818:	2020      	movs	r0, #32
    181a:	4302      	orrs	r2, r0
    181c:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    181e:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1820:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1822:	0792      	lsls	r2, r2, #30
    1824:	d506      	bpl.n	1834 <tcc_init+0x3c>
}
    1826:	b00d      	add	sp, #52	; 0x34
    1828:	bc3c      	pop	{r2, r3, r4, r5}
    182a:	4690      	mov	r8, r2
    182c:	4699      	mov	r9, r3
    182e:	46a2      	mov	sl, r4
    1830:	46ab      	mov	fp, r5
    1832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1834:	6822      	ldr	r2, [r4, #0]
    1836:	2701      	movs	r7, #1
    1838:	4017      	ands	r7, r2
    183a:	d1f4      	bne.n	1826 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    183c:	4ac3      	ldr	r2, [pc, #780]	; (1b4c <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    183e:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    1840:	6829      	ldr	r1, [r5, #0]
    1842:	4291      	cmp	r1, r2
    1844:	d8ef      	bhi.n	1826 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    1846:	6869      	ldr	r1, [r5, #4]
    1848:	4291      	cmp	r1, r2
    184a:	d8ec      	bhi.n	1826 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    184c:	69e9      	ldr	r1, [r5, #28]
    184e:	4291      	cmp	r1, r2
    1850:	d900      	bls.n	1854 <tcc_init+0x5c>
    1852:	e18b      	b.n	1b6c <tcc_init+0x374>
    1854:	6a29      	ldr	r1, [r5, #32]
    1856:	4291      	cmp	r1, r2
    1858:	d900      	bls.n	185c <tcc_init+0x64>
    185a:	e189      	b.n	1b70 <tcc_init+0x378>
    185c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    185e:	4291      	cmp	r1, r2
    1860:	d900      	bls.n	1864 <tcc_init+0x6c>
    1862:	e187      	b.n	1b74 <tcc_init+0x37c>
    1864:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1866:	4291      	cmp	r1, r2
    1868:	d900      	bls.n	186c <tcc_init+0x74>
    186a:	e185      	b.n	1b78 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    186c:	7c2a      	ldrb	r2, [r5, #16]
    186e:	3a01      	subs	r2, #1
    1870:	4250      	negs	r0, r2
    1872:	4150      	adcs	r0, r2
    1874:	0602      	lsls	r2, r0, #24
    1876:	9201      	str	r2, [sp, #4]
    1878:	7c6a      	ldrb	r2, [r5, #17]
    187a:	2a01      	cmp	r2, #1
    187c:	d031      	beq.n	18e2 <tcc_init+0xea>
    187e:	7caa      	ldrb	r2, [r5, #18]
    1880:	2a01      	cmp	r2, #1
    1882:	d034      	beq.n	18ee <tcc_init+0xf6>
    1884:	7cea      	ldrb	r2, [r5, #19]
    1886:	2a01      	cmp	r2, #1
    1888:	d037      	beq.n	18fa <tcc_init+0x102>
	if (config->run_in_standby) {
    188a:	22a1      	movs	r2, #161	; 0xa1
    188c:	5caa      	ldrb	r2, [r5, r2]
    188e:	2a00      	cmp	r2, #0
    1890:	d004      	beq.n	189c <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1892:	2280      	movs	r2, #128	; 0x80
    1894:	0112      	lsls	r2, r2, #4
    1896:	9901      	ldr	r1, [sp, #4]
    1898:	4311      	orrs	r1, r2
    189a:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    189c:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    189e:	1e51      	subs	r1, r2, #1
    18a0:	418a      	sbcs	r2, r1
    18a2:	0092      	lsls	r2, r2, #2
    18a4:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    18a6:	7a6a      	ldrb	r2, [r5, #9]
    18a8:	2a01      	cmp	r2, #1
    18aa:	d02c      	beq.n	1906 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    18ac:	2235      	movs	r2, #53	; 0x35
    18ae:	5caa      	ldrb	r2, [r5, r2]
    18b0:	2a03      	cmp	r2, #3
    18b2:	d900      	bls.n	18b6 <tcc_init+0xbe>
    18b4:	e162      	b.n	1b7c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    18b6:	212c      	movs	r1, #44	; 0x2c
    18b8:	5c69      	ldrb	r1, [r5, r1]
    18ba:	290f      	cmp	r1, #15
    18bc:	d900      	bls.n	18c0 <tcc_init+0xc8>
    18be:	e15d      	b.n	1b7c <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    18c0:	7b28      	ldrb	r0, [r5, #12]
    18c2:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    18c4:	7ae8      	ldrb	r0, [r5, #11]
    18c6:	9005      	str	r0, [sp, #20]
    18c8:	202d      	movs	r0, #45	; 0x2d
    18ca:	4682      	mov	sl, r0
    18cc:	44aa      	add	sl, r5
    18ce:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    18d0:	9702      	str	r7, [sp, #8]
    18d2:	4684      	mov	ip, r0
    18d4:	9606      	str	r6, [sp, #24]
    18d6:	000e      	movs	r6, r1
    18d8:	46a0      	mov	r8, r4
    18da:	4654      	mov	r4, sl
    18dc:	46a9      	mov	r9, r5
    18de:	9307      	str	r3, [sp, #28]
    18e0:	e047      	b.n	1972 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    18e2:	2280      	movs	r2, #128	; 0x80
    18e4:	0492      	lsls	r2, r2, #18
    18e6:	9901      	ldr	r1, [sp, #4]
    18e8:	4311      	orrs	r1, r2
    18ea:	9101      	str	r1, [sp, #4]
    18ec:	e7c7      	b.n	187e <tcc_init+0x86>
    18ee:	2280      	movs	r2, #128	; 0x80
    18f0:	04d2      	lsls	r2, r2, #19
    18f2:	9901      	ldr	r1, [sp, #4]
    18f4:	4311      	orrs	r1, r2
    18f6:	9101      	str	r1, [sp, #4]
    18f8:	e7c4      	b.n	1884 <tcc_init+0x8c>
    18fa:	2280      	movs	r2, #128	; 0x80
    18fc:	0512      	lsls	r2, r2, #20
    18fe:	9901      	ldr	r1, [sp, #4]
    1900:	4311      	orrs	r1, r2
    1902:	9101      	str	r1, [sp, #4]
    1904:	e7c1      	b.n	188a <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    1906:	9903      	ldr	r1, [sp, #12]
    1908:	4311      	orrs	r1, r2
    190a:	9103      	str	r1, [sp, #12]
    190c:	e7ce      	b.n	18ac <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    190e:	0292      	lsls	r2, r2, #10
    1910:	25c0      	movs	r5, #192	; 0xc0
    1912:	012d      	lsls	r5, r5, #4
    1914:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1916:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    1918:	790d      	ldrb	r5, [r1, #4]
    191a:	2603      	movs	r6, #3
    191c:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    191e:	4332      	orrs	r2, r6
    1920:	4655      	mov	r5, sl
    1922:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1924:	794e      	ldrb	r6, [r1, #5]
    1926:	0176      	lsls	r6, r6, #5
    1928:	2560      	movs	r5, #96	; 0x60
    192a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    192c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    192e:	798d      	ldrb	r5, [r1, #6]
    1930:	022d      	lsls	r5, r5, #8
    1932:	26c0      	movs	r6, #192	; 0xc0
    1934:	00b6      	lsls	r6, r6, #2
    1936:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1938:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    193a:	79cd      	ldrb	r5, [r1, #7]
    193c:	032d      	lsls	r5, r5, #12
    193e:	26e0      	movs	r6, #224	; 0xe0
    1940:	01f6      	lsls	r6, r6, #7
    1942:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1944:	432a      	orrs	r2, r5
    1946:	4310      	orrs	r0, r2
    1948:	4303      	orrs	r3, r0
    194a:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    194c:	ab08      	add	r3, sp, #32
    194e:	4662      	mov	r2, ip
    1950:	2008      	movs	r0, #8
    1952:	181b      	adds	r3, r3, r0
    1954:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1956:	2a04      	cmp	r2, #4
    1958:	d028      	beq.n	19ac <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    195a:	7c8a      	ldrb	r2, [r1, #18]
    195c:	2a03      	cmp	r2, #3
    195e:	d900      	bls.n	1962 <tcc_init+0x16a>
    1960:	e10c      	b.n	1b7c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    1962:	7a4e      	ldrb	r6, [r1, #9]
    1964:	340a      	adds	r4, #10
    1966:	2304      	movs	r3, #4
    1968:	469a      	mov	sl, r3
    196a:	44d4      	add	ip, sl
    196c:	2e0f      	cmp	r6, #15
    196e:	d900      	bls.n	1972 <tcc_init+0x17a>
    1970:	e104      	b.n	1b7c <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1972:	0636      	lsls	r6, r6, #24
    1974:	23f0      	movs	r3, #240	; 0xf0
    1976:	051b      	lsls	r3, r3, #20
    1978:	401e      	ands	r6, r3
    197a:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    197c:	7825      	ldrb	r5, [r4, #0]
    197e:	042d      	lsls	r5, r5, #16
    1980:	23ff      	movs	r3, #255	; 0xff
    1982:	041b      	lsls	r3, r3, #16
    1984:	401d      	ands	r5, r3
    1986:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1988:	7863      	ldrb	r3, [r4, #1]
    198a:	2080      	movs	r0, #128	; 0x80
    198c:	2b00      	cmp	r3, #0
    198e:	d100      	bne.n	1992 <tcc_init+0x19a>
    1990:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1992:	788f      	ldrb	r7, [r1, #2]
    1994:	2308      	movs	r3, #8
    1996:	2f00      	cmp	r7, #0
    1998:	d100      	bne.n	199c <tcc_init+0x1a4>
    199a:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    199c:	78cf      	ldrb	r7, [r1, #3]
    199e:	46bb      	mov	fp, r7
    19a0:	2710      	movs	r7, #16
    19a2:	465d      	mov	r5, fp
    19a4:	2d00      	cmp	r5, #0
    19a6:	d1b2      	bne.n	190e <tcc_init+0x116>
    19a8:	9f02      	ldr	r7, [sp, #8]
    19aa:	e7b0      	b.n	190e <tcc_init+0x116>
    19ac:	9e06      	ldr	r6, [sp, #24]
    19ae:	4644      	mov	r4, r8
    19b0:	464d      	mov	r5, r9
    19b2:	9b07      	ldr	r3, [sp, #28]
    19b4:	4648      	mov	r0, r9
    19b6:	3050      	adds	r0, #80	; 0x50
    19b8:	4649      	mov	r1, r9
    19ba:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    19bc:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    19be:	2780      	movs	r7, #128	; 0x80
    19c0:	027f      	lsls	r7, r7, #9
    19c2:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    19c4:	2701      	movs	r7, #1
    19c6:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    19c8:	2702      	movs	r7, #2
    19ca:	37ff      	adds	r7, #255	; 0xff
    19cc:	46ba      	mov	sl, r7
    19ce:	001f      	movs	r7, r3
    19d0:	0013      	movs	r3, r2
    19d2:	46a0      	mov	r8, r4
    19d4:	003c      	movs	r4, r7
    19d6:	e007      	b.n	19e8 <tcc_init+0x1f0>
    19d8:	4657      	mov	r7, sl
    19da:	4097      	lsls	r7, r2
    19dc:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    19de:	3201      	adds	r2, #1
    19e0:	3001      	adds	r0, #1
    19e2:	3102      	adds	r1, #2
    19e4:	2a08      	cmp	r2, #8
    19e6:	d00e      	beq.n	1a06 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    19e8:	7807      	ldrb	r7, [r0, #0]
    19ea:	2f00      	cmp	r7, #0
    19ec:	d002      	beq.n	19f4 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    19ee:	4667      	mov	r7, ip
    19f0:	4097      	lsls	r7, r2
    19f2:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    19f4:	780f      	ldrb	r7, [r1, #0]
    19f6:	2f00      	cmp	r7, #0
    19f8:	d0f1      	beq.n	19de <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    19fa:	2f02      	cmp	r7, #2
    19fc:	d0ec      	beq.n	19d8 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    19fe:	464f      	mov	r7, r9
    1a00:	4097      	lsls	r7, r2
    1a02:	433b      	orrs	r3, r7
    1a04:	e7eb      	b.n	19de <tcc_init+0x1e6>
    1a06:	0022      	movs	r2, r4
    1a08:	4644      	mov	r4, r8
    1a0a:	4698      	mov	r8, r3
    1a0c:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a0e:	7e6a      	ldrb	r2, [r5, #25]
    1a10:	0112      	lsls	r2, r2, #4
    1a12:	2130      	movs	r1, #48	; 0x30
    1a14:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1a16:	7e28      	ldrb	r0, [r5, #24]
    1a18:	2207      	movs	r2, #7
    1a1a:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a1c:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a1e:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1a20:	2080      	movs	r0, #128	; 0x80
    1a22:	0240      	lsls	r0, r0, #9
    1a24:	000f      	movs	r7, r1
    1a26:	e002      	b.n	1a2e <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a28:	3201      	adds	r2, #1
    1a2a:	2a04      	cmp	r2, #4
    1a2c:	d007      	beq.n	1a3e <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    1a2e:	18a9      	adds	r1, r5, r2
    1a30:	7d09      	ldrb	r1, [r1, #20]
    1a32:	2900      	cmp	r1, #0
    1a34:	d0f8      	beq.n	1a28 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    1a36:	0001      	movs	r1, r0
    1a38:	4091      	lsls	r1, r2
    1a3a:	430f      	orrs	r7, r1
    1a3c:	e7f4      	b.n	1a28 <tcc_init+0x230>
    1a3e:	46b9      	mov	r9, r7
    1a40:	1d32      	adds	r2, r6, #4
    1a42:	0030      	movs	r0, r6
    1a44:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1a46:	2100      	movs	r1, #0
    1a48:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1a4a:	4290      	cmp	r0, r2
    1a4c:	d1fc      	bne.n	1a48 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    1a4e:	2200      	movs	r2, #0
    1a50:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1a52:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	4a3e      	ldr	r2, [pc, #248]	; (1b50 <tcc_init+0x358>)
    1a58:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    1a5a:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1a5c:	23a0      	movs	r3, #160	; 0xa0
    1a5e:	5cea      	ldrb	r2, [r5, r3]
    1a60:	3b64      	subs	r3, #100	; 0x64
    1a62:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1a64:	a909      	add	r1, sp, #36	; 0x24
    1a66:	7aab      	ldrb	r3, [r5, #10]
    1a68:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1a6a:	2011      	movs	r0, #17
    1a6c:	4b39      	ldr	r3, [pc, #228]	; (1b54 <tcc_init+0x35c>)
    1a6e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1a70:	2011      	movs	r0, #17
    1a72:	4b39      	ldr	r3, [pc, #228]	; (1b58 <tcc_init+0x360>)
    1a74:	4798      	blx	r3
    1a76:	002f      	movs	r7, r5
    1a78:	3798      	adds	r7, #152	; 0x98
    1a7a:	002e      	movs	r6, r5
    1a7c:	3658      	adds	r6, #88	; 0x58
    1a7e:	2378      	movs	r3, #120	; 0x78
    1a80:	469a      	mov	sl, r3
    1a82:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a84:	3b77      	subs	r3, #119	; 0x77
    1a86:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    1a88:	0023      	movs	r3, r4
    1a8a:	4654      	mov	r4, sl
    1a8c:	469a      	mov	sl, r3
    1a8e:	e003      	b.n	1a98 <tcc_init+0x2a0>
    1a90:	3701      	adds	r7, #1
    1a92:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1a94:	42b4      	cmp	r4, r6
    1a96:	d014      	beq.n	1ac2 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    1a98:	783b      	ldrb	r3, [r7, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d0f8      	beq.n	1a90 <tcc_init+0x298>
    1a9e:	ab08      	add	r3, sp, #32
    1aa0:	465a      	mov	r2, fp
    1aa2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1aa4:	2300      	movs	r3, #0
    1aa6:	aa08      	add	r2, sp, #32
    1aa8:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1aaa:	0013      	movs	r3, r2
    1aac:	2220      	movs	r2, #32
    1aae:	18b2      	adds	r2, r6, r2
    1ab0:	7812      	ldrb	r2, [r2, #0]
    1ab2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ab4:	465a      	mov	r2, fp
    1ab6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    1ab8:	7830      	ldrb	r0, [r6, #0]
    1aba:	0019      	movs	r1, r3
    1abc:	4b27      	ldr	r3, [pc, #156]	; (1b5c <tcc_init+0x364>)
    1abe:	4798      	blx	r3
    1ac0:	e7e6      	b.n	1a90 <tcc_init+0x298>
    1ac2:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1ac4:	9b04      	ldr	r3, [sp, #16]
    1ac6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1ac8:	9a05      	ldr	r2, [sp, #20]
    1aca:	0212      	lsls	r2, r2, #8
    1acc:	4313      	orrs	r3, r2
    1ace:	9a01      	ldr	r2, [sp, #4]
    1ad0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1ad2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1ad4:	2204      	movs	r2, #4
    1ad6:	68a3      	ldr	r3, [r4, #8]
    1ad8:	421a      	tst	r2, r3
    1ada:	d1fc      	bne.n	1ad6 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    1adc:	23ff      	movs	r3, #255	; 0xff
    1ade:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1ae0:	2204      	movs	r2, #4
    1ae2:	68a3      	ldr	r3, [r4, #8]
    1ae4:	421a      	tst	r2, r3
    1ae6:	d1fc      	bne.n	1ae2 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    1ae8:	466b      	mov	r3, sp
    1aea:	7b1b      	ldrb	r3, [r3, #12]
    1aec:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1af0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1af4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    1af6:	4643      	mov	r3, r8
    1af8:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1afa:	4a19      	ldr	r2, [pc, #100]	; (1b60 <tcc_init+0x368>)
    1afc:	68a3      	ldr	r3, [r4, #8]
    1afe:	4213      	tst	r3, r2
    1b00:	d1fc      	bne.n	1afc <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    1b02:	464b      	mov	r3, r9
    1b04:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1b06:	2210      	movs	r2, #16
    1b08:	68a3      	ldr	r3, [r4, #8]
    1b0a:	421a      	tst	r2, r3
    1b0c:	d1fc      	bne.n	1b08 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    1b0e:	682b      	ldr	r3, [r5, #0]
    1b10:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1b12:	4a14      	ldr	r2, [pc, #80]	; (1b64 <tcc_init+0x36c>)
    1b14:	68a3      	ldr	r3, [r4, #8]
    1b16:	4213      	tst	r3, r2
    1b18:	d1fc      	bne.n	1b14 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    1b1a:	686b      	ldr	r3, [r5, #4]
    1b1c:	6423      	str	r3, [r4, #64]	; 0x40
    1b1e:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b20:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1b22:	4811      	ldr	r0, [pc, #68]	; (1b68 <tcc_init+0x370>)
    1b24:	0002      	movs	r2, r0
    1b26:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    1b28:	68a3      	ldr	r3, [r4, #8]
    1b2a:	421a      	tst	r2, r3
    1b2c:	d1fc      	bne.n	1b28 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    1b2e:	cd04      	ldmia	r5!, {r2}
    1b30:	000b      	movs	r3, r1
    1b32:	3310      	adds	r3, #16
    1b34:	009b      	lsls	r3, r3, #2
    1b36:	18e3      	adds	r3, r4, r3
    1b38:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b3a:	3101      	adds	r1, #1
    1b3c:	2904      	cmp	r1, #4
    1b3e:	d1f1      	bne.n	1b24 <tcc_init+0x32c>
	return STATUS_OK;
    1b40:	2000      	movs	r0, #0
    1b42:	e670      	b.n	1826 <tcc_init+0x2e>
    1b44:	00001661 	.word	0x00001661
    1b48:	40000400 	.word	0x40000400
    1b4c:	00ffffff 	.word	0x00ffffff
    1b50:	200001dc 	.word	0x200001dc
    1b54:	00003519 	.word	0x00003519
    1b58:	0000348d 	.word	0x0000348d
    1b5c:	00003611 	.word	0x00003611
    1b60:	00020040 	.word	0x00020040
    1b64:	00040080 	.word	0x00040080
    1b68:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1b6c:	2017      	movs	r0, #23
    1b6e:	e65a      	b.n	1826 <tcc_init+0x2e>
    1b70:	2017      	movs	r0, #23
    1b72:	e658      	b.n	1826 <tcc_init+0x2e>
    1b74:	2017      	movs	r0, #23
    1b76:	e656      	b.n	1826 <tcc_init+0x2e>
    1b78:	2017      	movs	r0, #23
    1b7a:	e654      	b.n	1826 <tcc_init+0x2e>
    1b7c:	2017      	movs	r0, #23
    1b7e:	e652      	b.n	1826 <tcc_init+0x2e>

00001b80 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1b80:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1b82:	233c      	movs	r3, #60	; 0x3c
    1b84:	5cc3      	ldrb	r3, [r0, r3]
    1b86:	4c01      	ldr	r4, [pc, #4]	; (1b8c <tcc_set_compare_value+0xc>)
    1b88:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00001665 	.word	0x00001665

00001b90 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	46c6      	mov	lr, r8
    1b94:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1b96:	0080      	lsls	r0, r0, #2
    1b98:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <_tcc_interrupt_handler+0x44>)
    1b9a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1b9c:	683b      	ldr	r3, [r7, #0]
    1b9e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1ba4:	4013      	ands	r3, r2
    1ba6:	401e      	ands	r6, r3
    1ba8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <_tcc_interrupt_handler+0x48>)
    1bac:	4698      	mov	r8, r3
    1bae:	e002      	b.n	1bb6 <_tcc_interrupt_handler+0x26>
    1bb0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1bb2:	2c30      	cmp	r4, #48	; 0x30
    1bb4:	d00a      	beq.n	1bcc <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1bb6:	4643      	mov	r3, r8
    1bb8:	58e5      	ldr	r5, [r4, r3]
    1bba:	4235      	tst	r5, r6
    1bbc:	d0f8      	beq.n	1bb0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1bbe:	193b      	adds	r3, r7, r4
    1bc0:	685b      	ldr	r3, [r3, #4]
    1bc2:	0038      	movs	r0, r7
    1bc4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1bc6:	683b      	ldr	r3, [r7, #0]
    1bc8:	62dd      	str	r5, [r3, #44]	; 0x2c
    1bca:	e7f1      	b.n	1bb0 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1bcc:	bc04      	pop	{r2}
    1bce:	4690      	mov	r8, r2
    1bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	200001dc 	.word	0x200001dc
    1bd8:	00003e8c 	.word	0x00003e8c

00001bdc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1bdc:	b510      	push	{r4, lr}
    1bde:	2000      	movs	r0, #0
    1be0:	4b01      	ldr	r3, [pc, #4]	; (1be8 <TCC0_Handler+0xc>)
    1be2:	4798      	blx	r3
    1be4:	bd10      	pop	{r4, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001b91 	.word	0x00001b91

00001bec <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1bec:	4b06      	ldr	r3, [pc, #24]	; (1c08 <_tc_get_inst_index+0x1c>)
    1bee:	4298      	cmp	r0, r3
    1bf0:	d008      	beq.n	1c04 <_tc_get_inst_index+0x18>
    1bf2:	4a06      	ldr	r2, [pc, #24]	; (1c0c <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1bf4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1bf6:	4290      	cmp	r0, r2
    1bf8:	d001      	beq.n	1bfe <_tc_get_inst_index+0x12>
}
    1bfa:	0018      	movs	r0, r3
    1bfc:	4770      	bx	lr
    1bfe:	3301      	adds	r3, #1
			return i;
    1c00:	b2db      	uxtb	r3, r3
    1c02:	e7fa      	b.n	1bfa <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c04:	2300      	movs	r3, #0
    1c06:	e7fb      	b.n	1c00 <_tc_get_inst_index+0x14>
    1c08:	42001800 	.word	0x42001800
    1c0c:	42001c00 	.word	0x42001c00

00001c10 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c12:	b085      	sub	sp, #20
    1c14:	0004      	movs	r4, r0
    1c16:	000d      	movs	r5, r1
    1c18:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1c1a:	0008      	movs	r0, r1
    1c1c:	4b82      	ldr	r3, [pc, #520]	; (1e28 <tc_init+0x218>)
    1c1e:	4798      	blx	r3
    1c20:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1c22:	ab03      	add	r3, sp, #12
    1c24:	2212      	movs	r2, #18
    1c26:	701a      	strb	r2, [r3, #0]
    1c28:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1c2a:	ab02      	add	r3, sp, #8
    1c2c:	322e      	adds	r2, #46	; 0x2e
    1c2e:	801a      	strh	r2, [r3, #0]
    1c30:	3240      	adds	r2, #64	; 0x40
    1c32:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1c34:	2300      	movs	r3, #0
    1c36:	60a3      	str	r3, [r4, #8]
    1c38:	60e3      	str	r3, [r4, #12]
    1c3a:	6123      	str	r3, [r4, #16]
    1c3c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1c3e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1c40:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1c42:	0082      	lsls	r2, r0, #2
    1c44:	4b79      	ldr	r3, [pc, #484]	; (1e2c <tc_init+0x21c>)
    1c46:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1c48:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1c4a:	78b3      	ldrb	r3, [r6, #2]
    1c4c:	2b08      	cmp	r3, #8
    1c4e:	d006      	beq.n	1c5e <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1c50:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1c52:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1c54:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1c56:	07db      	lsls	r3, r3, #31
    1c58:	d505      	bpl.n	1c66 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1c5a:	b005      	add	sp, #20
    1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1c5e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1c60:	07fa      	lsls	r2, r7, #31
    1c62:	d4fa      	bmi.n	1c5a <tc_init+0x4a>
    1c64:	e7f4      	b.n	1c50 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c66:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1c68:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c6a:	06db      	lsls	r3, r3, #27
    1c6c:	d4f5      	bmi.n	1c5a <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1c6e:	882b      	ldrh	r3, [r5, #0]
    1c70:	079b      	lsls	r3, r3, #30
    1c72:	d4f2      	bmi.n	1c5a <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1c74:	7c33      	ldrb	r3, [r6, #16]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d000      	beq.n	1c7c <tc_init+0x6c>
    1c7a:	e07a      	b.n	1d72 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1c7c:	7f33      	ldrb	r3, [r6, #28]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d000      	beq.n	1c84 <tc_init+0x74>
    1c82:	e082      	b.n	1d8a <tc_init+0x17a>
    1c84:	496a      	ldr	r1, [pc, #424]	; (1e30 <tc_init+0x220>)
    1c86:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1c88:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1c8a:	ab02      	add	r3, sp, #8
    1c8c:	5ad3      	ldrh	r3, [r2, r3]
    1c8e:	4303      	orrs	r3, r0
    1c90:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1c92:	78b3      	ldrb	r3, [r6, #2]
    1c94:	2b08      	cmp	r3, #8
    1c96:	d100      	bne.n	1c9a <tc_init+0x8a>
    1c98:	e087      	b.n	1daa <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1c9a:	7833      	ldrb	r3, [r6, #0]
    1c9c:	466a      	mov	r2, sp
    1c9e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1ca0:	ab03      	add	r3, sp, #12
    1ca2:	5ddf      	ldrb	r7, [r3, r7]
    1ca4:	4669      	mov	r1, sp
    1ca6:	0038      	movs	r0, r7
    1ca8:	4b62      	ldr	r3, [pc, #392]	; (1e34 <tc_init+0x224>)
    1caa:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1cac:	0038      	movs	r0, r7
    1cae:	4b62      	ldr	r3, [pc, #392]	; (1e38 <tc_init+0x228>)
    1cb0:	4798      	blx	r3
	ctrla_tmp =
    1cb2:	8931      	ldrh	r1, [r6, #8]
    1cb4:	88b3      	ldrh	r3, [r6, #4]
    1cb6:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1cb8:	78b1      	ldrb	r1, [r6, #2]
    1cba:	79b2      	ldrb	r2, [r6, #6]
    1cbc:	4311      	orrs	r1, r2
	ctrla_tmp =
    1cbe:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1cc0:	7873      	ldrb	r3, [r6, #1]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d002      	beq.n	1ccc <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1cc6:	2380      	movs	r3, #128	; 0x80
    1cc8:	011b      	lsls	r3, r3, #4
    1cca:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ccc:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cce:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1cd0:	b25b      	sxtb	r3, r3
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	dbfb      	blt.n	1cce <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1cd6:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1cd8:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1cda:	1e4b      	subs	r3, r1, #1
    1cdc:	4199      	sbcs	r1, r3
    1cde:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1ce0:	7bb3      	ldrb	r3, [r6, #14]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d001      	beq.n	1cea <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1ce6:	2301      	movs	r3, #1
    1ce8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cec:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1cee:	b25b      	sxtb	r3, r3
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	dbfb      	blt.n	1cec <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1cf4:	23ff      	movs	r3, #255	; 0xff
    1cf6:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1cf8:	2900      	cmp	r1, #0
    1cfa:	d005      	beq.n	1d08 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cfc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cfe:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1d00:	b25b      	sxtb	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	dbfb      	blt.n	1cfe <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1d06:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1d08:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1d0a:	7af3      	ldrb	r3, [r6, #11]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d001      	beq.n	1d14 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d10:	2310      	movs	r3, #16
    1d12:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1d14:	7b33      	ldrb	r3, [r6, #12]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d001      	beq.n	1d1e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d1a:	2320      	movs	r3, #32
    1d1c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d1e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d20:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1d22:	b25b      	sxtb	r3, r3
    1d24:	2b00      	cmp	r3, #0
    1d26:	dbfb      	blt.n	1d20 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d28:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d2a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d2c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1d2e:	b25b      	sxtb	r3, r3
    1d30:	2b00      	cmp	r3, #0
    1d32:	dbfb      	blt.n	1d2c <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1d34:	7923      	ldrb	r3, [r4, #4]
    1d36:	2b04      	cmp	r3, #4
    1d38:	d03f      	beq.n	1dba <tc_init+0x1aa>
    1d3a:	2b08      	cmp	r3, #8
    1d3c:	d05e      	beq.n	1dfc <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1d3e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1d40:	2b00      	cmp	r3, #0
    1d42:	d000      	beq.n	1d46 <tc_init+0x136>
    1d44:	e789      	b.n	1c5a <tc_init+0x4a>
    1d46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d48:	b25b      	sxtb	r3, r3
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	dbfb      	blt.n	1d46 <tc_init+0x136>
				= config->counter_16_bit.value;
    1d4e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1d50:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d56:	b25b      	sxtb	r3, r3
    1d58:	2b00      	cmp	r3, #0
    1d5a:	dbfb      	blt.n	1d54 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1d5c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1d5e:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d60:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d62:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d64:	b25b      	sxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	dbfb      	blt.n	1d62 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1d6a:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1d6c:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1d6e:	2000      	movs	r0, #0
    1d70:	e773      	b.n	1c5a <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d72:	a901      	add	r1, sp, #4
    1d74:	2301      	movs	r3, #1
    1d76:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1d78:	2200      	movs	r2, #0
    1d7a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d7c:	7e32      	ldrb	r2, [r6, #24]
    1d7e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d80:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d82:	7d30      	ldrb	r0, [r6, #20]
    1d84:	4b2d      	ldr	r3, [pc, #180]	; (1e3c <tc_init+0x22c>)
    1d86:	4798      	blx	r3
    1d88:	e778      	b.n	1c7c <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	2301      	movs	r3, #1
    1d8e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1d90:	2200      	movs	r2, #0
    1d92:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d94:	3224      	adds	r2, #36	; 0x24
    1d96:	18b2      	adds	r2, r6, r2
    1d98:	7812      	ldrb	r2, [r2, #0]
    1d9a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d9c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d9e:	331f      	adds	r3, #31
    1da0:	18f3      	adds	r3, r6, r3
    1da2:	7818      	ldrb	r0, [r3, #0]
    1da4:	4b25      	ldr	r3, [pc, #148]	; (1e3c <tc_init+0x22c>)
    1da6:	4798      	blx	r3
    1da8:	e76c      	b.n	1c84 <tc_init+0x74>
    1daa:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1dac:	1c7a      	adds	r2, r7, #1
    1dae:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1db0:	ab02      	add	r3, sp, #8
    1db2:	5ad3      	ldrh	r3, [r2, r3]
    1db4:	4303      	orrs	r3, r0
    1db6:	620b      	str	r3, [r1, #32]
    1db8:	e76f      	b.n	1c9a <tc_init+0x8a>
    1dba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dbc:	b25b      	sxtb	r3, r3
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	dbfb      	blt.n	1dba <tc_init+0x1aa>
					config->counter_8_bit.value;
    1dc2:	2328      	movs	r3, #40	; 0x28
    1dc4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1dc6:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dc8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dca:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dcc:	b25b      	sxtb	r3, r3
    1dce:	2b00      	cmp	r3, #0
    1dd0:	dbfb      	blt.n	1dca <tc_init+0x1ba>
					config->counter_8_bit.period;
    1dd2:	2329      	movs	r3, #41	; 0x29
    1dd4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1dd6:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dd8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dda:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ddc:	b25b      	sxtb	r3, r3
    1dde:	2b00      	cmp	r3, #0
    1de0:	dbfb      	blt.n	1dda <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1de2:	232a      	movs	r3, #42	; 0x2a
    1de4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1de6:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1de8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dea:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dec:	b25b      	sxtb	r3, r3
    1dee:	2b00      	cmp	r3, #0
    1df0:	dbfb      	blt.n	1dea <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1df2:	232b      	movs	r3, #43	; 0x2b
    1df4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1df6:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1df8:	2000      	movs	r0, #0
    1dfa:	e72e      	b.n	1c5a <tc_init+0x4a>
    1dfc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dfe:	b25b      	sxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	dbfb      	blt.n	1dfc <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1e04:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e06:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e08:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e0a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e0c:	b25b      	sxtb	r3, r3
    1e0e:	2b00      	cmp	r3, #0
    1e10:	dbfb      	blt.n	1e0a <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1e12:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1e14:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e16:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e18:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e1a:	b25b      	sxtb	r3, r3
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	dbfb      	blt.n	1e18 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1e20:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1e22:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1e24:	2000      	movs	r0, #0
    1e26:	e718      	b.n	1c5a <tc_init+0x4a>
    1e28:	00001bed 	.word	0x00001bed
    1e2c:	200001e0 	.word	0x200001e0
    1e30:	40000400 	.word	0x40000400
    1e34:	00003519 	.word	0x00003519
    1e38:	0000348d 	.word	0x0000348d
    1e3c:	00003611 	.word	0x00003611

00001e40 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1e40:	6802      	ldr	r2, [r0, #0]
    1e42:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1e44:	b25b      	sxtb	r3, r3
    1e46:	2b00      	cmp	r3, #0
    1e48:	dbfb      	blt.n	1e42 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1e4a:	7903      	ldrb	r3, [r0, #4]
    1e4c:	2b04      	cmp	r3, #4
    1e4e:	d005      	beq.n	1e5c <tc_set_count_value+0x1c>
    1e50:	2b08      	cmp	r3, #8
    1e52:	d00b      	beq.n	1e6c <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1e54:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e56:	2b00      	cmp	r3, #0
    1e58:	d004      	beq.n	1e64 <tc_set_count_value+0x24>
	}
}
    1e5a:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1e5c:	b2c9      	uxtb	r1, r1
    1e5e:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    1e60:	2000      	movs	r0, #0
    1e62:	e7fa      	b.n	1e5a <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1e64:	b289      	uxth	r1, r1
    1e66:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    1e68:	2000      	movs	r0, #0
    1e6a:	e7f6      	b.n	1e5a <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1e6c:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    1e6e:	2000      	movs	r0, #0
    1e70:	e7f3      	b.n	1e5a <tc_set_count_value+0x1a>

00001e72 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1e72:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e74:	6804      	ldr	r4, [r0, #0]
    1e76:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1e78:	b25b      	sxtb	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	dbfb      	blt.n	1e76 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1e7e:	7903      	ldrb	r3, [r0, #4]
    1e80:	2b04      	cmp	r3, #4
    1e82:	d005      	beq.n	1e90 <tc_set_compare_value+0x1e>
    1e84:	2b08      	cmp	r3, #8
    1e86:	d014      	beq.n	1eb2 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e88:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d008      	beq.n	1ea0 <tc_set_compare_value+0x2e>
}
    1e8e:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1e90:	2017      	movs	r0, #23
			if (channel_index <
    1e92:	2901      	cmp	r1, #1
    1e94:	d8fb      	bhi.n	1e8e <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1e96:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1e98:	1861      	adds	r1, r4, r1
    1e9a:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1e9c:	2000      	movs	r0, #0
    1e9e:	e7f6      	b.n	1e8e <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1ea0:	2017      	movs	r0, #23
			if (channel_index <
    1ea2:	2901      	cmp	r1, #1
    1ea4:	d8f3      	bhi.n	1e8e <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1ea6:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1ea8:	310c      	adds	r1, #12
    1eaa:	0049      	lsls	r1, r1, #1
    1eac:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1eae:	2000      	movs	r0, #0
    1eb0:	e7ed      	b.n	1e8e <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1eb2:	2017      	movs	r0, #23
			if (channel_index <
    1eb4:	2901      	cmp	r1, #1
    1eb6:	d8ea      	bhi.n	1e8e <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1eb8:	3106      	adds	r1, #6
    1eba:	0089      	lsls	r1, r1, #2
    1ebc:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    1ebe:	2000      	movs	r0, #0
    1ec0:	e7e5      	b.n	1e8e <tc_set_compare_value+0x1c>

00001ec2 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1ec2:	1c93      	adds	r3, r2, #2
    1ec4:	009b      	lsls	r3, r3, #2
    1ec6:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1ec8:	2a02      	cmp	r2, #2
    1eca:	d009      	beq.n	1ee0 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1ecc:	2a03      	cmp	r2, #3
    1ece:	d00c      	beq.n	1eea <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1ed0:	2301      	movs	r3, #1
    1ed2:	4093      	lsls	r3, r2
    1ed4:	001a      	movs	r2, r3
    1ed6:	7e03      	ldrb	r3, [r0, #24]
    1ed8:	4313      	orrs	r3, r2
    1eda:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1edc:	2000      	movs	r0, #0
    1ede:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1ee0:	7e03      	ldrb	r3, [r0, #24]
    1ee2:	2210      	movs	r2, #16
    1ee4:	4313      	orrs	r3, r2
    1ee6:	7603      	strb	r3, [r0, #24]
    1ee8:	e7f8      	b.n	1edc <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1eea:	7e03      	ldrb	r3, [r0, #24]
    1eec:	2220      	movs	r2, #32
    1eee:	4313      	orrs	r3, r2
    1ef0:	7603      	strb	r3, [r0, #24]
    1ef2:	e7f3      	b.n	1edc <tc_register_callback+0x1a>

00001ef4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ef4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1ef6:	0080      	lsls	r0, r0, #2
    1ef8:	4b16      	ldr	r3, [pc, #88]	; (1f54 <_tc_interrupt_handler+0x60>)
    1efa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1efc:	6823      	ldr	r3, [r4, #0]
    1efe:	7b9d      	ldrb	r5, [r3, #14]
    1f00:	7e22      	ldrb	r2, [r4, #24]
    1f02:	7e63      	ldrb	r3, [r4, #25]
    1f04:	4013      	ands	r3, r2
    1f06:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1f08:	07eb      	lsls	r3, r5, #31
    1f0a:	d406      	bmi.n	1f1a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1f0c:	07ab      	lsls	r3, r5, #30
    1f0e:	d40b      	bmi.n	1f28 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1f10:	06eb      	lsls	r3, r5, #27
    1f12:	d410      	bmi.n	1f36 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1f14:	06ab      	lsls	r3, r5, #26
    1f16:	d415      	bmi.n	1f44 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1f18:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1f1a:	0020      	movs	r0, r4
    1f1c:	68a3      	ldr	r3, [r4, #8]
    1f1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1f20:	2301      	movs	r3, #1
    1f22:	6822      	ldr	r2, [r4, #0]
    1f24:	7393      	strb	r3, [r2, #14]
    1f26:	e7f1      	b.n	1f0c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1f28:	0020      	movs	r0, r4
    1f2a:	68e3      	ldr	r3, [r4, #12]
    1f2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1f2e:	2302      	movs	r3, #2
    1f30:	6822      	ldr	r2, [r4, #0]
    1f32:	7393      	strb	r3, [r2, #14]
    1f34:	e7ec      	b.n	1f10 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1f36:	0020      	movs	r0, r4
    1f38:	6923      	ldr	r3, [r4, #16]
    1f3a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1f3c:	2310      	movs	r3, #16
    1f3e:	6822      	ldr	r2, [r4, #0]
    1f40:	7393      	strb	r3, [r2, #14]
    1f42:	e7e7      	b.n	1f14 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1f44:	0020      	movs	r0, r4
    1f46:	6963      	ldr	r3, [r4, #20]
    1f48:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1f4a:	6823      	ldr	r3, [r4, #0]
    1f4c:	2220      	movs	r2, #32
    1f4e:	739a      	strb	r2, [r3, #14]
}
    1f50:	e7e2      	b.n	1f18 <_tc_interrupt_handler+0x24>
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	200001e0 	.word	0x200001e0

00001f58 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1f58:	b510      	push	{r4, lr}
    1f5a:	2000      	movs	r0, #0
    1f5c:	4b01      	ldr	r3, [pc, #4]	; (1f64 <TC1_Handler+0xc>)
    1f5e:	4798      	blx	r3
    1f60:	bd10      	pop	{r4, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	00001ef5 	.word	0x00001ef5

00001f68 <TC2_Handler>:
    1f68:	b510      	push	{r4, lr}
    1f6a:	2001      	movs	r0, #1
    1f6c:	4b01      	ldr	r3, [pc, #4]	; (1f74 <TC2_Handler+0xc>)
    1f6e:	4798      	blx	r3
    1f70:	bd10      	pop	{r4, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001ef5 	.word	0x00001ef5

00001f78 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	46de      	mov	lr, fp
    1f7c:	4657      	mov	r7, sl
    1f7e:	464e      	mov	r6, r9
    1f80:	4645      	mov	r5, r8
    1f82:	b5e0      	push	{r5, r6, r7, lr}
    1f84:	b091      	sub	sp, #68	; 0x44
    1f86:	0005      	movs	r5, r0
    1f88:	000c      	movs	r4, r1
    1f8a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1f8c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f8e:	0008      	movs	r0, r1
    1f90:	4bbc      	ldr	r3, [pc, #752]	; (2284 <usart_init+0x30c>)
    1f92:	4798      	blx	r3
    1f94:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f96:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1f98:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f9a:	07db      	lsls	r3, r3, #31
    1f9c:	d506      	bpl.n	1fac <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1f9e:	b011      	add	sp, #68	; 0x44
    1fa0:	bc3c      	pop	{r2, r3, r4, r5}
    1fa2:	4690      	mov	r8, r2
    1fa4:	4699      	mov	r9, r3
    1fa6:	46a2      	mov	sl, r4
    1fa8:	46ab      	mov	fp, r5
    1faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1fac:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1fae:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1fb0:	079b      	lsls	r3, r3, #30
    1fb2:	d4f4      	bmi.n	1f9e <usart_init+0x26>
    1fb4:	49b4      	ldr	r1, [pc, #720]	; (2288 <usart_init+0x310>)
    1fb6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1fb8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1fba:	2301      	movs	r3, #1
    1fbc:	40bb      	lsls	r3, r7
    1fbe:	4303      	orrs	r3, r0
    1fc0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1fc2:	a90f      	add	r1, sp, #60	; 0x3c
    1fc4:	272d      	movs	r7, #45	; 0x2d
    1fc6:	5df3      	ldrb	r3, [r6, r7]
    1fc8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fca:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1fcc:	b2d3      	uxtb	r3, r2
    1fce:	9302      	str	r3, [sp, #8]
    1fd0:	0018      	movs	r0, r3
    1fd2:	4bae      	ldr	r3, [pc, #696]	; (228c <usart_init+0x314>)
    1fd4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fd6:	9802      	ldr	r0, [sp, #8]
    1fd8:	4bad      	ldr	r3, [pc, #692]	; (2290 <usart_init+0x318>)
    1fda:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fdc:	5df0      	ldrb	r0, [r6, r7]
    1fde:	2100      	movs	r1, #0
    1fe0:	4bac      	ldr	r3, [pc, #688]	; (2294 <usart_init+0x31c>)
    1fe2:	4798      	blx	r3
	module->character_size = config->character_size;
    1fe4:	7af3      	ldrb	r3, [r6, #11]
    1fe6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1fe8:	2324      	movs	r3, #36	; 0x24
    1fea:	5cf3      	ldrb	r3, [r6, r3]
    1fec:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1fee:	2325      	movs	r3, #37	; 0x25
    1ff0:	5cf3      	ldrb	r3, [r6, r3]
    1ff2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ff4:	7ef3      	ldrb	r3, [r6, #27]
    1ff6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1ff8:	7f33      	ldrb	r3, [r6, #28]
    1ffa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ffc:	682b      	ldr	r3, [r5, #0]
    1ffe:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2000:	0018      	movs	r0, r3
    2002:	4ba0      	ldr	r3, [pc, #640]	; (2284 <usart_init+0x30c>)
    2004:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2006:	300e      	adds	r0, #14
	uint16_t baud  = 0;
    2008:	2200      	movs	r2, #0
    200a:	230e      	movs	r3, #14
    200c:	a906      	add	r1, sp, #24
    200e:	468c      	mov	ip, r1
    2010:	4463      	add	r3, ip
    2012:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2014:	8a32      	ldrh	r2, [r6, #16]
    2016:	9202      	str	r2, [sp, #8]
    2018:	2380      	movs	r3, #128	; 0x80
    201a:	01db      	lsls	r3, r3, #7
    201c:	429a      	cmp	r2, r3
    201e:	d100      	bne.n	2022 <usart_init+0xaa>
    2020:	e09e      	b.n	2160 <usart_init+0x1e8>
    2022:	d90f      	bls.n	2044 <usart_init+0xcc>
    2024:	23c0      	movs	r3, #192	; 0xc0
    2026:	01db      	lsls	r3, r3, #7
    2028:	9a02      	ldr	r2, [sp, #8]
    202a:	429a      	cmp	r2, r3
    202c:	d100      	bne.n	2030 <usart_init+0xb8>
    202e:	e092      	b.n	2156 <usart_init+0x1de>
    2030:	2380      	movs	r3, #128	; 0x80
    2032:	021b      	lsls	r3, r3, #8
    2034:	429a      	cmp	r2, r3
    2036:	d000      	beq.n	203a <usart_init+0xc2>
    2038:	e11f      	b.n	227a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    203a:	2303      	movs	r3, #3
    203c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    203e:	2300      	movs	r3, #0
    2040:	9307      	str	r3, [sp, #28]
    2042:	e008      	b.n	2056 <usart_init+0xde>
	switch (config->sample_rate) {
    2044:	2380      	movs	r3, #128	; 0x80
    2046:	019b      	lsls	r3, r3, #6
    2048:	429a      	cmp	r2, r3
    204a:	d000      	beq.n	204e <usart_init+0xd6>
    204c:	e115      	b.n	227a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    204e:	2310      	movs	r3, #16
    2050:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2052:	3b0f      	subs	r3, #15
    2054:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2056:	6833      	ldr	r3, [r6, #0]
    2058:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    205a:	68f3      	ldr	r3, [r6, #12]
    205c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    205e:	6973      	ldr	r3, [r6, #20]
    2060:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2062:	7e33      	ldrb	r3, [r6, #24]
    2064:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2066:	2326      	movs	r3, #38	; 0x26
    2068:	5cf3      	ldrb	r3, [r6, r3]
    206a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    206c:	6873      	ldr	r3, [r6, #4]
    206e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2070:	2b00      	cmp	r3, #0
    2072:	d100      	bne.n	2076 <usart_init+0xfe>
    2074:	e0a0      	b.n	21b8 <usart_init+0x240>
    2076:	2380      	movs	r3, #128	; 0x80
    2078:	055b      	lsls	r3, r3, #21
    207a:	4599      	cmp	r9, r3
    207c:	d100      	bne.n	2080 <usart_init+0x108>
    207e:	e084      	b.n	218a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2080:	7e73      	ldrb	r3, [r6, #25]
    2082:	2b00      	cmp	r3, #0
    2084:	d002      	beq.n	208c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2086:	7eb3      	ldrb	r3, [r6, #26]
    2088:	4642      	mov	r2, r8
    208a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    208c:	682a      	ldr	r2, [r5, #0]
    208e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2090:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2092:	2b00      	cmp	r3, #0
    2094:	d1fc      	bne.n	2090 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2096:	330e      	adds	r3, #14
    2098:	aa06      	add	r2, sp, #24
    209a:	4694      	mov	ip, r2
    209c:	4463      	add	r3, ip
    209e:	881b      	ldrh	r3, [r3, #0]
    20a0:	4642      	mov	r2, r8
    20a2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    20a4:	9b05      	ldr	r3, [sp, #20]
    20a6:	9a03      	ldr	r2, [sp, #12]
    20a8:	4313      	orrs	r3, r2
    20aa:	9a04      	ldr	r2, [sp, #16]
    20ac:	4313      	orrs	r3, r2
    20ae:	464a      	mov	r2, r9
    20b0:	4313      	orrs	r3, r2
    20b2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    20b4:	465b      	mov	r3, fp
    20b6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    20b8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    20ba:	4653      	mov	r3, sl
    20bc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    20be:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    20c0:	2327      	movs	r3, #39	; 0x27
    20c2:	5cf3      	ldrb	r3, [r6, r3]
    20c4:	2b00      	cmp	r3, #0
    20c6:	d101      	bne.n	20cc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    20c8:	3304      	adds	r3, #4
    20ca:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20cc:	7e73      	ldrb	r3, [r6, #25]
    20ce:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20d0:	7f32      	ldrb	r2, [r6, #28]
    20d2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20d4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20d6:	7f72      	ldrb	r2, [r6, #29]
    20d8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20da:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20dc:	2224      	movs	r2, #36	; 0x24
    20de:	5cb2      	ldrb	r2, [r6, r2]
    20e0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20e2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    20e4:	2225      	movs	r2, #37	; 0x25
    20e6:	5cb2      	ldrb	r2, [r6, r2]
    20e8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20ea:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    20ec:	7ab1      	ldrb	r1, [r6, #10]
    20ee:	7af2      	ldrb	r2, [r6, #11]
    20f0:	4311      	orrs	r1, r2
    20f2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    20f4:	8933      	ldrh	r3, [r6, #8]
    20f6:	2bff      	cmp	r3, #255	; 0xff
    20f8:	d100      	bne.n	20fc <usart_init+0x184>
    20fa:	e081      	b.n	2200 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    20fc:	2280      	movs	r2, #128	; 0x80
    20fe:	0452      	lsls	r2, r2, #17
    2100:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2102:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2104:	232c      	movs	r3, #44	; 0x2c
    2106:	5cf3      	ldrb	r3, [r6, r3]
    2108:	2b00      	cmp	r3, #0
    210a:	d103      	bne.n	2114 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    210c:	4b62      	ldr	r3, [pc, #392]	; (2298 <usart_init+0x320>)
    210e:	789b      	ldrb	r3, [r3, #2]
    2110:	079b      	lsls	r3, r3, #30
    2112:	d501      	bpl.n	2118 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2114:	2380      	movs	r3, #128	; 0x80
    2116:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2118:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    211a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    211c:	2b00      	cmp	r3, #0
    211e:	d1fc      	bne.n	211a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2120:	4643      	mov	r3, r8
    2122:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2124:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2126:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2128:	2b00      	cmp	r3, #0
    212a:	d1fc      	bne.n	2126 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    212c:	4643      	mov	r3, r8
    212e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2130:	ab0e      	add	r3, sp, #56	; 0x38
    2132:	2280      	movs	r2, #128	; 0x80
    2134:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2136:	2200      	movs	r2, #0
    2138:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    213a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    213c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    213e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2140:	930a      	str	r3, [sp, #40]	; 0x28
    2142:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2144:	930b      	str	r3, [sp, #44]	; 0x2c
    2146:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2148:	930c      	str	r3, [sp, #48]	; 0x30
    214a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    214c:	9302      	str	r3, [sp, #8]
    214e:	930d      	str	r3, [sp, #52]	; 0x34
    2150:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2152:	ae0a      	add	r6, sp, #40	; 0x28
    2154:	e063      	b.n	221e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2156:	2308      	movs	r3, #8
    2158:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    215a:	3b07      	subs	r3, #7
    215c:	9307      	str	r3, [sp, #28]
    215e:	e77a      	b.n	2056 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2160:	6833      	ldr	r3, [r6, #0]
    2162:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2164:	68f3      	ldr	r3, [r6, #12]
    2166:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2168:	6973      	ldr	r3, [r6, #20]
    216a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    216c:	7e33      	ldrb	r3, [r6, #24]
    216e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2170:	2326      	movs	r3, #38	; 0x26
    2172:	5cf3      	ldrb	r3, [r6, r3]
    2174:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2176:	6873      	ldr	r3, [r6, #4]
    2178:	4699      	mov	r9, r3
	switch (transfer_mode)
    217a:	2b00      	cmp	r3, #0
    217c:	d018      	beq.n	21b0 <usart_init+0x238>
    217e:	2380      	movs	r3, #128	; 0x80
    2180:	055b      	lsls	r3, r3, #21
    2182:	4599      	cmp	r9, r3
    2184:	d001      	beq.n	218a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2186:	2000      	movs	r0, #0
    2188:	e025      	b.n	21d6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    218a:	2327      	movs	r3, #39	; 0x27
    218c:	5cf3      	ldrb	r3, [r6, r3]
    218e:	2b00      	cmp	r3, #0
    2190:	d000      	beq.n	2194 <usart_init+0x21c>
    2192:	e775      	b.n	2080 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2194:	6a33      	ldr	r3, [r6, #32]
    2196:	001f      	movs	r7, r3
    2198:	b2c0      	uxtb	r0, r0
    219a:	4b40      	ldr	r3, [pc, #256]	; (229c <usart_init+0x324>)
    219c:	4798      	blx	r3
    219e:	0001      	movs	r1, r0
    21a0:	220e      	movs	r2, #14
    21a2:	ab06      	add	r3, sp, #24
    21a4:	469c      	mov	ip, r3
    21a6:	4462      	add	r2, ip
    21a8:	0038      	movs	r0, r7
    21aa:	4b3d      	ldr	r3, [pc, #244]	; (22a0 <usart_init+0x328>)
    21ac:	4798      	blx	r3
    21ae:	e012      	b.n	21d6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    21b0:	2308      	movs	r3, #8
    21b2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    21b4:	2300      	movs	r3, #0
    21b6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    21b8:	2327      	movs	r3, #39	; 0x27
    21ba:	5cf3      	ldrb	r3, [r6, r3]
    21bc:	2b00      	cmp	r3, #0
    21be:	d00e      	beq.n	21de <usart_init+0x266>
				status_code =
    21c0:	9b06      	ldr	r3, [sp, #24]
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	9b07      	ldr	r3, [sp, #28]
    21c6:	220e      	movs	r2, #14
    21c8:	a906      	add	r1, sp, #24
    21ca:	468c      	mov	ip, r1
    21cc:	4462      	add	r2, ip
    21ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    21d0:	6a30      	ldr	r0, [r6, #32]
    21d2:	4f34      	ldr	r7, [pc, #208]	; (22a4 <usart_init+0x32c>)
    21d4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    21d6:	2800      	cmp	r0, #0
    21d8:	d000      	beq.n	21dc <usart_init+0x264>
    21da:	e6e0      	b.n	1f9e <usart_init+0x26>
    21dc:	e750      	b.n	2080 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    21de:	6a33      	ldr	r3, [r6, #32]
    21e0:	001f      	movs	r7, r3
    21e2:	b2c0      	uxtb	r0, r0
    21e4:	4b2d      	ldr	r3, [pc, #180]	; (229c <usart_init+0x324>)
    21e6:	4798      	blx	r3
    21e8:	0001      	movs	r1, r0
				status_code =
    21ea:	9b06      	ldr	r3, [sp, #24]
    21ec:	9300      	str	r3, [sp, #0]
    21ee:	9b07      	ldr	r3, [sp, #28]
    21f0:	220e      	movs	r2, #14
    21f2:	a806      	add	r0, sp, #24
    21f4:	4684      	mov	ip, r0
    21f6:	4462      	add	r2, ip
    21f8:	0038      	movs	r0, r7
    21fa:	4f2a      	ldr	r7, [pc, #168]	; (22a4 <usart_init+0x32c>)
    21fc:	47b8      	blx	r7
    21fe:	e7ea      	b.n	21d6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2200:	7ef3      	ldrb	r3, [r6, #27]
    2202:	2b00      	cmp	r3, #0
    2204:	d100      	bne.n	2208 <usart_init+0x290>
    2206:	e77d      	b.n	2104 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2208:	2380      	movs	r3, #128	; 0x80
    220a:	04db      	lsls	r3, r3, #19
    220c:	431f      	orrs	r7, r3
    220e:	e779      	b.n	2104 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2210:	0020      	movs	r0, r4
    2212:	4b25      	ldr	r3, [pc, #148]	; (22a8 <usart_init+0x330>)
    2214:	4798      	blx	r3
    2216:	e007      	b.n	2228 <usart_init+0x2b0>
    2218:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    221a:	2f04      	cmp	r7, #4
    221c:	d00d      	beq.n	223a <usart_init+0x2c2>
    221e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2220:	00bb      	lsls	r3, r7, #2
    2222:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2224:	2800      	cmp	r0, #0
    2226:	d0f3      	beq.n	2210 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2228:	1c43      	adds	r3, r0, #1
    222a:	d0f5      	beq.n	2218 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    222c:	a90e      	add	r1, sp, #56	; 0x38
    222e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2230:	0c00      	lsrs	r0, r0, #16
    2232:	b2c0      	uxtb	r0, r0
    2234:	4b1d      	ldr	r3, [pc, #116]	; (22ac <usart_init+0x334>)
    2236:	4798      	blx	r3
    2238:	e7ee      	b.n	2218 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    223a:	2300      	movs	r3, #0
    223c:	60eb      	str	r3, [r5, #12]
    223e:	612b      	str	r3, [r5, #16]
    2240:	616b      	str	r3, [r5, #20]
    2242:	61ab      	str	r3, [r5, #24]
    2244:	61eb      	str	r3, [r5, #28]
    2246:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2248:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    224a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    224c:	2200      	movs	r2, #0
    224e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2250:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2252:	3330      	adds	r3, #48	; 0x30
    2254:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2256:	3301      	adds	r3, #1
    2258:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    225a:	3301      	adds	r3, #1
    225c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    225e:	3301      	adds	r3, #1
    2260:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2262:	6828      	ldr	r0, [r5, #0]
    2264:	4b07      	ldr	r3, [pc, #28]	; (2284 <usart_init+0x30c>)
    2266:	4798      	blx	r3
    2268:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    226a:	4911      	ldr	r1, [pc, #68]	; (22b0 <usart_init+0x338>)
    226c:	4b11      	ldr	r3, [pc, #68]	; (22b4 <usart_init+0x33c>)
    226e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2270:	00a4      	lsls	r4, r4, #2
    2272:	4b11      	ldr	r3, [pc, #68]	; (22b8 <usart_init+0x340>)
    2274:	50e5      	str	r5, [r4, r3]
	return status_code;
    2276:	2000      	movs	r0, #0
    2278:	e691      	b.n	1f9e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    227a:	2310      	movs	r3, #16
    227c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    227e:	2300      	movs	r3, #0
    2280:	9307      	str	r3, [sp, #28]
    2282:	e6e8      	b.n	2056 <usart_init+0xde>
    2284:	0000103d 	.word	0x0000103d
    2288:	40000400 	.word	0x40000400
    228c:	00003519 	.word	0x00003519
    2290:	0000348d 	.word	0x0000348d
    2294:	00000f31 	.word	0x00000f31
    2298:	41002000 	.word	0x41002000
    229c:	00003535 	.word	0x00003535
    22a0:	00000e73 	.word	0x00000e73
    22a4:	00000e9d 	.word	0x00000e9d
    22a8:	00000f7d 	.word	0x00000f7d
    22ac:	00003611 	.word	0x00003611
    22b0:	00002431 	.word	0x00002431
    22b4:	00002585 	.word	0x00002585
    22b8:	200001e8 	.word	0x200001e8

000022bc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    22bc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    22be:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    22c0:	2a00      	cmp	r2, #0
    22c2:	d101      	bne.n	22c8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    22c4:	0018      	movs	r0, r3
    22c6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    22c8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    22ca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22cc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    22ce:	2a00      	cmp	r2, #0
    22d0:	d1f8      	bne.n	22c4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22d2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    22d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    22d6:	2a00      	cmp	r2, #0
    22d8:	d1fc      	bne.n	22d4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    22da:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    22dc:	2102      	movs	r1, #2
    22de:	7e1a      	ldrb	r2, [r3, #24]
    22e0:	420a      	tst	r2, r1
    22e2:	d0fc      	beq.n	22de <usart_write_wait+0x22>
	return STATUS_OK;
    22e4:	2300      	movs	r3, #0
    22e6:	e7ed      	b.n	22c4 <usart_write_wait+0x8>

000022e8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    22e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ea:	46ce      	mov	lr, r9
    22ec:	4647      	mov	r7, r8
    22ee:	b580      	push	{r7, lr}
    22f0:	b083      	sub	sp, #12
    22f2:	0005      	movs	r5, r0
    22f4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    22f6:	2017      	movs	r0, #23
	if (length == 0) {
    22f8:	2a00      	cmp	r2, #0
    22fa:	d104      	bne.n	2306 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    22fc:	b003      	add	sp, #12
    22fe:	bc0c      	pop	{r2, r3}
    2300:	4690      	mov	r8, r2
    2302:	4699      	mov	r9, r3
    2304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    2306:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    2308:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    230a:	2b00      	cmp	r3, #0
    230c:	d0f6      	beq.n	22fc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    230e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2310:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2312:	2b00      	cmp	r3, #0
    2314:	d1fc      	bne.n	2310 <usart_write_buffer_wait+0x28>
	while (length--) {
    2316:	3a01      	subs	r2, #1
    2318:	b293      	uxth	r3, r2
    231a:	4699      	mov	r9, r3
    231c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    231e:	2701      	movs	r7, #1
	while (length--) {
    2320:	4b1f      	ldr	r3, [pc, #124]	; (23a0 <usart_write_buffer_wait+0xb8>)
    2322:	4698      	mov	r8, r3
    2324:	e011      	b.n	234a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2326:	1c73      	adds	r3, r6, #1
    2328:	b29b      	uxth	r3, r3
    232a:	9a01      	ldr	r2, [sp, #4]
    232c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    232e:	796a      	ldrb	r2, [r5, #5]
    2330:	2a01      	cmp	r2, #1
    2332:	d017      	beq.n	2364 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2334:	b289      	uxth	r1, r1
    2336:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2338:	0028      	movs	r0, r5
    233a:	4b1a      	ldr	r3, [pc, #104]	; (23a4 <usart_write_buffer_wait+0xbc>)
    233c:	4798      	blx	r3
	while (length--) {
    233e:	464b      	mov	r3, r9
    2340:	3b01      	subs	r3, #1
    2342:	b29b      	uxth	r3, r3
    2344:	4699      	mov	r9, r3
    2346:	4543      	cmp	r3, r8
    2348:	d013      	beq.n	2372 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    234a:	7e23      	ldrb	r3, [r4, #24]
    234c:	423b      	tst	r3, r7
    234e:	d1ea      	bne.n	2326 <usart_write_buffer_wait+0x3e>
    2350:	4b13      	ldr	r3, [pc, #76]	; (23a0 <usart_write_buffer_wait+0xb8>)
    2352:	7e22      	ldrb	r2, [r4, #24]
    2354:	423a      	tst	r2, r7
    2356:	d1e6      	bne.n	2326 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    2358:	2b01      	cmp	r3, #1
    235a:	d019      	beq.n	2390 <usart_write_buffer_wait+0xa8>
    235c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    235e:	2b00      	cmp	r3, #0
    2360:	d1f7      	bne.n	2352 <usart_write_buffer_wait+0x6a>
    2362:	e7e0      	b.n	2326 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2364:	3602      	adds	r6, #2
    2366:	b2b6      	uxth	r6, r6
    2368:	9a01      	ldr	r2, [sp, #4]
    236a:	5cd3      	ldrb	r3, [r2, r3]
    236c:	021b      	lsls	r3, r3, #8
    236e:	4319      	orrs	r1, r3
    2370:	e7e2      	b.n	2338 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2372:	7e23      	ldrb	r3, [r4, #24]
    2374:	079b      	lsls	r3, r3, #30
    2376:	d40d      	bmi.n	2394 <usart_write_buffer_wait+0xac>
    2378:	4b09      	ldr	r3, [pc, #36]	; (23a0 <usart_write_buffer_wait+0xb8>)
    237a:	2102      	movs	r1, #2
    237c:	7e22      	ldrb	r2, [r4, #24]
    237e:	420a      	tst	r2, r1
    2380:	d10a      	bne.n	2398 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    2382:	2b01      	cmp	r3, #1
    2384:	d00a      	beq.n	239c <usart_write_buffer_wait+0xb4>
    2386:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2388:	2b00      	cmp	r3, #0
    238a:	d1f7      	bne.n	237c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    238c:	2000      	movs	r0, #0
    238e:	e7b5      	b.n	22fc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    2390:	2012      	movs	r0, #18
    2392:	e7b3      	b.n	22fc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    2394:	2000      	movs	r0, #0
    2396:	e7b1      	b.n	22fc <usart_write_buffer_wait+0x14>
    2398:	2000      	movs	r0, #0
    239a:	e7af      	b.n	22fc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    239c:	2012      	movs	r0, #18
    239e:	e7ad      	b.n	22fc <usart_write_buffer_wait+0x14>
    23a0:	0000ffff 	.word	0x0000ffff
    23a4:	000022bd 	.word	0x000022bd

000023a8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    23a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23aa:	0004      	movs	r4, r0
    23ac:	000d      	movs	r5, r1
    23ae:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    23b0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    23b2:	4b0f      	ldr	r3, [pc, #60]	; (23f0 <_usart_read_buffer+0x48>)
    23b4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    23b6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    23b8:	b29b      	uxth	r3, r3
    23ba:	2b00      	cmp	r3, #0
    23bc:	d003      	beq.n	23c6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    23be:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <_usart_read_buffer+0x4c>)
    23c0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    23c2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    23c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    23c6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    23c8:	4b0a      	ldr	r3, [pc, #40]	; (23f4 <_usart_read_buffer+0x4c>)
    23ca:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    23cc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    23ce:	2205      	movs	r2, #5
    23d0:	2332      	movs	r3, #50	; 0x32
    23d2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    23d4:	3b2e      	subs	r3, #46	; 0x2e
    23d6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    23d8:	7a23      	ldrb	r3, [r4, #8]
    23da:	2b00      	cmp	r3, #0
    23dc:	d001      	beq.n	23e2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    23de:	2320      	movs	r3, #32
    23e0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    23e2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    23e4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    23e6:	2b00      	cmp	r3, #0
    23e8:	d0ec      	beq.n	23c4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    23ea:	2308      	movs	r3, #8
    23ec:	75bb      	strb	r3, [r7, #22]
    23ee:	e7e9      	b.n	23c4 <_usart_read_buffer+0x1c>
    23f0:	00003065 	.word	0x00003065
    23f4:	000030a5 	.word	0x000030a5

000023f8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    23f8:	1c93      	adds	r3, r2, #2
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	18c3      	adds	r3, r0, r3
    23fe:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2400:	2130      	movs	r1, #48	; 0x30
    2402:	2301      	movs	r3, #1
    2404:	4093      	lsls	r3, r2
    2406:	001a      	movs	r2, r3
    2408:	5c43      	ldrb	r3, [r0, r1]
    240a:	4313      	orrs	r3, r2
    240c:	5443      	strb	r3, [r0, r1]
}
    240e:	4770      	bx	lr

00002410 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2410:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2412:	2317      	movs	r3, #23
	if (length == 0) {
    2414:	2a00      	cmp	r2, #0
    2416:	d101      	bne.n	241c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2418:	0018      	movs	r0, r3
    241a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    241c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    241e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2420:	2c00      	cmp	r4, #0
    2422:	d0f9      	beq.n	2418 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2424:	4b01      	ldr	r3, [pc, #4]	; (242c <usart_read_buffer_job+0x1c>)
    2426:	4798      	blx	r3
    2428:	0003      	movs	r3, r0
    242a:	e7f5      	b.n	2418 <usart_read_buffer_job+0x8>
    242c:	000023a9 	.word	0x000023a9

00002430 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2432:	0080      	lsls	r0, r0, #2
    2434:	4b51      	ldr	r3, [pc, #324]	; (257c <_usart_interrupt_handler+0x14c>)
    2436:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2438:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    243a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    243c:	2b00      	cmp	r3, #0
    243e:	d1fc      	bne.n	243a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2440:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2442:	7da5      	ldrb	r5, [r4, #22]
    2444:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    2446:	2330      	movs	r3, #48	; 0x30
    2448:	5cf3      	ldrb	r3, [r6, r3]
    244a:	2231      	movs	r2, #49	; 0x31
    244c:	5cb7      	ldrb	r7, [r6, r2]
    244e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2450:	07eb      	lsls	r3, r5, #31
    2452:	d522      	bpl.n	249a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2454:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2456:	b29b      	uxth	r3, r3
    2458:	2b00      	cmp	r3, #0
    245a:	d01c      	beq.n	2496 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    245c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    245e:	7813      	ldrb	r3, [r2, #0]
    2460:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2462:	1c51      	adds	r1, r2, #1
    2464:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2466:	7971      	ldrb	r1, [r6, #5]
    2468:	2901      	cmp	r1, #1
    246a:	d00e      	beq.n	248a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    246c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    246e:	05db      	lsls	r3, r3, #23
    2470:	0ddb      	lsrs	r3, r3, #23
    2472:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2474:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2476:	3b01      	subs	r3, #1
    2478:	b29b      	uxth	r3, r3
    247a:	85f3      	strh	r3, [r6, #46]	; 0x2e
    247c:	2b00      	cmp	r3, #0
    247e:	d10c      	bne.n	249a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2480:	3301      	adds	r3, #1
    2482:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2484:	3301      	adds	r3, #1
    2486:	75a3      	strb	r3, [r4, #22]
    2488:	e007      	b.n	249a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    248a:	7851      	ldrb	r1, [r2, #1]
    248c:	0209      	lsls	r1, r1, #8
    248e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2490:	3202      	adds	r2, #2
    2492:	62b2      	str	r2, [r6, #40]	; 0x28
    2494:	e7eb      	b.n	246e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2496:	2301      	movs	r3, #1
    2498:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    249a:	07ab      	lsls	r3, r5, #30
    249c:	d506      	bpl.n	24ac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    249e:	2302      	movs	r3, #2
    24a0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    24a2:	2200      	movs	r2, #0
    24a4:	3331      	adds	r3, #49	; 0x31
    24a6:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    24a8:	07fb      	lsls	r3, r7, #31
    24aa:	d428      	bmi.n	24fe <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    24ac:	076b      	lsls	r3, r5, #29
    24ae:	d510      	bpl.n	24d2 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    24b0:	8b63      	ldrh	r3, [r4, #26]
    24b2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    24b4:	071a      	lsls	r2, r3, #28
    24b6:	d426      	bmi.n	2506 <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    24b8:	223f      	movs	r2, #63	; 0x3f
    24ba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    24bc:	2b00      	cmp	r3, #0
    24be:	d04a      	beq.n	2556 <_usart_interrupt_handler+0x126>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    24c0:	079a      	lsls	r2, r3, #30
    24c2:	d523      	bpl.n	250c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    24c4:	221a      	movs	r2, #26
    24c6:	2332      	movs	r3, #50	; 0x32
    24c8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    24ca:	3b30      	subs	r3, #48	; 0x30
    24cc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    24ce:	077b      	lsls	r3, r7, #29
    24d0:	d43d      	bmi.n	254e <_usart_interrupt_handler+0x11e>
		//	usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    24d2:	06eb      	lsls	r3, r5, #27
    24d4:	d504      	bpl.n	24e0 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    24d6:	2310      	movs	r3, #16
    24d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    24da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    24dc:	06fb      	lsls	r3, r7, #27
    24de:	d440      	bmi.n	2562 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    24e0:	06ab      	lsls	r3, r5, #26
    24e2:	d504      	bpl.n	24ee <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    24e4:	2320      	movs	r3, #32
    24e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    24e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    24ea:	073b      	lsls	r3, r7, #28
    24ec:	d43d      	bmi.n	256a <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    24ee:	072b      	lsls	r3, r5, #28
    24f0:	d504      	bpl.n	24fc <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    24f2:	2308      	movs	r3, #8
    24f4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    24f6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    24f8:	06bb      	lsls	r3, r7, #26
    24fa:	d43a      	bmi.n	2572 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    24fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    24fe:	0030      	movs	r0, r6
    2500:	68f3      	ldr	r3, [r6, #12]
    2502:	4798      	blx	r3
    2504:	e7d2      	b.n	24ac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2506:	2237      	movs	r2, #55	; 0x37
    2508:	4013      	ands	r3, r2
    250a:	e7d7      	b.n	24bc <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    250c:	075a      	lsls	r2, r3, #29
    250e:	d505      	bpl.n	251c <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2510:	221e      	movs	r2, #30
    2512:	2332      	movs	r3, #50	; 0x32
    2514:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2516:	3b2e      	subs	r3, #46	; 0x2e
    2518:	8363      	strh	r3, [r4, #26]
    251a:	e7d8      	b.n	24ce <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    251c:	07da      	lsls	r2, r3, #31
    251e:	d505      	bpl.n	252c <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2520:	2213      	movs	r2, #19
    2522:	2332      	movs	r3, #50	; 0x32
    2524:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2526:	3b31      	subs	r3, #49	; 0x31
    2528:	8363      	strh	r3, [r4, #26]
    252a:	e7d0      	b.n	24ce <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    252c:	06da      	lsls	r2, r3, #27
    252e:	d505      	bpl.n	253c <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2530:	2242      	movs	r2, #66	; 0x42
    2532:	2332      	movs	r3, #50	; 0x32
    2534:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2536:	3b22      	subs	r3, #34	; 0x22
    2538:	8363      	strh	r3, [r4, #26]
    253a:	e7c8      	b.n	24ce <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    253c:	2220      	movs	r2, #32
    253e:	421a      	tst	r2, r3
    2540:	d0c5      	beq.n	24ce <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2542:	3221      	adds	r2, #33	; 0x21
    2544:	2332      	movs	r3, #50	; 0x32
    2546:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2548:	3b12      	subs	r3, #18
    254a:	8363      	strh	r3, [r4, #26]
    254c:	e7bf      	b.n	24ce <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    254e:	0030      	movs	r0, r6
    2550:	6973      	ldr	r3, [r6, #20]
    2552:	4798      	blx	r3
    2554:	e7bd      	b.n	24d2 <_usart_interrupt_handler+0xa2>
				if (callback_status
    2556:	07bb      	lsls	r3, r7, #30
    2558:	d5bb      	bpl.n	24d2 <_usart_interrupt_handler+0xa2>
					(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    255a:	0030      	movs	r0, r6
    255c:	6933      	ldr	r3, [r6, #16]
    255e:	4798      	blx	r3
    2560:	e7b7      	b.n	24d2 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2562:	0030      	movs	r0, r6
    2564:	69f3      	ldr	r3, [r6, #28]
    2566:	4798      	blx	r3
    2568:	e7ba      	b.n	24e0 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    256a:	0030      	movs	r0, r6
    256c:	69b3      	ldr	r3, [r6, #24]
    256e:	4798      	blx	r3
    2570:	e7bd      	b.n	24ee <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2572:	6a33      	ldr	r3, [r6, #32]
    2574:	0030      	movs	r0, r6
    2576:	4798      	blx	r3
}
    2578:	e7c0      	b.n	24fc <_usart_interrupt_handler+0xcc>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	200001e8 	.word	0x200001e8

00002580 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2580:	4770      	bx	lr
	...

00002584 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2584:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2586:	4b0a      	ldr	r3, [pc, #40]	; (25b0 <_sercom_set_handler+0x2c>)
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d10c      	bne.n	25a8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    258e:	4c09      	ldr	r4, [pc, #36]	; (25b4 <_sercom_set_handler+0x30>)
    2590:	4d09      	ldr	r5, [pc, #36]	; (25b8 <_sercom_set_handler+0x34>)
    2592:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2594:	4b09      	ldr	r3, [pc, #36]	; (25bc <_sercom_set_handler+0x38>)
    2596:	2200      	movs	r2, #0
    2598:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    259a:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    259c:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    259e:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    25a0:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    25a2:	3201      	adds	r2, #1
    25a4:	4b02      	ldr	r3, [pc, #8]	; (25b0 <_sercom_set_handler+0x2c>)
    25a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    25a8:	0080      	lsls	r0, r0, #2
    25aa:	4b02      	ldr	r3, [pc, #8]	; (25b4 <_sercom_set_handler+0x30>)
    25ac:	50c1      	str	r1, [r0, r3]
}
    25ae:	bd30      	pop	{r4, r5, pc}
    25b0:	200000b4 	.word	0x200000b4
    25b4:	200000b8 	.word	0x200000b8
    25b8:	00002581 	.word	0x00002581
    25bc:	200001e8 	.word	0x200001e8

000025c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    25c0:	b510      	push	{r4, lr}
    25c2:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    25c4:	ac01      	add	r4, sp, #4
    25c6:	2309      	movs	r3, #9
    25c8:	7023      	strb	r3, [r4, #0]
    25ca:	3301      	adds	r3, #1
    25cc:	7063      	strb	r3, [r4, #1]
    25ce:	3301      	adds	r3, #1
    25d0:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <_sercom_get_interrupt_vector+0x1c>)
    25d4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    25d6:	5620      	ldrsb	r0, [r4, r0]
}
    25d8:	b002      	add	sp, #8
    25da:	bd10      	pop	{r4, pc}
    25dc:	0000103d 	.word	0x0000103d

000025e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25e0:	b510      	push	{r4, lr}
    25e2:	4b02      	ldr	r3, [pc, #8]	; (25ec <SERCOM0_Handler+0xc>)
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	2000      	movs	r0, #0
    25e8:	4798      	blx	r3
    25ea:	bd10      	pop	{r4, pc}
    25ec:	200000b8 	.word	0x200000b8

000025f0 <SERCOM1_Handler>:
    25f0:	b510      	push	{r4, lr}
    25f2:	4b02      	ldr	r3, [pc, #8]	; (25fc <SERCOM1_Handler+0xc>)
    25f4:	685b      	ldr	r3, [r3, #4]
    25f6:	2001      	movs	r0, #1
    25f8:	4798      	blx	r3
    25fa:	bd10      	pop	{r4, pc}
    25fc:	200000b8 	.word	0x200000b8

00002600 <SERCOM2_Handler>:
    2600:	b510      	push	{r4, lr}
    2602:	4b02      	ldr	r3, [pc, #8]	; (260c <SERCOM2_Handler+0xc>)
    2604:	689b      	ldr	r3, [r3, #8]
    2606:	2002      	movs	r0, #2
    2608:	4798      	blx	r3
    260a:	bd10      	pop	{r4, pc}
    260c:	200000b8 	.word	0x200000b8

00002610 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2610:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2612:	2200      	movs	r2, #0
    2614:	4b10      	ldr	r3, [pc, #64]	; (2658 <EIC_Handler+0x48>)
    2616:	701a      	strb	r2, [r3, #0]
    2618:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    261a:	4910      	ldr	r1, [pc, #64]	; (265c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    261c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    261e:	4e10      	ldr	r6, [pc, #64]	; (2660 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2620:	4c0d      	ldr	r4, [pc, #52]	; (2658 <EIC_Handler+0x48>)
    2622:	e00a      	b.n	263a <EIC_Handler+0x2a>
		return eics[eic_index];
    2624:	490d      	ldr	r1, [pc, #52]	; (265c <EIC_Handler+0x4c>)
    2626:	e008      	b.n	263a <EIC_Handler+0x2a>
    2628:	7823      	ldrb	r3, [r4, #0]
    262a:	3301      	adds	r3, #1
    262c:	b2db      	uxtb	r3, r3
    262e:	7023      	strb	r3, [r4, #0]
    2630:	2b0f      	cmp	r3, #15
    2632:	d810      	bhi.n	2656 <EIC_Handler+0x46>
		return NULL;
    2634:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2636:	2b1f      	cmp	r3, #31
    2638:	d9f4      	bls.n	2624 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    263a:	0028      	movs	r0, r5
    263c:	4018      	ands	r0, r3
    263e:	2201      	movs	r2, #1
    2640:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2642:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2644:	4210      	tst	r0, r2
    2646:	d0ef      	beq.n	2628 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2648:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    264a:	009b      	lsls	r3, r3, #2
    264c:	599b      	ldr	r3, [r3, r6]
    264e:	2b00      	cmp	r3, #0
    2650:	d0ea      	beq.n	2628 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2652:	4798      	blx	r3
    2654:	e7e8      	b.n	2628 <EIC_Handler+0x18>
			}
		}
	}
}
    2656:	bd70      	pop	{r4, r5, r6, pc}
    2658:	200001f4 	.word	0x200001f4
    265c:	40001800 	.word	0x40001800
    2660:	2000013c 	.word	0x2000013c

00002664 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2664:	b500      	push	{lr}
    2666:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2668:	ab01      	add	r3, sp, #4
    266a:	2280      	movs	r2, #128	; 0x80
    266c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    266e:	780a      	ldrb	r2, [r1, #0]
    2670:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2672:	784a      	ldrb	r2, [r1, #1]
    2674:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2676:	788a      	ldrb	r2, [r1, #2]
    2678:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    267a:	0019      	movs	r1, r3
    267c:	4b01      	ldr	r3, [pc, #4]	; (2684 <port_pin_set_config+0x20>)
    267e:	4798      	blx	r3
}
    2680:	b003      	add	sp, #12
    2682:	bd00      	pop	{pc}
    2684:	00003611 	.word	0x00003611

00002688 <tc_callback_LED_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_LED_PWM(struct tc_module *const module_inst)
{
    2688:	b5f0      	push	{r4, r5, r6, r7, lr}
    268a:	46de      	mov	lr, fp
    268c:	4657      	mov	r7, sl
    268e:	4646      	mov	r6, r8
    2690:	b5c0      	push	{r6, r7, lr}
    2692:	b082      	sub	sp, #8
    2694:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	volatile uint32_t count;
	
	if(first_time == false)
    2696:	4b4f      	ldr	r3, [pc, #316]	; (27d4 <tc_callback_LED_PWM+0x14c>)
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d000      	beq.n	26a0 <tc_callback_LED_PWM+0x18>
    269e:	e091      	b.n	27c4 <tc_callback_LED_PWM+0x13c>
	{
		port_pin_set_output_level(pin_led_array[pin_led_array_ID++], LED_ON);
    26a0:	494d      	ldr	r1, [pc, #308]	; (27d8 <tc_callback_LED_PWM+0x150>)
    26a2:	780b      	ldrb	r3, [r1, #0]
    26a4:	1c5a      	adds	r2, r3, #1
    26a6:	b2d2      	uxtb	r2, r2
    26a8:	700a      	strb	r2, [r1, #0]
    26aa:	494c      	ldr	r1, [pc, #304]	; (27dc <tc_callback_LED_PWM+0x154>)
    26ac:	5cc9      	ldrb	r1, [r1, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    26ae:	09c8      	lsrs	r0, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    26b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    26b2:	2800      	cmp	r0, #0
    26b4:	d104      	bne.n	26c0 <tc_callback_LED_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    26b6:	094b      	lsrs	r3, r1, #5
    26b8:	01db      	lsls	r3, r3, #7
    26ba:	4849      	ldr	r0, [pc, #292]	; (27e0 <tc_callback_LED_PWM+0x158>)
    26bc:	4684      	mov	ip, r0
    26be:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    26c0:	201f      	movs	r0, #31
    26c2:	4008      	ands	r0, r1
    26c4:	2101      	movs	r1, #1
    26c6:	4081      	lsls	r1, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26c8:	6159      	str	r1, [r3, #20]
		
		if(compare_led_array_ID < N_valid_led_compares-1 )
    26ca:	4b46      	ldr	r3, [pc, #280]	; (27e4 <tc_callback_LED_PWM+0x15c>)
    26cc:	781e      	ldrb	r6, [r3, #0]
    26ce:	4b46      	ldr	r3, [pc, #280]	; (27e8 <tc_callback_LED_PWM+0x160>)
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	3b01      	subs	r3, #1
    26d4:	4698      	mov	r8, r3
    26d6:	429e      	cmp	r6, r3
    26d8:	da6e      	bge.n	27b8 <tc_callback_LED_PWM+0x130>
		{
			compare_value_last = compare_led_array[compare_led_array_ID];
    26da:	4844      	ldr	r0, [pc, #272]	; (27ec <tc_callback_LED_PWM+0x164>)
    26dc:	5d81      	ldrb	r1, [r0, r6]
    26de:	4b44      	ldr	r3, [pc, #272]	; (27f0 <tc_callback_LED_PWM+0x168>)
    26e0:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_led_array[++compare_led_array_ID];
    26e2:	3601      	adds	r6, #1
    26e4:	b2f6      	uxtb	r6, r6
    26e6:	4b3f      	ldr	r3, [pc, #252]	; (27e4 <tc_callback_LED_PWM+0x15c>)
    26e8:	701e      	strb	r6, [r3, #0]
    26ea:	0033      	movs	r3, r6
    26ec:	5d85      	ldrb	r5, [r0, r6]
    26ee:	4841      	ldr	r0, [pc, #260]	; (27f4 <tc_callback_LED_PWM+0x16c>)
    26f0:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    26f2:	42a9      	cmp	r1, r5
    26f4:	d135      	bne.n	2762 <tc_callback_LED_PWM+0xda>
    26f6:	45b0      	cmp	r8, r6
    26f8:	db52      	blt.n	27a0 <tc_callback_LED_PWM+0x118>
    26fa:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    26fc:	4937      	ldr	r1, [pc, #220]	; (27dc <tc_callback_LED_PWM+0x154>)
    26fe:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2700:	211f      	movs	r1, #31
    2702:	468a      	mov	sl, r1
    2704:	2701      	movs	r7, #1
				compare_value_last = compare_led_array[compare_led_array_ID];
    2706:	4c39      	ldr	r4, [pc, #228]	; (27ec <tc_callback_LED_PWM+0x164>)
    2708:	1ab6      	subs	r6, r6, r2
    270a:	e00f      	b.n	272c <tc_callback_LED_PWM+0xa4>
    270c:	4655      	mov	r5, sl
    270e:	4029      	ands	r1, r5
    2710:	003d      	movs	r5, r7
    2712:	408d      	lsls	r5, r1
		port_base->OUTCLR.reg = pin_mask;
    2714:	6145      	str	r5, [r0, #20]
    2716:	5ce1      	ldrb	r1, [r4, r3]
    2718:	1993      	adds	r3, r2, r6
    271a:	b2db      	uxtb	r3, r3
				compare_value_current = compare_led_array[++compare_led_array_ID];
    271c:	9300      	str	r3, [sp, #0]
    271e:	5ce0      	ldrb	r0, [r4, r3]
    2720:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    2722:	4281      	cmp	r1, r0
    2724:	d112      	bne.n	274c <tc_callback_LED_PWM+0xc4>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    2726:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    2728:	4598      	cmp	r8, r3
    272a:	db2c      	blt.n	2786 <tc_callback_LED_PWM+0xfe>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    272c:	1c42      	adds	r2, r0, #1
    272e:	b2d2      	uxtb	r2, r2
    2730:	4659      	mov	r1, fp
    2732:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    2734:	09c8      	lsrs	r0, r1, #7
    2736:	4684      	mov	ip, r0
		return NULL;
    2738:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    273a:	4665      	mov	r5, ip
    273c:	2d00      	cmp	r5, #0
    273e:	d1e5      	bne.n	270c <tc_callback_LED_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    2740:	0948      	lsrs	r0, r1, #5
    2742:	01c0      	lsls	r0, r0, #7
    2744:	4d26      	ldr	r5, [pc, #152]	; (27e0 <tc_callback_LED_PWM+0x158>)
    2746:	46ac      	mov	ip, r5
    2748:	4460      	add	r0, ip
    274a:	e7df      	b.n	270c <tc_callback_LED_PWM+0x84>
    274c:	0005      	movs	r5, r0
    274e:	4b28      	ldr	r3, [pc, #160]	; (27f0 <tc_callback_LED_PWM+0x168>)
    2750:	7019      	strb	r1, [r3, #0]
    2752:	4b24      	ldr	r3, [pc, #144]	; (27e4 <tc_callback_LED_PWM+0x15c>)
    2754:	4668      	mov	r0, sp
    2756:	7800      	ldrb	r0, [r0, #0]
    2758:	7018      	strb	r0, [r3, #0]
    275a:	4b26      	ldr	r3, [pc, #152]	; (27f4 <tc_callback_LED_PWM+0x16c>)
    275c:	701d      	strb	r5, [r3, #0]
    275e:	4b1e      	ldr	r3, [pc, #120]	; (27d8 <tc_callback_LED_PWM+0x150>)
    2760:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    2762:	2dff      	cmp	r5, #255	; 0xff
    2764:	d01e      	beq.n	27a4 <tc_callback_LED_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    2766:	9c01      	ldr	r4, [sp, #4]
    2768:	0020      	movs	r0, r4
    276a:	4b23      	ldr	r3, [pc, #140]	; (27f8 <tc_callback_LED_PWM+0x170>)
    276c:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    276e:	4b21      	ldr	r3, [pc, #132]	; (27f4 <tc_callback_LED_PWM+0x16c>)
    2770:	781a      	ldrb	r2, [r3, #0]
    2772:	2100      	movs	r1, #0
    2774:	0020      	movs	r0, r4
    2776:	4b21      	ldr	r3, [pc, #132]	; (27fc <tc_callback_LED_PWM+0x174>)
    2778:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    277a:	b002      	add	sp, #8
    277c:	bc1c      	pop	{r2, r3, r4}
    277e:	4690      	mov	r8, r2
    2780:	469a      	mov	sl, r3
    2782:	46a3      	mov	fp, r4
    2784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2786:	4665      	mov	r5, ip
    2788:	4b19      	ldr	r3, [pc, #100]	; (27f0 <tc_callback_LED_PWM+0x168>)
    278a:	7019      	strb	r1, [r3, #0]
    278c:	4b15      	ldr	r3, [pc, #84]	; (27e4 <tc_callback_LED_PWM+0x15c>)
    278e:	4668      	mov	r0, sp
    2790:	7800      	ldrb	r0, [r0, #0]
    2792:	7018      	strb	r0, [r3, #0]
    2794:	4b17      	ldr	r3, [pc, #92]	; (27f4 <tc_callback_LED_PWM+0x16c>)
    2796:	7019      	strb	r1, [r3, #0]
    2798:	4b0f      	ldr	r3, [pc, #60]	; (27d8 <tc_callback_LED_PWM+0x150>)
    279a:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_led_array[++compare_led_array_ID];
    279c:	4661      	mov	r1, ip
    279e:	e7e0      	b.n	2762 <tc_callback_LED_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    27a0:	000d      	movs	r5, r1
    27a2:	e7de      	b.n	2762 <tc_callback_LED_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    27a4:	9c01      	ldr	r4, [sp, #4]
    27a6:	0020      	movs	r0, r4
    27a8:	4b13      	ldr	r3, [pc, #76]	; (27f8 <tc_callback_LED_PWM+0x170>)
    27aa:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    27ac:	2200      	movs	r2, #0
    27ae:	2100      	movs	r1, #0
    27b0:	0020      	movs	r0, r4
    27b2:	4b12      	ldr	r3, [pc, #72]	; (27fc <tc_callback_LED_PWM+0x174>)
    27b4:	4798      	blx	r3
    27b6:	e7e0      	b.n	277a <tc_callback_LED_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    27b8:	2200      	movs	r2, #0
    27ba:	2100      	movs	r1, #0
    27bc:	9801      	ldr	r0, [sp, #4]
    27be:	4b0f      	ldr	r3, [pc, #60]	; (27fc <tc_callback_LED_PWM+0x174>)
    27c0:	4798      	blx	r3
    27c2:	e7da      	b.n	277a <tc_callback_LED_PWM+0xf2>
		first_time = false;
    27c4:	2200      	movs	r2, #0
    27c6:	4b03      	ldr	r3, [pc, #12]	; (27d4 <tc_callback_LED_PWM+0x14c>)
    27c8:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    27ca:	2100      	movs	r1, #0
    27cc:	9801      	ldr	r0, [sp, #4]
    27ce:	4b0b      	ldr	r3, [pc, #44]	; (27fc <tc_callback_LED_PWM+0x174>)
    27d0:	4798      	blx	r3
}
    27d2:	e7d2      	b.n	277a <tc_callback_LED_PWM+0xf2>
    27d4:	20000009 	.word	0x20000009
    27d8:	20000221 	.word	0x20000221
    27dc:	20000224 	.word	0x20000224
    27e0:	41004400 	.word	0x41004400
    27e4:	20000220 	.word	0x20000220
    27e8:	20000008 	.word	0x20000008
    27ec:	2000021c 	.word	0x2000021c
    27f0:	200000c5 	.word	0x200000c5
    27f4:	200000c4 	.word	0x200000c4
    27f8:	00001e41 	.word	0x00001e41
    27fc:	00001e73 	.word	0x00001e73

00002800 <LED_timer_init>:
{
    2800:	b510      	push	{r4, lr}
    2802:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2804:	aa01      	add	r2, sp, #4
    2806:	2300      	movs	r3, #0
    2808:	2100      	movs	r1, #0
    280a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    280c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    280e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2810:	2000      	movs	r0, #0
    2812:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2814:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2816:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2818:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    281a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    281c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    281e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2820:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2822:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2824:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2826:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2828:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    282a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    282c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    282e:	8593      	strh	r3, [r2, #44]	; 0x2c
	led_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    2830:	23c0      	movs	r3, #192	; 0xc0
    2832:	00db      	lsls	r3, r3, #3
    2834:	8093      	strh	r3, [r2, #4]
	led_tc_config.counter_size    = TC_COUNTER_SIZE_8BIT;
    2836:	2304      	movs	r3, #4
    2838:	7093      	strb	r3, [r2, #2]
	led_tc_config.counter_8_bit.period = 0XFF;
    283a:	21ff      	movs	r1, #255	; 0xff
    283c:	3325      	adds	r3, #37	; 0x25
    283e:	54d1      	strb	r1, [r2, r3]
	tc_init(&led_tc_instance, TC2, &led_tc_config);
    2840:	4c07      	ldr	r4, [pc, #28]	; (2860 <LED_timer_init+0x60>)
    2842:	4908      	ldr	r1, [pc, #32]	; (2864 <LED_timer_init+0x64>)
    2844:	0020      	movs	r0, r4
    2846:	4b08      	ldr	r3, [pc, #32]	; (2868 <LED_timer_init+0x68>)
    2848:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    284a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    284c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    284e:	b25b      	sxtb	r3, r3
    2850:	2b00      	cmp	r3, #0
    2852:	dbfb      	blt.n	284c <LED_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2854:	8813      	ldrh	r3, [r2, #0]
    2856:	2102      	movs	r1, #2
    2858:	430b      	orrs	r3, r1
    285a:	8013      	strh	r3, [r2, #0]
}
    285c:	b00e      	add	sp, #56	; 0x38
    285e:	bd10      	pop	{r4, pc}
    2860:	200001f8 	.word	0x200001f8
    2864:	42001c00 	.word	0x42001c00
    2868:	00001c11 	.word	0x00001c11

0000286c <set_drivestrength_LED>:
{
    286c:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_LEDS,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    286e:	2201      	movs	r2, #1
    2870:	4902      	ldr	r1, [pc, #8]	; (287c <set_drivestrength_LED+0x10>)
    2872:	4803      	ldr	r0, [pc, #12]	; (2880 <set_drivestrength_LED+0x14>)
    2874:	4b03      	ldr	r3, [pc, #12]	; (2884 <set_drivestrength_LED+0x18>)
    2876:	4798      	blx	r3
}
    2878:	bd10      	pop	{r4, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	c0000300 	.word	0xc0000300
    2880:	41004400 	.word	0x41004400
    2884:	00003641 	.word	0x00003641

00002888 <LED_setup_pins>:
{
    2888:	b530      	push	{r4, r5, lr}
    288a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    288c:	ac01      	add	r4, sp, #4
    288e:	2301      	movs	r3, #1
    2890:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2892:	2200      	movs	r2, #0
    2894:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2896:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED1, &config_port_pin);
    2898:	0021      	movs	r1, r4
    289a:	201f      	movs	r0, #31
    289c:	4d08      	ldr	r5, [pc, #32]	; (28c0 <LED_setup_pins+0x38>)
    289e:	47a8      	blx	r5
	port_pin_set_config(LED2, &config_port_pin);
    28a0:	0021      	movs	r1, r4
    28a2:	2008      	movs	r0, #8
    28a4:	47a8      	blx	r5
	port_pin_set_config(LED3, &config_port_pin);
    28a6:	0021      	movs	r1, r4
    28a8:	2009      	movs	r0, #9
    28aa:	47a8      	blx	r5
	port_pin_set_config(LED4, &config_port_pin);
    28ac:	0021      	movs	r1, r4
    28ae:	201e      	movs	r0, #30
    28b0:	47a8      	blx	r5
	set_drivestrength_LED();
    28b2:	4b04      	ldr	r3, [pc, #16]	; (28c4 <LED_setup_pins+0x3c>)
    28b4:	4798      	blx	r3
	port_base->OUTSET.reg = CLEAR_LEDS ;
    28b6:	4a04      	ldr	r2, [pc, #16]	; (28c8 <LED_setup_pins+0x40>)
    28b8:	4b04      	ldr	r3, [pc, #16]	; (28cc <LED_setup_pins+0x44>)
    28ba:	619a      	str	r2, [r3, #24]
}
    28bc:	b003      	add	sp, #12
    28be:	bd30      	pop	{r4, r5, pc}
    28c0:	00002665 	.word	0x00002665
    28c4:	0000286d 	.word	0x0000286d
    28c8:	c0000300 	.word	0xc0000300
    28cc:	41004400 	.word	0x41004400

000028d0 <enable_LED>:
{
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d2:	46ce      	mov	lr, r9
    28d4:	4647      	mov	r7, r8
    28d6:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    28d8:	4c13      	ldr	r4, [pc, #76]	; (2928 <enable_LED+0x58>)
    28da:	6820      	ldr	r0, [r4, #0]
    28dc:	4b13      	ldr	r3, [pc, #76]	; (292c <enable_LED+0x5c>)
    28de:	4699      	mov	r9, r3
    28e0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    28e2:	4b13      	ldr	r3, [pc, #76]	; (2930 <enable_LED+0x60>)
    28e4:	4698      	mov	r8, r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    28e6:	5c1b      	ldrb	r3, [r3, r0]
    28e8:	261f      	movs	r6, #31
    28ea:	4033      	ands	r3, r6
    28ec:	2501      	movs	r5, #1
    28ee:	002a      	movs	r2, r5
    28f0:	409a      	lsls	r2, r3
    28f2:	4f10      	ldr	r7, [pc, #64]	; (2934 <enable_LED+0x64>)
    28f4:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    28f6:	7e63      	ldrb	r3, [r4, #25]
    28f8:	2201      	movs	r2, #1
    28fa:	4313      	orrs	r3, r2
    28fc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    28fe:	6823      	ldr	r3, [r4, #0]
    2900:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2902:	0018      	movs	r0, r3
    2904:	47c8      	blx	r9
    2906:	4643      	mov	r3, r8
    2908:	5c1b      	ldrb	r3, [r3, r0]
    290a:	401e      	ands	r6, r3
    290c:	40b5      	lsls	r5, r6
    290e:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2910:	7e63      	ldrb	r3, [r4, #25]
    2912:	2210      	movs	r2, #16
    2914:	4313      	orrs	r3, r2
    2916:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2918:	6823      	ldr	r3, [r4, #0]
    291a:	2210      	movs	r2, #16
    291c:	735a      	strb	r2, [r3, #13]
}
    291e:	bc0c      	pop	{r2, r3}
    2920:	4690      	mov	r8, r2
    2922:	4699      	mov	r9, r3
    2924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	200001f8 	.word	0x200001f8
    292c:	00001bed 	.word	0x00001bed
    2930:	00003ebc 	.word	0x00003ebc
    2934:	e000e100 	.word	0xe000e100

00002938 <initializing_LED_pin_array>:
	temp_pin_led_array[0]  = LED1;
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <initializing_LED_pin_array+0x14>)
    293a:	221f      	movs	r2, #31
    293c:	701a      	strb	r2, [r3, #0]
	temp_pin_led_array[1]  = LED2;
    293e:	3a17      	subs	r2, #23
    2940:	705a      	strb	r2, [r3, #1]
	temp_pin_led_array[2]  = LED3;
    2942:	3201      	adds	r2, #1
    2944:	709a      	strb	r2, [r3, #2]
	temp_pin_led_array[3]  = LED4;
    2946:	3215      	adds	r2, #21
    2948:	70da      	strb	r2, [r3, #3]
}
    294a:	4770      	bx	lr
    294c:	20000218 	.word	0x20000218

00002950 <initializing_LED_compare_array>:
	temp_compare_led_array_2[0] = 255;//LED1
    2950:	4b03      	ldr	r3, [pc, #12]	; (2960 <initializing_LED_compare_array+0x10>)
    2952:	22ff      	movs	r2, #255	; 0xff
    2954:	701a      	strb	r2, [r3, #0]
	temp_compare_led_array_2[1] = 255;//LED2
    2956:	705a      	strb	r2, [r3, #1]
	temp_compare_led_array_2[2] = 255;  //LED3
    2958:	709a      	strb	r2, [r3, #2]
	temp_compare_led_array_2[3] = 0;  //LED4
    295a:	2200      	movs	r2, #0
    295c:	70da      	strb	r2, [r3, #3]
}
    295e:	4770      	bx	lr
    2960:	20000214 	.word	0x20000214

00002964 <transfer_temp_LED_2>:
		temp_compare_led_array[i] = temp_compare_led_array_2[i];
    2964:	4b05      	ldr	r3, [pc, #20]	; (297c <transfer_temp_LED_2+0x18>)
    2966:	4a06      	ldr	r2, [pc, #24]	; (2980 <transfer_temp_LED_2+0x1c>)
    2968:	7811      	ldrb	r1, [r2, #0]
    296a:	7019      	strb	r1, [r3, #0]
    296c:	7851      	ldrb	r1, [r2, #1]
    296e:	7059      	strb	r1, [r3, #1]
    2970:	7891      	ldrb	r1, [r2, #2]
    2972:	7099      	strb	r1, [r3, #2]
    2974:	78d2      	ldrb	r2, [r2, #3]
    2976:	70da      	strb	r2, [r3, #3]
}
    2978:	4770      	bx	lr
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	20000228 	.word	0x20000228
    2980:	20000214 	.word	0x20000214

00002984 <increasing_LED_sort_tag>:
{
    2984:	b5f0      	push	{r4, r5, r6, r7, lr}
    2986:	46ce      	mov	lr, r9
    2988:	b500      	push	{lr}
	transfer_temp_LED_2();
    298a:	4b15      	ldr	r3, [pc, #84]	; (29e0 <increasing_LED_sort_tag+0x5c>)
    298c:	4798      	blx	r3
    298e:	2303      	movs	r3, #3
    2990:	4699      	mov	r9, r3
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    2992:	4f14      	ldr	r7, [pc, #80]	; (29e4 <increasing_LED_sort_tag+0x60>)
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    2994:	003e      	movs	r6, r7
				temp = temp_pin_led_array[j];
    2996:	4d14      	ldr	r5, [pc, #80]	; (29e8 <increasing_LED_sort_tag+0x64>)
    2998:	e017      	b.n	29ca <increasing_LED_sort_tag+0x46>
		for(j=0;j< N-i-1;j++)
    299a:	3301      	adds	r3, #1
    299c:	b2db      	uxtb	r3, r3
    299e:	001a      	movs	r2, r3
    29a0:	4563      	cmp	r3, ip
    29a2:	da0b      	bge.n	29bc <increasing_LED_sort_tag+0x38>
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    29a4:	5cb8      	ldrb	r0, [r7, r2]
    29a6:	1c51      	adds	r1, r2, #1
    29a8:	5c7c      	ldrb	r4, [r7, r1]
    29aa:	42a0      	cmp	r0, r4
    29ac:	d9f5      	bls.n	299a <increasing_LED_sort_tag+0x16>
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    29ae:	54b4      	strb	r4, [r6, r2]
				temp_compare_led_array[j+1]= temp;
    29b0:	5470      	strb	r0, [r6, r1]
				temp = temp_pin_led_array[j];
    29b2:	5ca8      	ldrb	r0, [r5, r2]
				temp_pin_led_array[j] = temp_pin_led_array[j+1];
    29b4:	5c6c      	ldrb	r4, [r5, r1]
    29b6:	54ac      	strb	r4, [r5, r2]
				temp_pin_led_array[j+1] = temp;
    29b8:	5468      	strb	r0, [r5, r1]
    29ba:	e7ee      	b.n	299a <increasing_LED_sort_tag+0x16>
    29bc:	2301      	movs	r3, #1
    29be:	425b      	negs	r3, r3
    29c0:	469c      	mov	ip, r3
    29c2:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    29c4:	464b      	mov	r3, r9
    29c6:	2b00      	cmp	r3, #0
    29c8:	d006      	beq.n	29d8 <increasing_LED_sort_tag+0x54>
		for(j=0;j< N-i-1;j++)
    29ca:	46cc      	mov	ip, r9
    29cc:	2200      	movs	r2, #0
    29ce:	2300      	movs	r3, #0
    29d0:	4649      	mov	r1, r9
    29d2:	2900      	cmp	r1, #0
    29d4:	dce6      	bgt.n	29a4 <increasing_LED_sort_tag+0x20>
    29d6:	e7f1      	b.n	29bc <increasing_LED_sort_tag+0x38>
}
    29d8:	bc04      	pop	{r2}
    29da:	4691      	mov	r9, r2
    29dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	00002965 	.word	0x00002965
    29e4:	20000228 	.word	0x20000228
    29e8:	20000218 	.word	0x20000218

000029ec <LED_transfer_temp>:
{
    29ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_led_compares = 0;
    29ee:	2200      	movs	r2, #0
    29f0:	4b0d      	ldr	r3, [pc, #52]	; (2a28 <LED_transfer_temp+0x3c>)
    29f2:	701a      	strb	r2, [r3, #0]
    29f4:	2300      	movs	r3, #0
    29f6:	2600      	movs	r6, #0
		if(temp_compare_led_array[i] != 255)
    29f8:	4d0c      	ldr	r5, [pc, #48]	; (2a2c <LED_transfer_temp+0x40>)
		compare_led_array[i] = temp_compare_led_array[i] ;
    29fa:	4f0d      	ldr	r7, [pc, #52]	; (2a30 <LED_transfer_temp+0x44>)
		pin_led_array[i]  = temp_pin_led_array[i];
    29fc:	4c0d      	ldr	r4, [pc, #52]	; (2a34 <LED_transfer_temp+0x48>)
    29fe:	480e      	ldr	r0, [pc, #56]	; (2a38 <LED_transfer_temp+0x4c>)
    2a00:	e005      	b.n	2a0e <LED_transfer_temp+0x22>
		compare_led_array[i] = temp_compare_led_array[i] ;
    2a02:	54f9      	strb	r1, [r7, r3]
		pin_led_array[i]  = temp_pin_led_array[i];
    2a04:	5cc1      	ldrb	r1, [r0, r3]
    2a06:	54e1      	strb	r1, [r4, r3]
    2a08:	3301      	adds	r3, #1
	for(i=0;i<=NO_OF_LEDS-1;i++)
    2a0a:	2b04      	cmp	r3, #4
    2a0c:	d006      	beq.n	2a1c <LED_transfer_temp+0x30>
		if(temp_compare_led_array[i] != 255)
    2a0e:	5ce9      	ldrb	r1, [r5, r3]
    2a10:	29ff      	cmp	r1, #255	; 0xff
    2a12:	d0f6      	beq.n	2a02 <LED_transfer_temp+0x16>
			N_valid_led_compares++;
    2a14:	3201      	adds	r2, #1
    2a16:	b2d2      	uxtb	r2, r2
    2a18:	2601      	movs	r6, #1
    2a1a:	e7f2      	b.n	2a02 <LED_transfer_temp+0x16>
    2a1c:	2e00      	cmp	r6, #0
    2a1e:	d100      	bne.n	2a22 <LED_transfer_temp+0x36>
}
    2a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a22:	4b01      	ldr	r3, [pc, #4]	; (2a28 <LED_transfer_temp+0x3c>)
    2a24:	701a      	strb	r2, [r3, #0]
    2a26:	e7fb      	b.n	2a20 <LED_transfer_temp+0x34>
    2a28:	20000008 	.word	0x20000008
    2a2c:	20000228 	.word	0x20000228
    2a30:	2000021c 	.word	0x2000021c
    2a34:	20000224 	.word	0x20000224
    2a38:	20000218 	.word	0x20000218

00002a3c <tc_callback_LED_OF>:
{
    2a3c:	b570      	push	{r4, r5, r6, lr}
    2a3e:	0004      	movs	r4, r0
	serial_timeout_count++;
    2a40:	4a24      	ldr	r2, [pc, #144]	; (2ad4 <tc_callback_LED_OF+0x98>)
    2a42:	7813      	ldrb	r3, [r2, #0]
    2a44:	3301      	adds	r3, #1
    2a46:	b2db      	uxtb	r3, r3
    2a48:	7013      	strb	r3, [r2, #0]
	count_broadcast++;
    2a4a:	4923      	ldr	r1, [pc, #140]	; (2ad8 <tc_callback_LED_OF+0x9c>)
    2a4c:	780b      	ldrb	r3, [r1, #0]
    2a4e:	3301      	adds	r3, #1
    2a50:	b2db      	uxtb	r3, r3
    2a52:	700b      	strb	r3, [r1, #0]
	if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    2a54:	7813      	ldrb	r3, [r2, #0]
    2a56:	b2db      	uxtb	r3, r3
    2a58:	2b0a      	cmp	r3, #10
    2a5a:	d905      	bls.n	2a68 <tc_callback_LED_OF+0x2c>
		serial_timeout = true;
    2a5c:	2201      	movs	r2, #1
    2a5e:	4b1f      	ldr	r3, [pc, #124]	; (2adc <tc_callback_LED_OF+0xa0>)
    2a60:	701a      	strb	r2, [r3, #0]
		serial_timeout_count = 0;
    2a62:	2200      	movs	r2, #0
    2a64:	4b1b      	ldr	r3, [pc, #108]	; (2ad4 <tc_callback_LED_OF+0x98>)
    2a66:	701a      	strb	r2, [r3, #0]
	port_base->OUTSET.reg = CLEAR_LEDS ;
    2a68:	4a1d      	ldr	r2, [pc, #116]	; (2ae0 <tc_callback_LED_OF+0xa4>)
    2a6a:	4b1e      	ldr	r3, [pc, #120]	; (2ae4 <tc_callback_LED_OF+0xa8>)
    2a6c:	619a      	str	r2, [r3, #24]
	if(update_compare_led_array == true)
    2a6e:	4b1e      	ldr	r3, [pc, #120]	; (2ae8 <tc_callback_LED_OF+0xac>)
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d110      	bne.n	2a98 <tc_callback_LED_OF+0x5c>
	compare_led_array_ID = 0;
    2a76:	2300      	movs	r3, #0
    2a78:	4a1c      	ldr	r2, [pc, #112]	; (2aec <tc_callback_LED_OF+0xb0>)
    2a7a:	7013      	strb	r3, [r2, #0]
	pin_led_array_ID  = 0;
    2a7c:	4a1c      	ldr	r2, [pc, #112]	; (2af0 <tc_callback_LED_OF+0xb4>)
    2a7e:	7013      	strb	r3, [r2, #0]
	compare_value = compare_led_array[0];
    2a80:	4b1c      	ldr	r3, [pc, #112]	; (2af4 <tc_callback_LED_OF+0xb8>)
    2a82:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    2a84:	2aff      	cmp	r2, #255	; 0xff
    2a86:	d120      	bne.n	2aca <tc_callback_LED_OF+0x8e>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2a88:	4b1b      	ldr	r3, [pc, #108]	; (2af8 <tc_callback_LED_OF+0xbc>)
    2a8a:	2110      	movs	r1, #16
    2a8c:	681a      	ldr	r2, [r3, #0]
    2a8e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2a90:	7e5a      	ldrb	r2, [r3, #25]
    2a92:	438a      	bics	r2, r1
    2a94:	765a      	strb	r2, [r3, #25]
}
    2a96:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2a98:	4d17      	ldr	r5, [pc, #92]	; (2af8 <tc_callback_LED_OF+0xbc>)
    2a9a:	6828      	ldr	r0, [r5, #0]
    2a9c:	4b17      	ldr	r3, [pc, #92]	; (2afc <tc_callback_LED_OF+0xc0>)
    2a9e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2aa0:	4b17      	ldr	r3, [pc, #92]	; (2b00 <tc_callback_LED_OF+0xc4>)
    2aa2:	5c1b      	ldrb	r3, [r3, r0]
    2aa4:	221f      	movs	r2, #31
    2aa6:	401a      	ands	r2, r3
    2aa8:	2301      	movs	r3, #1
    2aaa:	4093      	lsls	r3, r2
    2aac:	4a15      	ldr	r2, [pc, #84]	; (2b04 <tc_callback_LED_OF+0xc8>)
    2aae:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2ab0:	7e6b      	ldrb	r3, [r5, #25]
    2ab2:	2210      	movs	r2, #16
    2ab4:	4313      	orrs	r3, r2
    2ab6:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ab8:	682b      	ldr	r3, [r5, #0]
    2aba:	2210      	movs	r2, #16
    2abc:	735a      	strb	r2, [r3, #13]
		LED_transfer_temp();
    2abe:	4b12      	ldr	r3, [pc, #72]	; (2b08 <tc_callback_LED_OF+0xcc>)
    2ac0:	4798      	blx	r3
		update_compare_led_array = false;
    2ac2:	2200      	movs	r2, #0
    2ac4:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <tc_callback_LED_OF+0xac>)
    2ac6:	701a      	strb	r2, [r3, #0]
    2ac8:	e7d5      	b.n	2a76 <tc_callback_LED_OF+0x3a>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    2aca:	2100      	movs	r1, #0
    2acc:	0020      	movs	r0, r4
    2ace:	4b0f      	ldr	r3, [pc, #60]	; (2b0c <tc_callback_LED_OF+0xd0>)
    2ad0:	4798      	blx	r3
    2ad2:	e7e0      	b.n	2a96 <tc_callback_LED_OF+0x5a>
    2ad4:	200000f4 	.word	0x200000f4
    2ad8:	200000f0 	.word	0x200000f0
    2adc:	200000f3 	.word	0x200000f3
    2ae0:	c0000300 	.word	0xc0000300
    2ae4:	41004400 	.word	0x41004400
    2ae8:	200000c6 	.word	0x200000c6
    2aec:	20000220 	.word	0x20000220
    2af0:	20000221 	.word	0x20000221
    2af4:	2000021c 	.word	0x2000021c
    2af8:	200001f8 	.word	0x200001f8
    2afc:	00001bed 	.word	0x00001bed
    2b00:	00003ebc 	.word	0x00003ebc
    2b04:	e000e100 	.word	0xe000e100
    2b08:	000029ed 	.word	0x000029ed
    2b0c:	00001e73 	.word	0x00001e73

00002b10 <LED_init_array>:
{
    2b10:	b510      	push	{r4, lr}
	initializing_LED_pin_array();
    2b12:	4b04      	ldr	r3, [pc, #16]	; (2b24 <LED_init_array+0x14>)
    2b14:	4798      	blx	r3
	initializing_LED_compare_array();
    2b16:	4b04      	ldr	r3, [pc, #16]	; (2b28 <LED_init_array+0x18>)
    2b18:	4798      	blx	r3
	increasing_LED_sort_tag();
    2b1a:	4b04      	ldr	r3, [pc, #16]	; (2b2c <LED_init_array+0x1c>)
    2b1c:	4798      	blx	r3
	LED_transfer_temp();
    2b1e:	4b04      	ldr	r3, [pc, #16]	; (2b30 <LED_init_array+0x20>)
    2b20:	4798      	blx	r3
}
    2b22:	bd10      	pop	{r4, pc}
    2b24:	00002939 	.word	0x00002939
    2b28:	00002951 	.word	0x00002951
    2b2c:	00002985 	.word	0x00002985
    2b30:	000029ed 	.word	0x000029ed

00002b34 <LED_timer_callbacks_init>:


void LED_timer_callbacks_init()
{
    2b34:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&led_tc_instance, tc_callback_LED_OF,TC_CALLBACK_OVERFLOW);
    2b36:	4d05      	ldr	r5, [pc, #20]	; (2b4c <LED_timer_callbacks_init+0x18>)
    2b38:	2200      	movs	r2, #0
    2b3a:	4905      	ldr	r1, [pc, #20]	; (2b50 <LED_timer_callbacks_init+0x1c>)
    2b3c:	0028      	movs	r0, r5
    2b3e:	4c05      	ldr	r4, [pc, #20]	; (2b54 <LED_timer_callbacks_init+0x20>)
    2b40:	47a0      	blx	r4
	tc_register_callback(&led_tc_instance, tc_callback_LED_PWM,TC_CALLBACK_CC_CHANNEL0);
    2b42:	2202      	movs	r2, #2
    2b44:	4904      	ldr	r1, [pc, #16]	; (2b58 <LED_timer_callbacks_init+0x24>)
    2b46:	0028      	movs	r0, r5
    2b48:	47a0      	blx	r4
	
}
    2b4a:	bd70      	pop	{r4, r5, r6, pc}
    2b4c:	200001f8 	.word	0x200001f8
    2b50:	00002a3d 	.word	0x00002a3d
    2b54:	00001ec3 	.word	0x00001ec3
    2b58:	00002689 	.word	0x00002689

00002b5c <LED_init>:


void LED_init()
{
    2b5c:	b510      	push	{r4, lr}
	LED_timer_init();
    2b5e:	4b04      	ldr	r3, [pc, #16]	; (2b70 <LED_init+0x14>)
    2b60:	4798      	blx	r3
	LED_setup_pins();
    2b62:	4b04      	ldr	r3, [pc, #16]	; (2b74 <LED_init+0x18>)
    2b64:	4798      	blx	r3
	LED_init_array();
    2b66:	4b04      	ldr	r3, [pc, #16]	; (2b78 <LED_init+0x1c>)
    2b68:	4798      	blx	r3
	//Initialize the timer callbacks
	LED_timer_callbacks_init();
    2b6a:	4b04      	ldr	r3, [pc, #16]	; (2b7c <LED_init+0x20>)
    2b6c:	4798      	blx	r3
    2b6e:	bd10      	pop	{r4, pc}
    2b70:	00002801 	.word	0x00002801
    2b74:	00002889 	.word	0x00002889
    2b78:	00002b11 	.word	0x00002b11
    2b7c:	00002b35 	.word	0x00002b35

00002b80 <tc_callback_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_PWM(struct tc_module *const module_inst)
{
    2b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b82:	46de      	mov	lr, fp
    2b84:	4657      	mov	r7, sl
    2b86:	4646      	mov	r6, r8
    2b88:	b5c0      	push	{r6, r7, lr}
    2b8a:	b082      	sub	sp, #8
    2b8c:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	volatile uint32_t count;
	
	if(first_time == false)
    2b8e:	4b4f      	ldr	r3, [pc, #316]	; (2ccc <tc_callback_PWM+0x14c>)
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d000      	beq.n	2b98 <tc_callback_PWM+0x18>
    2b96:	e091      	b.n	2cbc <tc_callback_PWM+0x13c>
	{
		port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
    2b98:	494d      	ldr	r1, [pc, #308]	; (2cd0 <tc_callback_PWM+0x150>)
    2b9a:	780b      	ldrb	r3, [r1, #0]
    2b9c:	1c5a      	adds	r2, r3, #1
    2b9e:	b2d2      	uxtb	r2, r2
    2ba0:	700a      	strb	r2, [r1, #0]
    2ba2:	494c      	ldr	r1, [pc, #304]	; (2cd4 <tc_callback_PWM+0x154>)
    2ba4:	5cc9      	ldrb	r1, [r1, r3]
	if (port_index < PORT_INST_NUM) {
    2ba6:	09c8      	lsrs	r0, r1, #7
		return NULL;
    2ba8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2baa:	2800      	cmp	r0, #0
    2bac:	d104      	bne.n	2bb8 <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    2bae:	094b      	lsrs	r3, r1, #5
    2bb0:	01db      	lsls	r3, r3, #7
    2bb2:	4849      	ldr	r0, [pc, #292]	; (2cd8 <tc_callback_PWM+0x158>)
    2bb4:	4684      	mov	ip, r0
    2bb6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2bb8:	201f      	movs	r0, #31
    2bba:	4008      	ands	r0, r1
    2bbc:	2101      	movs	r1, #1
    2bbe:	4081      	lsls	r1, r0
		port_base->OUTSET.reg = pin_mask;
    2bc0:	6199      	str	r1, [r3, #24]
		
		if(compare_array_ID < N_valid_compares-1 )
    2bc2:	4b46      	ldr	r3, [pc, #280]	; (2cdc <tc_callback_PWM+0x15c>)
    2bc4:	781e      	ldrb	r6, [r3, #0]
    2bc6:	4b46      	ldr	r3, [pc, #280]	; (2ce0 <tc_callback_PWM+0x160>)
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	3b01      	subs	r3, #1
    2bcc:	4698      	mov	r8, r3
    2bce:	429e      	cmp	r6, r3
    2bd0:	da6e      	bge.n	2cb0 <tc_callback_PWM+0x130>
		{
			compare_value_last = compare_array[compare_array_ID];
    2bd2:	4844      	ldr	r0, [pc, #272]	; (2ce4 <tc_callback_PWM+0x164>)
    2bd4:	5d81      	ldrb	r1, [r0, r6]
    2bd6:	4b44      	ldr	r3, [pc, #272]	; (2ce8 <tc_callback_PWM+0x168>)
    2bd8:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_array[++compare_array_ID];
    2bda:	3601      	adds	r6, #1
    2bdc:	b2f6      	uxtb	r6, r6
    2bde:	4b3f      	ldr	r3, [pc, #252]	; (2cdc <tc_callback_PWM+0x15c>)
    2be0:	701e      	strb	r6, [r3, #0]
    2be2:	0033      	movs	r3, r6
    2be4:	5d85      	ldrb	r5, [r0, r6]
    2be6:	4841      	ldr	r0, [pc, #260]	; (2cec <tc_callback_PWM+0x16c>)
    2be8:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    2bea:	42a9      	cmp	r1, r5
    2bec:	d135      	bne.n	2c5a <tc_callback_PWM+0xda>
    2bee:	45b0      	cmp	r8, r6
    2bf0:	db52      	blt.n	2c98 <tc_callback_PWM+0x118>
    2bf2:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    2bf4:	4937      	ldr	r1, [pc, #220]	; (2cd4 <tc_callback_PWM+0x154>)
    2bf6:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2bf8:	211f      	movs	r1, #31
    2bfa:	468a      	mov	sl, r1
    2bfc:	2701      	movs	r7, #1
				compare_value_last = compare_array[compare_array_ID];
    2bfe:	4c39      	ldr	r4, [pc, #228]	; (2ce4 <tc_callback_PWM+0x164>)
    2c00:	1ab6      	subs	r6, r6, r2
    2c02:	e00f      	b.n	2c24 <tc_callback_PWM+0xa4>
    2c04:	4655      	mov	r5, sl
    2c06:	4029      	ands	r1, r5
    2c08:	003d      	movs	r5, r7
    2c0a:	408d      	lsls	r5, r1
		port_base->OUTSET.reg = pin_mask;
    2c0c:	6185      	str	r5, [r0, #24]
    2c0e:	5ce1      	ldrb	r1, [r4, r3]
    2c10:	1993      	adds	r3, r2, r6
    2c12:	b2db      	uxtb	r3, r3
				compare_value_current = compare_array[++compare_array_ID];
    2c14:	9300      	str	r3, [sp, #0]
    2c16:	5ce0      	ldrb	r0, [r4, r3]
    2c18:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    2c1a:	4281      	cmp	r1, r0
    2c1c:	d112      	bne.n	2c44 <tc_callback_PWM+0xc4>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    2c1e:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    2c20:	4598      	cmp	r8, r3
    2c22:	db2c      	blt.n	2c7e <tc_callback_PWM+0xfe>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    2c24:	1c42      	adds	r2, r0, #1
    2c26:	b2d2      	uxtb	r2, r2
    2c28:	4659      	mov	r1, fp
    2c2a:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    2c2c:	09c8      	lsrs	r0, r1, #7
    2c2e:	4684      	mov	ip, r0
		return NULL;
    2c30:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    2c32:	4665      	mov	r5, ip
    2c34:	2d00      	cmp	r5, #0
    2c36:	d1e5      	bne.n	2c04 <tc_callback_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    2c38:	0948      	lsrs	r0, r1, #5
    2c3a:	01c0      	lsls	r0, r0, #7
    2c3c:	4d26      	ldr	r5, [pc, #152]	; (2cd8 <tc_callback_PWM+0x158>)
    2c3e:	46ac      	mov	ip, r5
    2c40:	4460      	add	r0, ip
    2c42:	e7df      	b.n	2c04 <tc_callback_PWM+0x84>
    2c44:	0005      	movs	r5, r0
    2c46:	4b28      	ldr	r3, [pc, #160]	; (2ce8 <tc_callback_PWM+0x168>)
    2c48:	7019      	strb	r1, [r3, #0]
    2c4a:	4b24      	ldr	r3, [pc, #144]	; (2cdc <tc_callback_PWM+0x15c>)
    2c4c:	4668      	mov	r0, sp
    2c4e:	7800      	ldrb	r0, [r0, #0]
    2c50:	7018      	strb	r0, [r3, #0]
    2c52:	4b26      	ldr	r3, [pc, #152]	; (2cec <tc_callback_PWM+0x16c>)
    2c54:	701d      	strb	r5, [r3, #0]
    2c56:	4b1e      	ldr	r3, [pc, #120]	; (2cd0 <tc_callback_PWM+0x150>)
    2c58:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    2c5a:	2dff      	cmp	r5, #255	; 0xff
    2c5c:	d01e      	beq.n	2c9c <tc_callback_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    2c5e:	9c01      	ldr	r4, [sp, #4]
    2c60:	0020      	movs	r0, r4
    2c62:	4b23      	ldr	r3, [pc, #140]	; (2cf0 <tc_callback_PWM+0x170>)
    2c64:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    2c66:	4b21      	ldr	r3, [pc, #132]	; (2cec <tc_callback_PWM+0x16c>)
    2c68:	781a      	ldrb	r2, [r3, #0]
    2c6a:	2100      	movs	r1, #0
    2c6c:	0020      	movs	r0, r4
    2c6e:	4b21      	ldr	r3, [pc, #132]	; (2cf4 <tc_callback_PWM+0x174>)
    2c70:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    2c72:	b002      	add	sp, #8
    2c74:	bc1c      	pop	{r2, r3, r4}
    2c76:	4690      	mov	r8, r2
    2c78:	469a      	mov	sl, r3
    2c7a:	46a3      	mov	fp, r4
    2c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c7e:	4665      	mov	r5, ip
    2c80:	4b19      	ldr	r3, [pc, #100]	; (2ce8 <tc_callback_PWM+0x168>)
    2c82:	7019      	strb	r1, [r3, #0]
    2c84:	4b15      	ldr	r3, [pc, #84]	; (2cdc <tc_callback_PWM+0x15c>)
    2c86:	4668      	mov	r0, sp
    2c88:	7800      	ldrb	r0, [r0, #0]
    2c8a:	7018      	strb	r0, [r3, #0]
    2c8c:	4b17      	ldr	r3, [pc, #92]	; (2cec <tc_callback_PWM+0x16c>)
    2c8e:	7019      	strb	r1, [r3, #0]
    2c90:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <tc_callback_PWM+0x150>)
    2c92:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[++compare_array_ID];
    2c94:	4661      	mov	r1, ip
    2c96:	e7e0      	b.n	2c5a <tc_callback_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    2c98:	000d      	movs	r5, r1
    2c9a:	e7de      	b.n	2c5a <tc_callback_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    2c9c:	9c01      	ldr	r4, [sp, #4]
    2c9e:	0020      	movs	r0, r4
    2ca0:	4b13      	ldr	r3, [pc, #76]	; (2cf0 <tc_callback_PWM+0x170>)
    2ca2:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2ca4:	2200      	movs	r2, #0
    2ca6:	2100      	movs	r1, #0
    2ca8:	0020      	movs	r0, r4
    2caa:	4b12      	ldr	r3, [pc, #72]	; (2cf4 <tc_callback_PWM+0x174>)
    2cac:	4798      	blx	r3
    2cae:	e7e0      	b.n	2c72 <tc_callback_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2cb0:	2200      	movs	r2, #0
    2cb2:	2100      	movs	r1, #0
    2cb4:	9801      	ldr	r0, [sp, #4]
    2cb6:	4b0f      	ldr	r3, [pc, #60]	; (2cf4 <tc_callback_PWM+0x174>)
    2cb8:	4798      	blx	r3
    2cba:	e7da      	b.n	2c72 <tc_callback_PWM+0xf2>
		first_time = false;
    2cbc:	2200      	movs	r2, #0
    2cbe:	4b03      	ldr	r3, [pc, #12]	; (2ccc <tc_callback_PWM+0x14c>)
    2cc0:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2cc2:	2100      	movs	r1, #0
    2cc4:	9801      	ldr	r0, [sp, #4]
    2cc6:	4b0b      	ldr	r3, [pc, #44]	; (2cf4 <tc_callback_PWM+0x174>)
    2cc8:	4798      	blx	r3
}
    2cca:	e7d2      	b.n	2c72 <tc_callback_PWM+0xf2>
    2ccc:	2000000b 	.word	0x2000000b
    2cd0:	2000025e 	.word	0x2000025e
    2cd4:	20000248 	.word	0x20000248
    2cd8:	41004400 	.word	0x41004400
    2cdc:	2000026e 	.word	0x2000026e
    2ce0:	2000000a 	.word	0x2000000a
    2ce4:	20000258 	.word	0x20000258
    2ce8:	200000c8 	.word	0x200000c8
    2cec:	200000c7 	.word	0x200000c7
    2cf0:	00001e41 	.word	0x00001e41
    2cf4:	00001e73 	.word	0x00001e73

00002cf8 <transfer_temp>:
{
    2cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_compares = 0;
    2cfa:	2200      	movs	r2, #0
    2cfc:	4b0d      	ldr	r3, [pc, #52]	; (2d34 <transfer_temp+0x3c>)
    2cfe:	701a      	strb	r2, [r3, #0]
    2d00:	2300      	movs	r3, #0
    2d02:	2600      	movs	r6, #0
		if(temp_compare_array[i] != 255)
    2d04:	4d0c      	ldr	r5, [pc, #48]	; (2d38 <transfer_temp+0x40>)
		compare_array[i] = temp_compare_array[i] ;
    2d06:	4f0d      	ldr	r7, [pc, #52]	; (2d3c <transfer_temp+0x44>)
		pin_array[i]  = temp_pin_array[i];
    2d08:	4c0d      	ldr	r4, [pc, #52]	; (2d40 <transfer_temp+0x48>)
    2d0a:	480e      	ldr	r0, [pc, #56]	; (2d44 <transfer_temp+0x4c>)
    2d0c:	e005      	b.n	2d1a <transfer_temp+0x22>
		compare_array[i] = temp_compare_array[i] ;
    2d0e:	54f9      	strb	r1, [r7, r3]
		pin_array[i]  = temp_pin_array[i];
    2d10:	5cc1      	ldrb	r1, [r0, r3]
    2d12:	54e1      	strb	r1, [r4, r3]
    2d14:	3301      	adds	r3, #1
	for(i=0;i<=5;i++)
    2d16:	2b06      	cmp	r3, #6
    2d18:	d006      	beq.n	2d28 <transfer_temp+0x30>
		if(temp_compare_array[i] != 255)
    2d1a:	5ce9      	ldrb	r1, [r5, r3]
    2d1c:	29ff      	cmp	r1, #255	; 0xff
    2d1e:	d0f6      	beq.n	2d0e <transfer_temp+0x16>
			N_valid_compares++;
    2d20:	3201      	adds	r2, #1
    2d22:	b2d2      	uxtb	r2, r2
    2d24:	2601      	movs	r6, #1
    2d26:	e7f2      	b.n	2d0e <transfer_temp+0x16>
    2d28:	2e00      	cmp	r6, #0
    2d2a:	d100      	bne.n	2d2e <transfer_temp+0x36>
}
    2d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d2e:	4b01      	ldr	r3, [pc, #4]	; (2d34 <transfer_temp+0x3c>)
    2d30:	701a      	strb	r2, [r3, #0]
    2d32:	e7fb      	b.n	2d2c <transfer_temp+0x34>
    2d34:	2000000a 	.word	0x2000000a
    2d38:	20000250 	.word	0x20000250
    2d3c:	20000258 	.word	0x20000258
    2d40:	20000248 	.word	0x20000248
    2d44:	20000260 	.word	0x20000260

00002d48 <tc_callback_OF>:
{
    2d48:	b570      	push	{r4, r5, r6, lr}
    2d4a:	0004      	movs	r4, r0
	port_base->OUTCLR.reg = CLEAR_ORB ;
    2d4c:	4a1a      	ldr	r2, [pc, #104]	; (2db8 <tc_callback_OF+0x70>)
    2d4e:	4b1b      	ldr	r3, [pc, #108]	; (2dbc <tc_callback_OF+0x74>)
    2d50:	615a      	str	r2, [r3, #20]
	if(update_compare_array == true)
    2d52:	4b1b      	ldr	r3, [pc, #108]	; (2dc0 <tc_callback_OF+0x78>)
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d110      	bne.n	2d7c <tc_callback_OF+0x34>
	compare_array_ID = 0;
    2d5a:	2300      	movs	r3, #0
    2d5c:	4a19      	ldr	r2, [pc, #100]	; (2dc4 <tc_callback_OF+0x7c>)
    2d5e:	7013      	strb	r3, [r2, #0]
	pin_array_ID  = 0;
    2d60:	4a19      	ldr	r2, [pc, #100]	; (2dc8 <tc_callback_OF+0x80>)
    2d62:	7013      	strb	r3, [r2, #0]
	compare_value = compare_array[0];
    2d64:	4b19      	ldr	r3, [pc, #100]	; (2dcc <tc_callback_OF+0x84>)
    2d66:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    2d68:	2aff      	cmp	r2, #255	; 0xff
    2d6a:	d120      	bne.n	2dae <tc_callback_OF+0x66>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2d6c:	4b18      	ldr	r3, [pc, #96]	; (2dd0 <tc_callback_OF+0x88>)
    2d6e:	2110      	movs	r1, #16
    2d70:	681a      	ldr	r2, [r3, #0]
    2d72:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2d74:	7e5a      	ldrb	r2, [r3, #25]
    2d76:	438a      	bics	r2, r1
    2d78:	765a      	strb	r2, [r3, #25]
}
    2d7a:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d7c:	4d14      	ldr	r5, [pc, #80]	; (2dd0 <tc_callback_OF+0x88>)
    2d7e:	6828      	ldr	r0, [r5, #0]
    2d80:	4b14      	ldr	r3, [pc, #80]	; (2dd4 <tc_callback_OF+0x8c>)
    2d82:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d84:	4b14      	ldr	r3, [pc, #80]	; (2dd8 <tc_callback_OF+0x90>)
    2d86:	5c1b      	ldrb	r3, [r3, r0]
    2d88:	221f      	movs	r2, #31
    2d8a:	401a      	ands	r2, r3
    2d8c:	2301      	movs	r3, #1
    2d8e:	4093      	lsls	r3, r2
    2d90:	4a12      	ldr	r2, [pc, #72]	; (2ddc <tc_callback_OF+0x94>)
    2d92:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2d94:	7e6b      	ldrb	r3, [r5, #25]
    2d96:	2210      	movs	r2, #16
    2d98:	4313      	orrs	r3, r2
    2d9a:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2d9c:	682b      	ldr	r3, [r5, #0]
    2d9e:	2210      	movs	r2, #16
    2da0:	735a      	strb	r2, [r3, #13]
		transfer_temp();
    2da2:	4b0f      	ldr	r3, [pc, #60]	; (2de0 <tc_callback_OF+0x98>)
    2da4:	4798      	blx	r3
		update_compare_array = false;
    2da6:	2200      	movs	r2, #0
    2da8:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <tc_callback_OF+0x78>)
    2daa:	701a      	strb	r2, [r3, #0]
    2dac:	e7d5      	b.n	2d5a <tc_callback_OF+0x12>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    2dae:	2100      	movs	r1, #0
    2db0:	0020      	movs	r0, r4
    2db2:	4b0c      	ldr	r3, [pc, #48]	; (2de4 <tc_callback_OF+0x9c>)
    2db4:	4798      	blx	r3
    2db6:	e7e0      	b.n	2d7a <tc_callback_OF+0x32>
    2db8:	08c38000 	.word	0x08c38000
    2dbc:	41004400 	.word	0x41004400
    2dc0:	200000c9 	.word	0x200000c9
    2dc4:	2000026e 	.word	0x2000026e
    2dc8:	2000025e 	.word	0x2000025e
    2dcc:	20000258 	.word	0x20000258
    2dd0:	2000022c 	.word	0x2000022c
    2dd4:	00001bed 	.word	0x00001bed
    2dd8:	00003ec0 	.word	0x00003ec0
    2ddc:	e000e100 	.word	0xe000e100
    2de0:	00002cf9 	.word	0x00002cf9
    2de4:	00001e73 	.word	0x00001e73

00002de8 <transfer_temp_2>:
{
    2de8:	2300      	movs	r3, #0
		temp_compare_array[i] = temp_compare_array_2[i] ;
    2dea:	4804      	ldr	r0, [pc, #16]	; (2dfc <transfer_temp_2+0x14>)
    2dec:	4904      	ldr	r1, [pc, #16]	; (2e00 <transfer_temp_2+0x18>)
    2dee:	5cca      	ldrb	r2, [r1, r3]
    2df0:	54c2      	strb	r2, [r0, r3]
    2df2:	3301      	adds	r3, #1
	for(i=0;i<=5;i++)
    2df4:	2b06      	cmp	r3, #6
    2df6:	d1fa      	bne.n	2dee <transfer_temp_2+0x6>
}
    2df8:	4770      	bx	lr
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	20000250 	.word	0x20000250
    2e00:	20000268 	.word	0x20000268

00002e04 <increasing_sort_tag>:
{
    2e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e06:	46ce      	mov	lr, r9
    2e08:	b500      	push	{lr}
	transfer_temp_2();
    2e0a:	4b15      	ldr	r3, [pc, #84]	; (2e60 <increasing_sort_tag+0x5c>)
    2e0c:	4798      	blx	r3
    2e0e:	2305      	movs	r3, #5
    2e10:	4699      	mov	r9, r3
			if(temp_compare_array[j]>temp_compare_array[j+1])
    2e12:	4f14      	ldr	r7, [pc, #80]	; (2e64 <increasing_sort_tag+0x60>)
				temp_compare_array[j] = temp_compare_array[j+1];
    2e14:	003e      	movs	r6, r7
				temp = temp_pin_array[j];
    2e16:	4d14      	ldr	r5, [pc, #80]	; (2e68 <increasing_sort_tag+0x64>)
    2e18:	e017      	b.n	2e4a <increasing_sort_tag+0x46>
		for(j=0;j< N-i-1;j++)
    2e1a:	3301      	adds	r3, #1
    2e1c:	b2db      	uxtb	r3, r3
    2e1e:	001a      	movs	r2, r3
    2e20:	4563      	cmp	r3, ip
    2e22:	da0b      	bge.n	2e3c <increasing_sort_tag+0x38>
			if(temp_compare_array[j]>temp_compare_array[j+1])
    2e24:	5cb8      	ldrb	r0, [r7, r2]
    2e26:	1c51      	adds	r1, r2, #1
    2e28:	5c7c      	ldrb	r4, [r7, r1]
    2e2a:	42a0      	cmp	r0, r4
    2e2c:	d9f5      	bls.n	2e1a <increasing_sort_tag+0x16>
				temp_compare_array[j] = temp_compare_array[j+1];
    2e2e:	54b4      	strb	r4, [r6, r2]
				temp_compare_array[j+1]= temp;
    2e30:	5470      	strb	r0, [r6, r1]
				temp = temp_pin_array[j];
    2e32:	5ca8      	ldrb	r0, [r5, r2]
				temp_pin_array[j] = temp_pin_array[j+1];
    2e34:	5c6c      	ldrb	r4, [r5, r1]
    2e36:	54ac      	strb	r4, [r5, r2]
				temp_pin_array[j+1] = temp;
    2e38:	5468      	strb	r0, [r5, r1]
    2e3a:	e7ee      	b.n	2e1a <increasing_sort_tag+0x16>
    2e3c:	2301      	movs	r3, #1
    2e3e:	425b      	negs	r3, r3
    2e40:	469c      	mov	ip, r3
    2e42:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    2e44:	464b      	mov	r3, r9
    2e46:	2b00      	cmp	r3, #0
    2e48:	d006      	beq.n	2e58 <increasing_sort_tag+0x54>
		for(j=0;j< N-i-1;j++)
    2e4a:	46cc      	mov	ip, r9
    2e4c:	2200      	movs	r2, #0
    2e4e:	2300      	movs	r3, #0
    2e50:	4649      	mov	r1, r9
    2e52:	2900      	cmp	r1, #0
    2e54:	dce6      	bgt.n	2e24 <increasing_sort_tag+0x20>
    2e56:	e7f1      	b.n	2e3c <increasing_sort_tag+0x38>
}
    2e58:	bc04      	pop	{r2}
    2e5a:	4691      	mov	r9, r2
    2e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	00002de9 	.word	0x00002de9
    2e64:	20000250 	.word	0x20000250
    2e68:	20000260 	.word	0x20000260

00002e6c <ORB_timer_init>:
{
    2e6c:	b510      	push	{r4, lr}
    2e6e:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    2e70:	aa01      	add	r2, sp, #4
    2e72:	2300      	movs	r3, #0
    2e74:	2100      	movs	r1, #0
    2e76:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2e78:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2e7a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2e7c:	2000      	movs	r0, #0
    2e7e:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2e80:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e82:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e84:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e86:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e88:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2e8a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2e8c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2e8e:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2e90:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2e92:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2e94:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2e96:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2e98:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2e9a:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    2e9c:	23c0      	movs	r3, #192	; 0xc0
    2e9e:	00db      	lsls	r3, r3, #3
    2ea0:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    2ea2:	2304      	movs	r3, #4
    2ea4:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    2ea6:	21ff      	movs	r1, #255	; 0xff
    2ea8:	3325      	adds	r3, #37	; 0x25
    2eaa:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    2eac:	4c07      	ldr	r4, [pc, #28]	; (2ecc <ORB_timer_init+0x60>)
    2eae:	4908      	ldr	r1, [pc, #32]	; (2ed0 <ORB_timer_init+0x64>)
    2eb0:	0020      	movs	r0, r4
    2eb2:	4b08      	ldr	r3, [pc, #32]	; (2ed4 <ORB_timer_init+0x68>)
    2eb4:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2eb6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2eb8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2eba:	b25b      	sxtb	r3, r3
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	dbfb      	blt.n	2eb8 <ORB_timer_init+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2ec0:	8813      	ldrh	r3, [r2, #0]
    2ec2:	2102      	movs	r1, #2
    2ec4:	430b      	orrs	r3, r1
    2ec6:	8013      	strh	r3, [r2, #0]
}
    2ec8:	b00e      	add	sp, #56	; 0x38
    2eca:	bd10      	pop	{r4, pc}
    2ecc:	2000022c 	.word	0x2000022c
    2ed0:	42001800 	.word	0x42001800
    2ed4:	00001c11 	.word	0x00001c11

00002ed8 <set_drivestrength_ORB>:
{
    2ed8:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    2eda:	2201      	movs	r2, #1
    2edc:	4902      	ldr	r1, [pc, #8]	; (2ee8 <set_drivestrength_ORB+0x10>)
    2ede:	4803      	ldr	r0, [pc, #12]	; (2eec <set_drivestrength_ORB+0x14>)
    2ee0:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <set_drivestrength_ORB+0x18>)
    2ee2:	4798      	blx	r3
}
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	08c38000 	.word	0x08c38000
    2eec:	41004400 	.word	0x41004400
    2ef0:	00003641 	.word	0x00003641

00002ef4 <ORB_setup_pins>:
{
    2ef4:	b530      	push	{r4, r5, lr}
    2ef6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2ef8:	ac01      	add	r4, sp, #4
    2efa:	2301      	movs	r3, #1
    2efc:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2efe:	2200      	movs	r2, #0
    2f00:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2f02:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ORB_R1, &config_port_pin);
    2f04:	0021      	movs	r1, r4
    2f06:	200f      	movs	r0, #15
    2f08:	4d0b      	ldr	r5, [pc, #44]	; (2f38 <ORB_setup_pins+0x44>)
    2f0a:	47a8      	blx	r5
	port_pin_set_config(ORB_G1, &config_port_pin);
    2f0c:	0021      	movs	r1, r4
    2f0e:	2010      	movs	r0, #16
    2f10:	47a8      	blx	r5
	port_pin_set_config(ORB_B1, &config_port_pin);
    2f12:	0021      	movs	r1, r4
    2f14:	2011      	movs	r0, #17
    2f16:	47a8      	blx	r5
	port_pin_set_config(ORB_R2, &config_port_pin);
    2f18:	0021      	movs	r1, r4
    2f1a:	2016      	movs	r0, #22
    2f1c:	47a8      	blx	r5
	port_pin_set_config(ORB_G2, &config_port_pin);
    2f1e:	0021      	movs	r1, r4
    2f20:	2017      	movs	r0, #23
    2f22:	47a8      	blx	r5
	port_pin_set_config(ORB_B2, &config_port_pin);
    2f24:	0021      	movs	r1, r4
    2f26:	201b      	movs	r0, #27
    2f28:	47a8      	blx	r5
	set_drivestrength_ORB();
    2f2a:	4b04      	ldr	r3, [pc, #16]	; (2f3c <ORB_setup_pins+0x48>)
    2f2c:	4798      	blx	r3
	port_base->OUTCLR.reg = CLEAR_ORB ;
    2f2e:	4a04      	ldr	r2, [pc, #16]	; (2f40 <ORB_setup_pins+0x4c>)
    2f30:	4b04      	ldr	r3, [pc, #16]	; (2f44 <ORB_setup_pins+0x50>)
    2f32:	615a      	str	r2, [r3, #20]
}
    2f34:	b003      	add	sp, #12
    2f36:	bd30      	pop	{r4, r5, pc}
    2f38:	00002665 	.word	0x00002665
    2f3c:	00002ed9 	.word	0x00002ed9
    2f40:	08c38000 	.word	0x08c38000
    2f44:	41004400 	.word	0x41004400

00002f48 <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    2f48:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    2f4a:	4d05      	ldr	r5, [pc, #20]	; (2f60 <ORB_timer_callbacks_init+0x18>)
    2f4c:	2200      	movs	r2, #0
    2f4e:	4905      	ldr	r1, [pc, #20]	; (2f64 <ORB_timer_callbacks_init+0x1c>)
    2f50:	0028      	movs	r0, r5
    2f52:	4c05      	ldr	r4, [pc, #20]	; (2f68 <ORB_timer_callbacks_init+0x20>)
    2f54:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    2f56:	2202      	movs	r2, #2
    2f58:	4904      	ldr	r1, [pc, #16]	; (2f6c <ORB_timer_callbacks_init+0x24>)
    2f5a:	0028      	movs	r0, r5
    2f5c:	47a0      	blx	r4
	
}
    2f5e:	bd70      	pop	{r4, r5, r6, pc}
    2f60:	2000022c 	.word	0x2000022c
    2f64:	00002d49 	.word	0x00002d49
    2f68:	00001ec3 	.word	0x00001ec3
    2f6c:	00002b81 	.word	0x00002b81

00002f70 <enable_ORB>:

void enable_ORB()
{
    2f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f72:	46ce      	mov	lr, r9
    2f74:	4647      	mov	r7, r8
    2f76:	b580      	push	{r7, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f78:	4c13      	ldr	r4, [pc, #76]	; (2fc8 <enable_ORB+0x58>)
    2f7a:	6820      	ldr	r0, [r4, #0]
    2f7c:	4b13      	ldr	r3, [pc, #76]	; (2fcc <enable_ORB+0x5c>)
    2f7e:	4699      	mov	r9, r3
    2f80:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f82:	4b13      	ldr	r3, [pc, #76]	; (2fd0 <enable_ORB+0x60>)
    2f84:	4698      	mov	r8, r3
    2f86:	5c1b      	ldrb	r3, [r3, r0]
    2f88:	261f      	movs	r6, #31
    2f8a:	4033      	ands	r3, r6
    2f8c:	2501      	movs	r5, #1
    2f8e:	002a      	movs	r2, r5
    2f90:	409a      	lsls	r2, r3
    2f92:	4f10      	ldr	r7, [pc, #64]	; (2fd4 <enable_ORB+0x64>)
    2f94:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2f96:	7e63      	ldrb	r3, [r4, #25]
    2f98:	2201      	movs	r2, #1
    2f9a:	4313      	orrs	r3, r2
    2f9c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2f9e:	6823      	ldr	r3, [r4, #0]
    2fa0:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2fa2:	0018      	movs	r0, r3
    2fa4:	47c8      	blx	r9
    2fa6:	4643      	mov	r3, r8
    2fa8:	5c1b      	ldrb	r3, [r3, r0]
    2faa:	401e      	ands	r6, r3
    2fac:	40b5      	lsls	r5, r6
    2fae:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2fb0:	7e63      	ldrb	r3, [r4, #25]
    2fb2:	2210      	movs	r2, #16
    2fb4:	4313      	orrs	r3, r2
    2fb6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2fb8:	6823      	ldr	r3, [r4, #0]
    2fba:	2210      	movs	r2, #16
    2fbc:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    2fbe:	bc0c      	pop	{r2, r3}
    2fc0:	4690      	mov	r8, r2
    2fc2:	4699      	mov	r9, r3
    2fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	2000022c 	.word	0x2000022c
    2fcc:	00001bed 	.word	0x00001bed
    2fd0:	00003ec0 	.word	0x00003ec0
    2fd4:	e000e100 	.word	0xe000e100

00002fd8 <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array[0]  = ORB_R1;
    2fd8:	4b06      	ldr	r3, [pc, #24]	; (2ff4 <initializing_pin_array+0x1c>)
    2fda:	220f      	movs	r2, #15
    2fdc:	701a      	strb	r2, [r3, #0]
	temp_pin_array[1]  = ORB_G1;
    2fde:	3201      	adds	r2, #1
    2fe0:	705a      	strb	r2, [r3, #1]
	temp_pin_array[2]  = ORB_B1;
    2fe2:	3201      	adds	r2, #1
    2fe4:	709a      	strb	r2, [r3, #2]
	temp_pin_array[3]  = ORB_R2;
    2fe6:	3205      	adds	r2, #5
    2fe8:	70da      	strb	r2, [r3, #3]
	temp_pin_array[4]  = ORB_G2;
    2fea:	3201      	adds	r2, #1
    2fec:	711a      	strb	r2, [r3, #4]
	temp_pin_array[5]  = ORB_B2;
    2fee:	3204      	adds	r2, #4
    2ff0:	715a      	strb	r2, [r3, #5]
}
    2ff2:	4770      	bx	lr
    2ff4:	20000260 	.word	0x20000260

00002ff8 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 255;//Left -- R
    2ff8:	4b04      	ldr	r3, [pc, #16]	; (300c <initializing_compare_array+0x14>)
    2ffa:	22ff      	movs	r2, #255	; 0xff
    2ffc:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    2ffe:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    3000:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 255;//Right -- R
    3002:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right  -- G
    3004:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    3006:	715a      	strb	r2, [r3, #5]
}
    3008:	4770      	bx	lr
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	20000268 	.word	0x20000268

00003010 <ORB_init_array>:


void ORB_init_array()
{
    3010:	b510      	push	{r4, lr}
	initializing_pin_array();
    3012:	4b05      	ldr	r3, [pc, #20]	; (3028 <ORB_init_array+0x18>)
    3014:	4798      	blx	r3
	initializing_compare_array();
    3016:	4b05      	ldr	r3, [pc, #20]	; (302c <ORB_init_array+0x1c>)
    3018:	4798      	blx	r3
	transfer_temp_2();
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <ORB_init_array+0x20>)
    301c:	4798      	blx	r3
	increasing_sort_tag();
    301e:	4b05      	ldr	r3, [pc, #20]	; (3034 <ORB_init_array+0x24>)
    3020:	4798      	blx	r3
	transfer_temp();
    3022:	4b05      	ldr	r3, [pc, #20]	; (3038 <ORB_init_array+0x28>)
    3024:	4798      	blx	r3
}
    3026:	bd10      	pop	{r4, pc}
    3028:	00002fd9 	.word	0x00002fd9
    302c:	00002ff9 	.word	0x00002ff9
    3030:	00002de9 	.word	0x00002de9
    3034:	00002e05 	.word	0x00002e05
    3038:	00002cf9 	.word	0x00002cf9

0000303c <ORB_init>:

void ORB_init()
{
    303c:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    303e:	4b04      	ldr	r3, [pc, #16]	; (3050 <ORB_init+0x14>)
    3040:	4798      	blx	r3
	ORB_setup_pins();
    3042:	4b04      	ldr	r3, [pc, #16]	; (3054 <ORB_init+0x18>)
    3044:	4798      	blx	r3
	ORB_init_array();
    3046:	4b04      	ldr	r3, [pc, #16]	; (3058 <ORB_init+0x1c>)
    3048:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    304a:	4b04      	ldr	r3, [pc, #16]	; (305c <ORB_init+0x20>)
    304c:	4798      	blx	r3

    304e:	bd10      	pop	{r4, pc}
    3050:	00002e6d 	.word	0x00002e6d
    3054:	00002ef5 	.word	0x00002ef5
    3058:	00003011 	.word	0x00003011
    305c:	00002f49 	.word	0x00002f49

00003060 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3060:	4770      	bx	lr
	...

00003064 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3064:	4b0c      	ldr	r3, [pc, #48]	; (3098 <cpu_irq_enter_critical+0x34>)
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	2b00      	cmp	r3, #0
    306a:	d106      	bne.n	307a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    306c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3070:	2b00      	cmp	r3, #0
    3072:	d007      	beq.n	3084 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3074:	2200      	movs	r2, #0
    3076:	4b09      	ldr	r3, [pc, #36]	; (309c <cpu_irq_enter_critical+0x38>)
    3078:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    307a:	4a07      	ldr	r2, [pc, #28]	; (3098 <cpu_irq_enter_critical+0x34>)
    307c:	6813      	ldr	r3, [r2, #0]
    307e:	3301      	adds	r3, #1
    3080:	6013      	str	r3, [r2, #0]
}
    3082:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3084:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3086:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    308a:	2200      	movs	r2, #0
    308c:	4b04      	ldr	r3, [pc, #16]	; (30a0 <cpu_irq_enter_critical+0x3c>)
    308e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3090:	3201      	adds	r2, #1
    3092:	4b02      	ldr	r3, [pc, #8]	; (309c <cpu_irq_enter_critical+0x38>)
    3094:	701a      	strb	r2, [r3, #0]
    3096:	e7f0      	b.n	307a <cpu_irq_enter_critical+0x16>
    3098:	200000cc 	.word	0x200000cc
    309c:	200000d0 	.word	0x200000d0
    30a0:	2000000c 	.word	0x2000000c

000030a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    30a4:	4b08      	ldr	r3, [pc, #32]	; (30c8 <cpu_irq_leave_critical+0x24>)
    30a6:	681a      	ldr	r2, [r3, #0]
    30a8:	3a01      	subs	r2, #1
    30aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    30ac:	681b      	ldr	r3, [r3, #0]
    30ae:	2b00      	cmp	r3, #0
    30b0:	d109      	bne.n	30c6 <cpu_irq_leave_critical+0x22>
    30b2:	4b06      	ldr	r3, [pc, #24]	; (30cc <cpu_irq_leave_critical+0x28>)
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d005      	beq.n	30c6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    30ba:	2201      	movs	r2, #1
    30bc:	4b04      	ldr	r3, [pc, #16]	; (30d0 <cpu_irq_leave_critical+0x2c>)
    30be:	701a      	strb	r2, [r3, #0]
    30c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30c4:	b662      	cpsie	i
	}
}
    30c6:	4770      	bx	lr
    30c8:	200000cc 	.word	0x200000cc
    30cc:	200000d0 	.word	0x200000d0
    30d0:	2000000c 	.word	0x2000000c

000030d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    30d4:	b510      	push	{r4, lr}
	switch (clock_source) {
    30d6:	2808      	cmp	r0, #8
    30d8:	d803      	bhi.n	30e2 <system_clock_source_get_hz+0xe>
    30da:	0080      	lsls	r0, r0, #2
    30dc:	4b1b      	ldr	r3, [pc, #108]	; (314c <system_clock_source_get_hz+0x78>)
    30de:	581b      	ldr	r3, [r3, r0]
    30e0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    30e2:	2000      	movs	r0, #0
    30e4:	e030      	b.n	3148 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    30e6:	4b1a      	ldr	r3, [pc, #104]	; (3150 <system_clock_source_get_hz+0x7c>)
    30e8:	6918      	ldr	r0, [r3, #16]
    30ea:	e02d      	b.n	3148 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    30ec:	4b19      	ldr	r3, [pc, #100]	; (3154 <system_clock_source_get_hz+0x80>)
    30ee:	6a1b      	ldr	r3, [r3, #32]
    30f0:	059b      	lsls	r3, r3, #22
    30f2:	0f9b      	lsrs	r3, r3, #30
    30f4:	4818      	ldr	r0, [pc, #96]	; (3158 <system_clock_source_get_hz+0x84>)
    30f6:	40d8      	lsrs	r0, r3
    30f8:	e026      	b.n	3148 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    30fa:	4b15      	ldr	r3, [pc, #84]	; (3150 <system_clock_source_get_hz+0x7c>)
    30fc:	6958      	ldr	r0, [r3, #20]
    30fe:	e023      	b.n	3148 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3100:	4b13      	ldr	r3, [pc, #76]	; (3150 <system_clock_source_get_hz+0x7c>)
    3102:	681b      	ldr	r3, [r3, #0]
			return 0;
    3104:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3106:	079b      	lsls	r3, r3, #30
    3108:	d51e      	bpl.n	3148 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    310a:	4912      	ldr	r1, [pc, #72]	; (3154 <system_clock_source_get_hz+0x80>)
    310c:	2210      	movs	r2, #16
    310e:	68cb      	ldr	r3, [r1, #12]
    3110:	421a      	tst	r2, r3
    3112:	d0fc      	beq.n	310e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3114:	4b0e      	ldr	r3, [pc, #56]	; (3150 <system_clock_source_get_hz+0x7c>)
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	075b      	lsls	r3, r3, #29
    311a:	d401      	bmi.n	3120 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    311c:	480f      	ldr	r0, [pc, #60]	; (315c <system_clock_source_get_hz+0x88>)
    311e:	e013      	b.n	3148 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3120:	2000      	movs	r0, #0
    3122:	4b0f      	ldr	r3, [pc, #60]	; (3160 <system_clock_source_get_hz+0x8c>)
    3124:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3126:	4b0a      	ldr	r3, [pc, #40]	; (3150 <system_clock_source_get_hz+0x7c>)
    3128:	689b      	ldr	r3, [r3, #8]
    312a:	041b      	lsls	r3, r3, #16
    312c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    312e:	4358      	muls	r0, r3
    3130:	e00a      	b.n	3148 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3132:	2350      	movs	r3, #80	; 0x50
    3134:	4a07      	ldr	r2, [pc, #28]	; (3154 <system_clock_source_get_hz+0x80>)
    3136:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3138:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    313a:	075b      	lsls	r3, r3, #29
    313c:	d504      	bpl.n	3148 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    313e:	4b04      	ldr	r3, [pc, #16]	; (3150 <system_clock_source_get_hz+0x7c>)
    3140:	68d8      	ldr	r0, [r3, #12]
    3142:	e001      	b.n	3148 <system_clock_source_get_hz+0x74>
		return 32768UL;
    3144:	2080      	movs	r0, #128	; 0x80
    3146:	0200      	lsls	r0, r0, #8
	}
}
    3148:	bd10      	pop	{r4, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	00003ec4 	.word	0x00003ec4
    3150:	200000d4 	.word	0x200000d4
    3154:	40000800 	.word	0x40000800
    3158:	007a1200 	.word	0x007a1200
    315c:	02dc6c00 	.word	0x02dc6c00
    3160:	00003535 	.word	0x00003535

00003164 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3164:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3166:	490c      	ldr	r1, [pc, #48]	; (3198 <system_clock_source_osc8m_set_config+0x34>)
    3168:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    316a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    316c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    316e:	7840      	ldrb	r0, [r0, #1]
    3170:	2201      	movs	r2, #1
    3172:	4010      	ands	r0, r2
    3174:	0180      	lsls	r0, r0, #6
    3176:	2640      	movs	r6, #64	; 0x40
    3178:	43b3      	bics	r3, r6
    317a:	4303      	orrs	r3, r0
    317c:	402a      	ands	r2, r5
    317e:	01d2      	lsls	r2, r2, #7
    3180:	2080      	movs	r0, #128	; 0x80
    3182:	4383      	bics	r3, r0
    3184:	4313      	orrs	r3, r2
    3186:	2203      	movs	r2, #3
    3188:	4022      	ands	r2, r4
    318a:	0212      	lsls	r2, r2, #8
    318c:	4803      	ldr	r0, [pc, #12]	; (319c <system_clock_source_osc8m_set_config+0x38>)
    318e:	4003      	ands	r3, r0
    3190:	4313      	orrs	r3, r2
    3192:	620b      	str	r3, [r1, #32]
}
    3194:	bd70      	pop	{r4, r5, r6, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	40000800 	.word	0x40000800
    319c:	fffffcff 	.word	0xfffffcff

000031a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    31a0:	2808      	cmp	r0, #8
    31a2:	d803      	bhi.n	31ac <system_clock_source_enable+0xc>
    31a4:	0080      	lsls	r0, r0, #2
    31a6:	4b25      	ldr	r3, [pc, #148]	; (323c <system_clock_source_enable+0x9c>)
    31a8:	581b      	ldr	r3, [r3, r0]
    31aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31ac:	2017      	movs	r0, #23
    31ae:	e044      	b.n	323a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    31b0:	4a23      	ldr	r2, [pc, #140]	; (3240 <system_clock_source_enable+0xa0>)
    31b2:	6a13      	ldr	r3, [r2, #32]
    31b4:	2102      	movs	r1, #2
    31b6:	430b      	orrs	r3, r1
    31b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    31ba:	2000      	movs	r0, #0
    31bc:	e03d      	b.n	323a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    31be:	4a20      	ldr	r2, [pc, #128]	; (3240 <system_clock_source_enable+0xa0>)
    31c0:	6993      	ldr	r3, [r2, #24]
    31c2:	2102      	movs	r1, #2
    31c4:	430b      	orrs	r3, r1
    31c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    31c8:	2000      	movs	r0, #0
		break;
    31ca:	e036      	b.n	323a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    31cc:	4a1c      	ldr	r2, [pc, #112]	; (3240 <system_clock_source_enable+0xa0>)
    31ce:	8a13      	ldrh	r3, [r2, #16]
    31d0:	2102      	movs	r1, #2
    31d2:	430b      	orrs	r3, r1
    31d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    31d6:	2000      	movs	r0, #0
		break;
    31d8:	e02f      	b.n	323a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    31da:	4a19      	ldr	r2, [pc, #100]	; (3240 <system_clock_source_enable+0xa0>)
    31dc:	8a93      	ldrh	r3, [r2, #20]
    31de:	2102      	movs	r1, #2
    31e0:	430b      	orrs	r3, r1
    31e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    31e4:	2000      	movs	r0, #0
		break;
    31e6:	e028      	b.n	323a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    31e8:	4916      	ldr	r1, [pc, #88]	; (3244 <system_clock_source_enable+0xa4>)
    31ea:	680b      	ldr	r3, [r1, #0]
    31ec:	2202      	movs	r2, #2
    31ee:	4313      	orrs	r3, r2
    31f0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    31f2:	4b13      	ldr	r3, [pc, #76]	; (3240 <system_clock_source_enable+0xa0>)
    31f4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    31f6:	0019      	movs	r1, r3
    31f8:	320e      	adds	r2, #14
    31fa:	68cb      	ldr	r3, [r1, #12]
    31fc:	421a      	tst	r2, r3
    31fe:	d0fc      	beq.n	31fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3200:	4a10      	ldr	r2, [pc, #64]	; (3244 <system_clock_source_enable+0xa4>)
    3202:	6891      	ldr	r1, [r2, #8]
    3204:	4b0e      	ldr	r3, [pc, #56]	; (3240 <system_clock_source_enable+0xa0>)
    3206:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3208:	6852      	ldr	r2, [r2, #4]
    320a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    320c:	2200      	movs	r2, #0
    320e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3210:	0019      	movs	r1, r3
    3212:	3210      	adds	r2, #16
    3214:	68cb      	ldr	r3, [r1, #12]
    3216:	421a      	tst	r2, r3
    3218:	d0fc      	beq.n	3214 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    321a:	4b0a      	ldr	r3, [pc, #40]	; (3244 <system_clock_source_enable+0xa4>)
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	b29b      	uxth	r3, r3
    3220:	4a07      	ldr	r2, [pc, #28]	; (3240 <system_clock_source_enable+0xa0>)
    3222:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3224:	2000      	movs	r0, #0
    3226:	e008      	b.n	323a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3228:	4905      	ldr	r1, [pc, #20]	; (3240 <system_clock_source_enable+0xa0>)
    322a:	2244      	movs	r2, #68	; 0x44
    322c:	5c8b      	ldrb	r3, [r1, r2]
    322e:	2002      	movs	r0, #2
    3230:	4303      	orrs	r3, r0
    3232:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3234:	2000      	movs	r0, #0
		break;
    3236:	e000      	b.n	323a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3238:	2000      	movs	r0, #0
}
    323a:	4770      	bx	lr
    323c:	00003ee8 	.word	0x00003ee8
    3240:	40000800 	.word	0x40000800
    3244:	200000d4 	.word	0x200000d4

00003248 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3248:	b530      	push	{r4, r5, lr}
    324a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    324c:	22c2      	movs	r2, #194	; 0xc2
    324e:	00d2      	lsls	r2, r2, #3
    3250:	4b1a      	ldr	r3, [pc, #104]	; (32bc <system_clock_init+0x74>)
    3252:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3254:	4a1a      	ldr	r2, [pc, #104]	; (32c0 <system_clock_init+0x78>)
    3256:	6853      	ldr	r3, [r2, #4]
    3258:	211e      	movs	r1, #30
    325a:	438b      	bics	r3, r1
    325c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    325e:	2301      	movs	r3, #1
    3260:	466a      	mov	r2, sp
    3262:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3264:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3266:	4d17      	ldr	r5, [pc, #92]	; (32c4 <system_clock_init+0x7c>)
    3268:	b2e0      	uxtb	r0, r4
    326a:	4669      	mov	r1, sp
    326c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    326e:	3401      	adds	r4, #1
    3270:	2c18      	cmp	r4, #24
    3272:	d1f9      	bne.n	3268 <system_clock_init+0x20>
	config->run_in_standby  = false;
    3274:	a803      	add	r0, sp, #12
    3276:	2400      	movs	r4, #0
    3278:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    327a:	2501      	movs	r5, #1
    327c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    327e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3280:	4b11      	ldr	r3, [pc, #68]	; (32c8 <system_clock_init+0x80>)
    3282:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3284:	2006      	movs	r0, #6
    3286:	4b11      	ldr	r3, [pc, #68]	; (32cc <system_clock_init+0x84>)
    3288:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    328a:	4b11      	ldr	r3, [pc, #68]	; (32d0 <system_clock_init+0x88>)
    328c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    328e:	4b11      	ldr	r3, [pc, #68]	; (32d4 <system_clock_init+0x8c>)
    3290:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3292:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3294:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3296:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    3298:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    329a:	466b      	mov	r3, sp
    329c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    329e:	2306      	movs	r3, #6
    32a0:	466a      	mov	r2, sp
    32a2:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    32a4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    32a6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    32a8:	4669      	mov	r1, sp
    32aa:	2000      	movs	r0, #0
    32ac:	4b0a      	ldr	r3, [pc, #40]	; (32d8 <system_clock_init+0x90>)
    32ae:	4798      	blx	r3
    32b0:	2000      	movs	r0, #0
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <system_clock_init+0x94>)
    32b4:	4798      	blx	r3
#endif
}
    32b6:	b005      	add	sp, #20
    32b8:	bd30      	pop	{r4, r5, pc}
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	40000800 	.word	0x40000800
    32c0:	41004000 	.word	0x41004000
    32c4:	00003519 	.word	0x00003519
    32c8:	00003165 	.word	0x00003165
    32cc:	000031a1 	.word	0x000031a1
    32d0:	000032e1 	.word	0x000032e1
    32d4:	40000400 	.word	0x40000400
    32d8:	00003305 	.word	0x00003305
    32dc:	000033bd 	.word	0x000033bd

000032e0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    32e0:	4a06      	ldr	r2, [pc, #24]	; (32fc <system_gclk_init+0x1c>)
    32e2:	6993      	ldr	r3, [r2, #24]
    32e4:	2108      	movs	r1, #8
    32e6:	430b      	orrs	r3, r1
    32e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    32ea:	2201      	movs	r2, #1
    32ec:	4b04      	ldr	r3, [pc, #16]	; (3300 <system_gclk_init+0x20>)
    32ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    32f0:	0019      	movs	r1, r3
    32f2:	780b      	ldrb	r3, [r1, #0]
    32f4:	4213      	tst	r3, r2
    32f6:	d1fc      	bne.n	32f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    32f8:	4770      	bx	lr
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	40000400 	.word	0x40000400
    3300:	40000c00 	.word	0x40000c00

00003304 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3304:	b570      	push	{r4, r5, r6, lr}
    3306:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3308:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    330a:	780d      	ldrb	r5, [r1, #0]
    330c:	022d      	lsls	r5, r5, #8
    330e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3310:	784b      	ldrb	r3, [r1, #1]
    3312:	2b00      	cmp	r3, #0
    3314:	d002      	beq.n	331c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3316:	2380      	movs	r3, #128	; 0x80
    3318:	02db      	lsls	r3, r3, #11
    331a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    331c:	7a4b      	ldrb	r3, [r1, #9]
    331e:	2b00      	cmp	r3, #0
    3320:	d002      	beq.n	3328 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3322:	2380      	movs	r3, #128	; 0x80
    3324:	031b      	lsls	r3, r3, #12
    3326:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3328:	6848      	ldr	r0, [r1, #4]
    332a:	2801      	cmp	r0, #1
    332c:	d910      	bls.n	3350 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    332e:	1e43      	subs	r3, r0, #1
    3330:	4218      	tst	r0, r3
    3332:	d134      	bne.n	339e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3334:	2802      	cmp	r0, #2
    3336:	d930      	bls.n	339a <system_gclk_gen_set_config+0x96>
    3338:	2302      	movs	r3, #2
    333a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    333c:	3201      	adds	r2, #1
						mask <<= 1) {
    333e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3340:	4298      	cmp	r0, r3
    3342:	d8fb      	bhi.n	333c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3344:	0212      	lsls	r2, r2, #8
    3346:	4332      	orrs	r2, r6
    3348:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    334a:	2380      	movs	r3, #128	; 0x80
    334c:	035b      	lsls	r3, r3, #13
    334e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3350:	7a0b      	ldrb	r3, [r1, #8]
    3352:	2b00      	cmp	r3, #0
    3354:	d002      	beq.n	335c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3356:	2380      	movs	r3, #128	; 0x80
    3358:	039b      	lsls	r3, r3, #14
    335a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    335c:	4a13      	ldr	r2, [pc, #76]	; (33ac <system_gclk_gen_set_config+0xa8>)
    335e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3360:	b25b      	sxtb	r3, r3
    3362:	2b00      	cmp	r3, #0
    3364:	dbfb      	blt.n	335e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3366:	4b12      	ldr	r3, [pc, #72]	; (33b0 <system_gclk_gen_set_config+0xac>)
    3368:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    336a:	4b12      	ldr	r3, [pc, #72]	; (33b4 <system_gclk_gen_set_config+0xb0>)
    336c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    336e:	4a0f      	ldr	r2, [pc, #60]	; (33ac <system_gclk_gen_set_config+0xa8>)
    3370:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3372:	b25b      	sxtb	r3, r3
    3374:	2b00      	cmp	r3, #0
    3376:	dbfb      	blt.n	3370 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3378:	4b0c      	ldr	r3, [pc, #48]	; (33ac <system_gclk_gen_set_config+0xa8>)
    337a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    337c:	001a      	movs	r2, r3
    337e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3380:	b25b      	sxtb	r3, r3
    3382:	2b00      	cmp	r3, #0
    3384:	dbfb      	blt.n	337e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3386:	4a09      	ldr	r2, [pc, #36]	; (33ac <system_gclk_gen_set_config+0xa8>)
    3388:	6853      	ldr	r3, [r2, #4]
    338a:	2180      	movs	r1, #128	; 0x80
    338c:	0249      	lsls	r1, r1, #9
    338e:	400b      	ands	r3, r1
    3390:	431d      	orrs	r5, r3
    3392:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3394:	4b08      	ldr	r3, [pc, #32]	; (33b8 <system_gclk_gen_set_config+0xb4>)
    3396:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3398:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    339a:	2200      	movs	r2, #0
    339c:	e7d2      	b.n	3344 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    339e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    33a0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    33a2:	2380      	movs	r3, #128	; 0x80
    33a4:	029b      	lsls	r3, r3, #10
    33a6:	431d      	orrs	r5, r3
    33a8:	e7d2      	b.n	3350 <system_gclk_gen_set_config+0x4c>
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	40000c00 	.word	0x40000c00
    33b0:	00003065 	.word	0x00003065
    33b4:	40000c08 	.word	0x40000c08
    33b8:	000030a5 	.word	0x000030a5

000033bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    33bc:	b510      	push	{r4, lr}
    33be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33c0:	4a0b      	ldr	r2, [pc, #44]	; (33f0 <system_gclk_gen_enable+0x34>)
    33c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33c4:	b25b      	sxtb	r3, r3
    33c6:	2b00      	cmp	r3, #0
    33c8:	dbfb      	blt.n	33c2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    33ca:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <system_gclk_gen_enable+0x38>)
    33cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33ce:	4b0a      	ldr	r3, [pc, #40]	; (33f8 <system_gclk_gen_enable+0x3c>)
    33d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33d2:	4a07      	ldr	r2, [pc, #28]	; (33f0 <system_gclk_gen_enable+0x34>)
    33d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33d6:	b25b      	sxtb	r3, r3
    33d8:	2b00      	cmp	r3, #0
    33da:	dbfb      	blt.n	33d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    33dc:	4a04      	ldr	r2, [pc, #16]	; (33f0 <system_gclk_gen_enable+0x34>)
    33de:	6851      	ldr	r1, [r2, #4]
    33e0:	2380      	movs	r3, #128	; 0x80
    33e2:	025b      	lsls	r3, r3, #9
    33e4:	430b      	orrs	r3, r1
    33e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    33e8:	4b04      	ldr	r3, [pc, #16]	; (33fc <system_gclk_gen_enable+0x40>)
    33ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33ec:	bd10      	pop	{r4, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	40000c00 	.word	0x40000c00
    33f4:	00003065 	.word	0x00003065
    33f8:	40000c04 	.word	0x40000c04
    33fc:	000030a5 	.word	0x000030a5

00003400 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3404:	4a1a      	ldr	r2, [pc, #104]	; (3470 <system_gclk_gen_get_hz+0x70>)
    3406:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3408:	b25b      	sxtb	r3, r3
    340a:	2b00      	cmp	r3, #0
    340c:	dbfb      	blt.n	3406 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    340e:	4b19      	ldr	r3, [pc, #100]	; (3474 <system_gclk_gen_get_hz+0x74>)
    3410:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3412:	4b19      	ldr	r3, [pc, #100]	; (3478 <system_gclk_gen_get_hz+0x78>)
    3414:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3416:	4a16      	ldr	r2, [pc, #88]	; (3470 <system_gclk_gen_get_hz+0x70>)
    3418:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    341a:	b25b      	sxtb	r3, r3
    341c:	2b00      	cmp	r3, #0
    341e:	dbfb      	blt.n	3418 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3420:	4e13      	ldr	r6, [pc, #76]	; (3470 <system_gclk_gen_get_hz+0x70>)
    3422:	6870      	ldr	r0, [r6, #4]
    3424:	04c0      	lsls	r0, r0, #19
    3426:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3428:	4b14      	ldr	r3, [pc, #80]	; (347c <system_gclk_gen_get_hz+0x7c>)
    342a:	4798      	blx	r3
    342c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    342e:	4b12      	ldr	r3, [pc, #72]	; (3478 <system_gclk_gen_get_hz+0x78>)
    3430:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3432:	6876      	ldr	r6, [r6, #4]
    3434:	02f6      	lsls	r6, r6, #11
    3436:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3438:	4b11      	ldr	r3, [pc, #68]	; (3480 <system_gclk_gen_get_hz+0x80>)
    343a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    343c:	4a0c      	ldr	r2, [pc, #48]	; (3470 <system_gclk_gen_get_hz+0x70>)
    343e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3440:	b25b      	sxtb	r3, r3
    3442:	2b00      	cmp	r3, #0
    3444:	dbfb      	blt.n	343e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3446:	4b0a      	ldr	r3, [pc, #40]	; (3470 <system_gclk_gen_get_hz+0x70>)
    3448:	689c      	ldr	r4, [r3, #8]
    344a:	0224      	lsls	r4, r4, #8
    344c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    344e:	4b0d      	ldr	r3, [pc, #52]	; (3484 <system_gclk_gen_get_hz+0x84>)
    3450:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3452:	2e00      	cmp	r6, #0
    3454:	d107      	bne.n	3466 <system_gclk_gen_get_hz+0x66>
    3456:	2c01      	cmp	r4, #1
    3458:	d907      	bls.n	346a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    345a:	0021      	movs	r1, r4
    345c:	0028      	movs	r0, r5
    345e:	4b0a      	ldr	r3, [pc, #40]	; (3488 <system_gclk_gen_get_hz+0x88>)
    3460:	4798      	blx	r3
    3462:	0005      	movs	r5, r0
    3464:	e001      	b.n	346a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3466:	3401      	adds	r4, #1
    3468:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    346a:	0028      	movs	r0, r5
    346c:	bd70      	pop	{r4, r5, r6, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	40000c00 	.word	0x40000c00
    3474:	00003065 	.word	0x00003065
    3478:	40000c04 	.word	0x40000c04
    347c:	000030d5 	.word	0x000030d5
    3480:	40000c08 	.word	0x40000c08
    3484:	000030a5 	.word	0x000030a5
    3488:	00003811 	.word	0x00003811

0000348c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    348c:	b510      	push	{r4, lr}
    348e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3490:	4b06      	ldr	r3, [pc, #24]	; (34ac <system_gclk_chan_enable+0x20>)
    3492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3494:	4b06      	ldr	r3, [pc, #24]	; (34b0 <system_gclk_chan_enable+0x24>)
    3496:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3498:	4a06      	ldr	r2, [pc, #24]	; (34b4 <system_gclk_chan_enable+0x28>)
    349a:	8853      	ldrh	r3, [r2, #2]
    349c:	2180      	movs	r1, #128	; 0x80
    349e:	01c9      	lsls	r1, r1, #7
    34a0:	430b      	orrs	r3, r1
    34a2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    34a4:	4b04      	ldr	r3, [pc, #16]	; (34b8 <system_gclk_chan_enable+0x2c>)
    34a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34a8:	bd10      	pop	{r4, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	00003065 	.word	0x00003065
    34b0:	40000c02 	.word	0x40000c02
    34b4:	40000c00 	.word	0x40000c00
    34b8:	000030a5 	.word	0x000030a5

000034bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    34bc:	b510      	push	{r4, lr}
    34be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    34c0:	4b0f      	ldr	r3, [pc, #60]	; (3500 <system_gclk_chan_disable+0x44>)
    34c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    34c4:	4b0f      	ldr	r3, [pc, #60]	; (3504 <system_gclk_chan_disable+0x48>)
    34c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    34c8:	4a0f      	ldr	r2, [pc, #60]	; (3508 <system_gclk_chan_disable+0x4c>)
    34ca:	8853      	ldrh	r3, [r2, #2]
    34cc:	051b      	lsls	r3, r3, #20
    34ce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    34d0:	8853      	ldrh	r3, [r2, #2]
    34d2:	490e      	ldr	r1, [pc, #56]	; (350c <system_gclk_chan_disable+0x50>)
    34d4:	400b      	ands	r3, r1
    34d6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    34d8:	8853      	ldrh	r3, [r2, #2]
    34da:	490d      	ldr	r1, [pc, #52]	; (3510 <system_gclk_chan_disable+0x54>)
    34dc:	400b      	ands	r3, r1
    34de:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    34e0:	0011      	movs	r1, r2
    34e2:	2280      	movs	r2, #128	; 0x80
    34e4:	01d2      	lsls	r2, r2, #7
    34e6:	884b      	ldrh	r3, [r1, #2]
    34e8:	4213      	tst	r3, r2
    34ea:	d1fc      	bne.n	34e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    34ec:	4906      	ldr	r1, [pc, #24]	; (3508 <system_gclk_chan_disable+0x4c>)
    34ee:	884a      	ldrh	r2, [r1, #2]
    34f0:	0203      	lsls	r3, r0, #8
    34f2:	4806      	ldr	r0, [pc, #24]	; (350c <system_gclk_chan_disable+0x50>)
    34f4:	4002      	ands	r2, r0
    34f6:	4313      	orrs	r3, r2
    34f8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    34fa:	4b06      	ldr	r3, [pc, #24]	; (3514 <system_gclk_chan_disable+0x58>)
    34fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34fe:	bd10      	pop	{r4, pc}
    3500:	00003065 	.word	0x00003065
    3504:	40000c02 	.word	0x40000c02
    3508:	40000c00 	.word	0x40000c00
    350c:	fffff0ff 	.word	0xfffff0ff
    3510:	ffffbfff 	.word	0xffffbfff
    3514:	000030a5 	.word	0x000030a5

00003518 <system_gclk_chan_set_config>:
{
    3518:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    351a:	780c      	ldrb	r4, [r1, #0]
    351c:	0224      	lsls	r4, r4, #8
    351e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3520:	4b02      	ldr	r3, [pc, #8]	; (352c <system_gclk_chan_set_config+0x14>)
    3522:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3524:	b2a4      	uxth	r4, r4
    3526:	4b02      	ldr	r3, [pc, #8]	; (3530 <system_gclk_chan_set_config+0x18>)
    3528:	805c      	strh	r4, [r3, #2]
}
    352a:	bd10      	pop	{r4, pc}
    352c:	000034bd 	.word	0x000034bd
    3530:	40000c00 	.word	0x40000c00

00003534 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3534:	b510      	push	{r4, lr}
    3536:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <system_gclk_chan_get_hz+0x20>)
    353a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    353c:	4b06      	ldr	r3, [pc, #24]	; (3558 <system_gclk_chan_get_hz+0x24>)
    353e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3540:	4b06      	ldr	r3, [pc, #24]	; (355c <system_gclk_chan_get_hz+0x28>)
    3542:	885c      	ldrh	r4, [r3, #2]
    3544:	0524      	lsls	r4, r4, #20
    3546:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3548:	4b05      	ldr	r3, [pc, #20]	; (3560 <system_gclk_chan_get_hz+0x2c>)
    354a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    354c:	0020      	movs	r0, r4
    354e:	4b05      	ldr	r3, [pc, #20]	; (3564 <system_gclk_chan_get_hz+0x30>)
    3550:	4798      	blx	r3
}
    3552:	bd10      	pop	{r4, pc}
    3554:	00003065 	.word	0x00003065
    3558:	40000c02 	.word	0x40000c02
    355c:	40000c00 	.word	0x40000c00
    3560:	000030a5 	.word	0x000030a5
    3564:	00003401 	.word	0x00003401

00003568 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3568:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    356a:	78d3      	ldrb	r3, [r2, #3]
    356c:	2b00      	cmp	r3, #0
    356e:	d135      	bne.n	35dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3570:	7813      	ldrb	r3, [r2, #0]
    3572:	2b80      	cmp	r3, #128	; 0x80
    3574:	d029      	beq.n	35ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3576:	061b      	lsls	r3, r3, #24
    3578:	2480      	movs	r4, #128	; 0x80
    357a:	0264      	lsls	r4, r4, #9
    357c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    357e:	7854      	ldrb	r4, [r2, #1]
    3580:	2502      	movs	r5, #2
    3582:	43ac      	bics	r4, r5
    3584:	d106      	bne.n	3594 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3586:	7894      	ldrb	r4, [r2, #2]
    3588:	2c00      	cmp	r4, #0
    358a:	d120      	bne.n	35ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    358c:	2480      	movs	r4, #128	; 0x80
    358e:	02a4      	lsls	r4, r4, #10
    3590:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3592:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3594:	7854      	ldrb	r4, [r2, #1]
    3596:	3c01      	subs	r4, #1
    3598:	2c01      	cmp	r4, #1
    359a:	d91c      	bls.n	35d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    359c:	040d      	lsls	r5, r1, #16
    359e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35a0:	24a0      	movs	r4, #160	; 0xa0
    35a2:	05e4      	lsls	r4, r4, #23
    35a4:	432c      	orrs	r4, r5
    35a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35ac:	24d0      	movs	r4, #208	; 0xd0
    35ae:	0624      	lsls	r4, r4, #24
    35b0:	432c      	orrs	r4, r5
    35b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    35b6:	78d4      	ldrb	r4, [r2, #3]
    35b8:	2c00      	cmp	r4, #0
    35ba:	d122      	bne.n	3602 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    35bc:	035b      	lsls	r3, r3, #13
    35be:	d51c      	bpl.n	35fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    35c0:	7893      	ldrb	r3, [r2, #2]
    35c2:	2b01      	cmp	r3, #1
    35c4:	d01e      	beq.n	3604 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    35c6:	6141      	str	r1, [r0, #20]
    35c8:	e017      	b.n	35fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    35ca:	2300      	movs	r3, #0
    35cc:	e7d7      	b.n	357e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    35ce:	24c0      	movs	r4, #192	; 0xc0
    35d0:	02e4      	lsls	r4, r4, #11
    35d2:	4323      	orrs	r3, r4
    35d4:	e7dd      	b.n	3592 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    35d6:	4c0d      	ldr	r4, [pc, #52]	; (360c <_system_pinmux_config+0xa4>)
    35d8:	4023      	ands	r3, r4
    35da:	e7df      	b.n	359c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    35dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35de:	040c      	lsls	r4, r1, #16
    35e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35e2:	23a0      	movs	r3, #160	; 0xa0
    35e4:	05db      	lsls	r3, r3, #23
    35e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35ec:	23d0      	movs	r3, #208	; 0xd0
    35ee:	061b      	lsls	r3, r3, #24
    35f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    35f4:	78d3      	ldrb	r3, [r2, #3]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d103      	bne.n	3602 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    35fa:	7853      	ldrb	r3, [r2, #1]
    35fc:	3b01      	subs	r3, #1
    35fe:	2b01      	cmp	r3, #1
    3600:	d902      	bls.n	3608 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3602:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3604:	6181      	str	r1, [r0, #24]
    3606:	e7f8      	b.n	35fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3608:	6081      	str	r1, [r0, #8]
}
    360a:	e7fa      	b.n	3602 <_system_pinmux_config+0x9a>
    360c:	fffbffff 	.word	0xfffbffff

00003610 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3610:	b510      	push	{r4, lr}
    3612:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3614:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3616:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3618:	2900      	cmp	r1, #0
    361a:	d104      	bne.n	3626 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    361c:	0943      	lsrs	r3, r0, #5
    361e:	01db      	lsls	r3, r3, #7
    3620:	4905      	ldr	r1, [pc, #20]	; (3638 <system_pinmux_pin_set_config+0x28>)
    3622:	468c      	mov	ip, r1
    3624:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3626:	241f      	movs	r4, #31
    3628:	4020      	ands	r0, r4
    362a:	2101      	movs	r1, #1
    362c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    362e:	0018      	movs	r0, r3
    3630:	4b02      	ldr	r3, [pc, #8]	; (363c <system_pinmux_pin_set_config+0x2c>)
    3632:	4798      	blx	r3
}
    3634:	bd10      	pop	{r4, pc}
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	41004400 	.word	0x41004400
    363c:	00003569 	.word	0x00003569

00003640 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    3640:	b5f0      	push	{r4, r5, r6, r7, lr}
    3642:	46c6      	mov	lr, r8
    3644:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    3646:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    3648:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    364a:	2440      	movs	r4, #64	; 0x40
    364c:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    364e:	46a4      	mov	ip, r4
    3650:	e009      	b.n	3666 <system_pinmux_group_set_output_strength+0x26>
    3652:	18c5      	adds	r5, r0, r3
    3654:	3540      	adds	r5, #64	; 0x40
    3656:	782c      	ldrb	r4, [r5, #0]
    3658:	4667      	mov	r7, ip
    365a:	433c      	orrs	r4, r7
    365c:	b2e4      	uxtb	r4, r4
    365e:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    3660:	3301      	adds	r3, #1
    3662:	2b20      	cmp	r3, #32
    3664:	d00c      	beq.n	3680 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    3666:	000c      	movs	r4, r1
    3668:	40dc      	lsrs	r4, r3
    366a:	4226      	tst	r6, r4
    366c:	d0f8      	beq.n	3660 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    366e:	2a01      	cmp	r2, #1
    3670:	d0ef      	beq.n	3652 <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    3672:	18c4      	adds	r4, r0, r3
    3674:	3440      	adds	r4, #64	; 0x40
    3676:	7825      	ldrb	r5, [r4, #0]
    3678:	4647      	mov	r7, r8
    367a:	43bd      	bics	r5, r7
    367c:	7025      	strb	r5, [r4, #0]
    367e:	e7ef      	b.n	3660 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    3680:	bc04      	pop	{r2}
    3682:	4690      	mov	r8, r2
    3684:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003686 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3686:	4770      	bx	lr

00003688 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3688:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    368a:	4b05      	ldr	r3, [pc, #20]	; (36a0 <system_init+0x18>)
    368c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    368e:	4b05      	ldr	r3, [pc, #20]	; (36a4 <system_init+0x1c>)
    3690:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3692:	4b05      	ldr	r3, [pc, #20]	; (36a8 <system_init+0x20>)
    3694:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3696:	4b05      	ldr	r3, [pc, #20]	; (36ac <system_init+0x24>)
    3698:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    369a:	4b05      	ldr	r3, [pc, #20]	; (36b0 <system_init+0x28>)
    369c:	4798      	blx	r3
}
    369e:	bd10      	pop	{r4, pc}
    36a0:	00003249 	.word	0x00003249
    36a4:	00003061 	.word	0x00003061
    36a8:	00003687 	.word	0x00003687
    36ac:	00000d4d 	.word	0x00000d4d
    36b0:	00003687 	.word	0x00003687

000036b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    36b4:	e7fe      	b.n	36b4 <Dummy_Handler>
	...

000036b8 <Reset_Handler>:
{
    36b8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    36ba:	4a26      	ldr	r2, [pc, #152]	; (3754 <Reset_Handler+0x9c>)
    36bc:	4b26      	ldr	r3, [pc, #152]	; (3758 <Reset_Handler+0xa0>)
    36be:	429a      	cmp	r2, r3
    36c0:	d011      	beq.n	36e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    36c2:	001a      	movs	r2, r3
    36c4:	4b25      	ldr	r3, [pc, #148]	; (375c <Reset_Handler+0xa4>)
    36c6:	429a      	cmp	r2, r3
    36c8:	d20d      	bcs.n	36e6 <Reset_Handler+0x2e>
    36ca:	4a25      	ldr	r2, [pc, #148]	; (3760 <Reset_Handler+0xa8>)
    36cc:	3303      	adds	r3, #3
    36ce:	1a9b      	subs	r3, r3, r2
    36d0:	089b      	lsrs	r3, r3, #2
    36d2:	3301      	adds	r3, #1
    36d4:	009b      	lsls	r3, r3, #2
    36d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    36d8:	481f      	ldr	r0, [pc, #124]	; (3758 <Reset_Handler+0xa0>)
    36da:	491e      	ldr	r1, [pc, #120]	; (3754 <Reset_Handler+0x9c>)
    36dc:	588c      	ldr	r4, [r1, r2]
    36de:	5084      	str	r4, [r0, r2]
    36e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    36e2:	429a      	cmp	r2, r3
    36e4:	d1fa      	bne.n	36dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    36e6:	4a1f      	ldr	r2, [pc, #124]	; (3764 <Reset_Handler+0xac>)
    36e8:	4b1f      	ldr	r3, [pc, #124]	; (3768 <Reset_Handler+0xb0>)
    36ea:	429a      	cmp	r2, r3
    36ec:	d20a      	bcs.n	3704 <Reset_Handler+0x4c>
    36ee:	43d3      	mvns	r3, r2
    36f0:	491d      	ldr	r1, [pc, #116]	; (3768 <Reset_Handler+0xb0>)
    36f2:	185b      	adds	r3, r3, r1
    36f4:	2103      	movs	r1, #3
    36f6:	438b      	bics	r3, r1
    36f8:	3304      	adds	r3, #4
    36fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    36fc:	2100      	movs	r1, #0
    36fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3700:	4293      	cmp	r3, r2
    3702:	d1fc      	bne.n	36fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3704:	4a19      	ldr	r2, [pc, #100]	; (376c <Reset_Handler+0xb4>)
    3706:	21ff      	movs	r1, #255	; 0xff
    3708:	4b19      	ldr	r3, [pc, #100]	; (3770 <Reset_Handler+0xb8>)
    370a:	438b      	bics	r3, r1
    370c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    370e:	39fd      	subs	r1, #253	; 0xfd
    3710:	2390      	movs	r3, #144	; 0x90
    3712:	005b      	lsls	r3, r3, #1
    3714:	4a17      	ldr	r2, [pc, #92]	; (3774 <Reset_Handler+0xbc>)
    3716:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3718:	4b17      	ldr	r3, [pc, #92]	; (3778 <Reset_Handler+0xc0>)
    371a:	7b9a      	ldrb	r2, [r3, #14]
    371c:	312e      	adds	r1, #46	; 0x2e
    371e:	438a      	bics	r2, r1
    3720:	2120      	movs	r1, #32
    3722:	430a      	orrs	r2, r1
    3724:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3726:	7b9a      	ldrb	r2, [r3, #14]
    3728:	210c      	movs	r1, #12
    372a:	438a      	bics	r2, r1
    372c:	2108      	movs	r1, #8
    372e:	430a      	orrs	r2, r1
    3730:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3732:	7b9a      	ldrb	r2, [r3, #14]
    3734:	2103      	movs	r1, #3
    3736:	438a      	bics	r2, r1
    3738:	2102      	movs	r1, #2
    373a:	430a      	orrs	r2, r1
    373c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    373e:	4a0f      	ldr	r2, [pc, #60]	; (377c <Reset_Handler+0xc4>)
    3740:	6853      	ldr	r3, [r2, #4]
    3742:	2180      	movs	r1, #128	; 0x80
    3744:	430b      	orrs	r3, r1
    3746:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3748:	4b0d      	ldr	r3, [pc, #52]	; (3780 <Reset_Handler+0xc8>)
    374a:	4798      	blx	r3
        main();
    374c:	4b0d      	ldr	r3, [pc, #52]	; (3784 <Reset_Handler+0xcc>)
    374e:	4798      	blx	r3
    3750:	e7fe      	b.n	3750 <Reset_Handler+0x98>
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	00003f2c 	.word	0x00003f2c
    3758:	20000000 	.word	0x20000000
    375c:	20000074 	.word	0x20000074
    3760:	20000004 	.word	0x20000004
    3764:	20000074 	.word	0x20000074
    3768:	20000374 	.word	0x20000374
    376c:	e000ed00 	.word	0xe000ed00
    3770:	00000000 	.word	0x00000000
    3774:	41007000 	.word	0x41007000
    3778:	41004800 	.word	0x41004800
    377c:	41004000 	.word	0x41004000
    3780:	00003b51 	.word	0x00003b51
    3784:	000037ad 	.word	0x000037ad

00003788 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3788:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    378a:	4a06      	ldr	r2, [pc, #24]	; (37a4 <_sbrk+0x1c>)
    378c:	6812      	ldr	r2, [r2, #0]
    378e:	2a00      	cmp	r2, #0
    3790:	d004      	beq.n	379c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3792:	4a04      	ldr	r2, [pc, #16]	; (37a4 <_sbrk+0x1c>)
    3794:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3796:	18c3      	adds	r3, r0, r3
    3798:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    379a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    379c:	4902      	ldr	r1, [pc, #8]	; (37a8 <_sbrk+0x20>)
    379e:	4a01      	ldr	r2, [pc, #4]	; (37a4 <_sbrk+0x1c>)
    37a0:	6011      	str	r1, [r2, #0]
    37a2:	e7f6      	b.n	3792 <_sbrk+0xa>
    37a4:	200000ec 	.word	0x200000ec
    37a8:	20000778 	.word	0x20000778

000037ac <main>:
{
	read_all_sensors();
}

int main (void)
{
    37ac:	b510      	push	{r4, lr}
	system_init();
    37ae:	4b0c      	ldr	r3, [pc, #48]	; (37e0 <main+0x34>)
    37b0:	4798      	blx	r3
	delay_init();
    37b2:	4b0c      	ldr	r3, [pc, #48]	; (37e4 <main+0x38>)
    37b4:	4798      	blx	r3
	LED_init();
    37b6:	4b0c      	ldr	r3, [pc, #48]	; (37e8 <main+0x3c>)
    37b8:	4798      	blx	r3
	ORB_init();
    37ba:	4b0c      	ldr	r3, [pc, #48]	; (37ec <main+0x40>)
    37bc:	4798      	blx	r3
	sensor_init();
    37be:	4b0c      	ldr	r3, [pc, #48]	; (37f0 <main+0x44>)
    37c0:	4798      	blx	r3
	super_servo_init();
    37c2:	4b0c      	ldr	r3, [pc, #48]	; (37f4 <main+0x48>)
    37c4:	4798      	blx	r3
	serial_init();
    37c6:	4b0c      	ldr	r3, [pc, #48]	; (37f8 <main+0x4c>)
    37c8:	4798      	blx	r3
	enable_super_servo();
    37ca:	4b0c      	ldr	r3, [pc, #48]	; (37fc <main+0x50>)
    37cc:	4798      	blx	r3
	enable_ORB();
    37ce:	4b0c      	ldr	r3, [pc, #48]	; (3800 <main+0x54>)
    37d0:	4798      	blx	r3
	enable_LED();
    37d2:	4b0c      	ldr	r3, [pc, #48]	; (3804 <main+0x58>)
    37d4:	4798      	blx	r3
	enable_USART();
    37d6:	4b0c      	ldr	r3, [pc, #48]	; (3808 <main+0x5c>)
    37d8:	4798      	blx	r3
	
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		//sensor_check();
		serial_main_loop_1();
    37da:	4c0c      	ldr	r4, [pc, #48]	; (380c <main+0x60>)
    37dc:	47a0      	blx	r4
    37de:	e7fd      	b.n	37dc <main+0x30>
    37e0:	00003689 	.word	0x00003689
    37e4:	00000799 	.word	0x00000799
    37e8:	00002b5d 	.word	0x00002b5d
    37ec:	0000303d 	.word	0x0000303d
    37f0:	000013b9 	.word	0x000013b9
    37f4:	00001485 	.word	0x00001485
    37f8:	00000235 	.word	0x00000235
    37fc:	000013c5 	.word	0x000013c5
    3800:	00002f71 	.word	0x00002f71
    3804:	000028d1 	.word	0x000028d1
    3808:	00000211 	.word	0x00000211
    380c:	00000299 	.word	0x00000299

00003810 <__udivsi3>:
    3810:	2200      	movs	r2, #0
    3812:	0843      	lsrs	r3, r0, #1
    3814:	428b      	cmp	r3, r1
    3816:	d374      	bcc.n	3902 <__udivsi3+0xf2>
    3818:	0903      	lsrs	r3, r0, #4
    381a:	428b      	cmp	r3, r1
    381c:	d35f      	bcc.n	38de <__udivsi3+0xce>
    381e:	0a03      	lsrs	r3, r0, #8
    3820:	428b      	cmp	r3, r1
    3822:	d344      	bcc.n	38ae <__udivsi3+0x9e>
    3824:	0b03      	lsrs	r3, r0, #12
    3826:	428b      	cmp	r3, r1
    3828:	d328      	bcc.n	387c <__udivsi3+0x6c>
    382a:	0c03      	lsrs	r3, r0, #16
    382c:	428b      	cmp	r3, r1
    382e:	d30d      	bcc.n	384c <__udivsi3+0x3c>
    3830:	22ff      	movs	r2, #255	; 0xff
    3832:	0209      	lsls	r1, r1, #8
    3834:	ba12      	rev	r2, r2
    3836:	0c03      	lsrs	r3, r0, #16
    3838:	428b      	cmp	r3, r1
    383a:	d302      	bcc.n	3842 <__udivsi3+0x32>
    383c:	1212      	asrs	r2, r2, #8
    383e:	0209      	lsls	r1, r1, #8
    3840:	d065      	beq.n	390e <__udivsi3+0xfe>
    3842:	0b03      	lsrs	r3, r0, #12
    3844:	428b      	cmp	r3, r1
    3846:	d319      	bcc.n	387c <__udivsi3+0x6c>
    3848:	e000      	b.n	384c <__udivsi3+0x3c>
    384a:	0a09      	lsrs	r1, r1, #8
    384c:	0bc3      	lsrs	r3, r0, #15
    384e:	428b      	cmp	r3, r1
    3850:	d301      	bcc.n	3856 <__udivsi3+0x46>
    3852:	03cb      	lsls	r3, r1, #15
    3854:	1ac0      	subs	r0, r0, r3
    3856:	4152      	adcs	r2, r2
    3858:	0b83      	lsrs	r3, r0, #14
    385a:	428b      	cmp	r3, r1
    385c:	d301      	bcc.n	3862 <__udivsi3+0x52>
    385e:	038b      	lsls	r3, r1, #14
    3860:	1ac0      	subs	r0, r0, r3
    3862:	4152      	adcs	r2, r2
    3864:	0b43      	lsrs	r3, r0, #13
    3866:	428b      	cmp	r3, r1
    3868:	d301      	bcc.n	386e <__udivsi3+0x5e>
    386a:	034b      	lsls	r3, r1, #13
    386c:	1ac0      	subs	r0, r0, r3
    386e:	4152      	adcs	r2, r2
    3870:	0b03      	lsrs	r3, r0, #12
    3872:	428b      	cmp	r3, r1
    3874:	d301      	bcc.n	387a <__udivsi3+0x6a>
    3876:	030b      	lsls	r3, r1, #12
    3878:	1ac0      	subs	r0, r0, r3
    387a:	4152      	adcs	r2, r2
    387c:	0ac3      	lsrs	r3, r0, #11
    387e:	428b      	cmp	r3, r1
    3880:	d301      	bcc.n	3886 <__udivsi3+0x76>
    3882:	02cb      	lsls	r3, r1, #11
    3884:	1ac0      	subs	r0, r0, r3
    3886:	4152      	adcs	r2, r2
    3888:	0a83      	lsrs	r3, r0, #10
    388a:	428b      	cmp	r3, r1
    388c:	d301      	bcc.n	3892 <__udivsi3+0x82>
    388e:	028b      	lsls	r3, r1, #10
    3890:	1ac0      	subs	r0, r0, r3
    3892:	4152      	adcs	r2, r2
    3894:	0a43      	lsrs	r3, r0, #9
    3896:	428b      	cmp	r3, r1
    3898:	d301      	bcc.n	389e <__udivsi3+0x8e>
    389a:	024b      	lsls	r3, r1, #9
    389c:	1ac0      	subs	r0, r0, r3
    389e:	4152      	adcs	r2, r2
    38a0:	0a03      	lsrs	r3, r0, #8
    38a2:	428b      	cmp	r3, r1
    38a4:	d301      	bcc.n	38aa <__udivsi3+0x9a>
    38a6:	020b      	lsls	r3, r1, #8
    38a8:	1ac0      	subs	r0, r0, r3
    38aa:	4152      	adcs	r2, r2
    38ac:	d2cd      	bcs.n	384a <__udivsi3+0x3a>
    38ae:	09c3      	lsrs	r3, r0, #7
    38b0:	428b      	cmp	r3, r1
    38b2:	d301      	bcc.n	38b8 <__udivsi3+0xa8>
    38b4:	01cb      	lsls	r3, r1, #7
    38b6:	1ac0      	subs	r0, r0, r3
    38b8:	4152      	adcs	r2, r2
    38ba:	0983      	lsrs	r3, r0, #6
    38bc:	428b      	cmp	r3, r1
    38be:	d301      	bcc.n	38c4 <__udivsi3+0xb4>
    38c0:	018b      	lsls	r3, r1, #6
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	4152      	adcs	r2, r2
    38c6:	0943      	lsrs	r3, r0, #5
    38c8:	428b      	cmp	r3, r1
    38ca:	d301      	bcc.n	38d0 <__udivsi3+0xc0>
    38cc:	014b      	lsls	r3, r1, #5
    38ce:	1ac0      	subs	r0, r0, r3
    38d0:	4152      	adcs	r2, r2
    38d2:	0903      	lsrs	r3, r0, #4
    38d4:	428b      	cmp	r3, r1
    38d6:	d301      	bcc.n	38dc <__udivsi3+0xcc>
    38d8:	010b      	lsls	r3, r1, #4
    38da:	1ac0      	subs	r0, r0, r3
    38dc:	4152      	adcs	r2, r2
    38de:	08c3      	lsrs	r3, r0, #3
    38e0:	428b      	cmp	r3, r1
    38e2:	d301      	bcc.n	38e8 <__udivsi3+0xd8>
    38e4:	00cb      	lsls	r3, r1, #3
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	4152      	adcs	r2, r2
    38ea:	0883      	lsrs	r3, r0, #2
    38ec:	428b      	cmp	r3, r1
    38ee:	d301      	bcc.n	38f4 <__udivsi3+0xe4>
    38f0:	008b      	lsls	r3, r1, #2
    38f2:	1ac0      	subs	r0, r0, r3
    38f4:	4152      	adcs	r2, r2
    38f6:	0843      	lsrs	r3, r0, #1
    38f8:	428b      	cmp	r3, r1
    38fa:	d301      	bcc.n	3900 <__udivsi3+0xf0>
    38fc:	004b      	lsls	r3, r1, #1
    38fe:	1ac0      	subs	r0, r0, r3
    3900:	4152      	adcs	r2, r2
    3902:	1a41      	subs	r1, r0, r1
    3904:	d200      	bcs.n	3908 <__udivsi3+0xf8>
    3906:	4601      	mov	r1, r0
    3908:	4152      	adcs	r2, r2
    390a:	4610      	mov	r0, r2
    390c:	4770      	bx	lr
    390e:	e7ff      	b.n	3910 <__udivsi3+0x100>
    3910:	b501      	push	{r0, lr}
    3912:	2000      	movs	r0, #0
    3914:	f000 f8f0 	bl	3af8 <__aeabi_idiv0>
    3918:	bd02      	pop	{r1, pc}
    391a:	46c0      	nop			; (mov r8, r8)

0000391c <__aeabi_uidivmod>:
    391c:	2900      	cmp	r1, #0
    391e:	d0f7      	beq.n	3910 <__udivsi3+0x100>
    3920:	e776      	b.n	3810 <__udivsi3>
    3922:	4770      	bx	lr

00003924 <__divsi3>:
    3924:	4603      	mov	r3, r0
    3926:	430b      	orrs	r3, r1
    3928:	d47f      	bmi.n	3a2a <__divsi3+0x106>
    392a:	2200      	movs	r2, #0
    392c:	0843      	lsrs	r3, r0, #1
    392e:	428b      	cmp	r3, r1
    3930:	d374      	bcc.n	3a1c <__divsi3+0xf8>
    3932:	0903      	lsrs	r3, r0, #4
    3934:	428b      	cmp	r3, r1
    3936:	d35f      	bcc.n	39f8 <__divsi3+0xd4>
    3938:	0a03      	lsrs	r3, r0, #8
    393a:	428b      	cmp	r3, r1
    393c:	d344      	bcc.n	39c8 <__divsi3+0xa4>
    393e:	0b03      	lsrs	r3, r0, #12
    3940:	428b      	cmp	r3, r1
    3942:	d328      	bcc.n	3996 <__divsi3+0x72>
    3944:	0c03      	lsrs	r3, r0, #16
    3946:	428b      	cmp	r3, r1
    3948:	d30d      	bcc.n	3966 <__divsi3+0x42>
    394a:	22ff      	movs	r2, #255	; 0xff
    394c:	0209      	lsls	r1, r1, #8
    394e:	ba12      	rev	r2, r2
    3950:	0c03      	lsrs	r3, r0, #16
    3952:	428b      	cmp	r3, r1
    3954:	d302      	bcc.n	395c <__divsi3+0x38>
    3956:	1212      	asrs	r2, r2, #8
    3958:	0209      	lsls	r1, r1, #8
    395a:	d065      	beq.n	3a28 <__divsi3+0x104>
    395c:	0b03      	lsrs	r3, r0, #12
    395e:	428b      	cmp	r3, r1
    3960:	d319      	bcc.n	3996 <__divsi3+0x72>
    3962:	e000      	b.n	3966 <__divsi3+0x42>
    3964:	0a09      	lsrs	r1, r1, #8
    3966:	0bc3      	lsrs	r3, r0, #15
    3968:	428b      	cmp	r3, r1
    396a:	d301      	bcc.n	3970 <__divsi3+0x4c>
    396c:	03cb      	lsls	r3, r1, #15
    396e:	1ac0      	subs	r0, r0, r3
    3970:	4152      	adcs	r2, r2
    3972:	0b83      	lsrs	r3, r0, #14
    3974:	428b      	cmp	r3, r1
    3976:	d301      	bcc.n	397c <__divsi3+0x58>
    3978:	038b      	lsls	r3, r1, #14
    397a:	1ac0      	subs	r0, r0, r3
    397c:	4152      	adcs	r2, r2
    397e:	0b43      	lsrs	r3, r0, #13
    3980:	428b      	cmp	r3, r1
    3982:	d301      	bcc.n	3988 <__divsi3+0x64>
    3984:	034b      	lsls	r3, r1, #13
    3986:	1ac0      	subs	r0, r0, r3
    3988:	4152      	adcs	r2, r2
    398a:	0b03      	lsrs	r3, r0, #12
    398c:	428b      	cmp	r3, r1
    398e:	d301      	bcc.n	3994 <__divsi3+0x70>
    3990:	030b      	lsls	r3, r1, #12
    3992:	1ac0      	subs	r0, r0, r3
    3994:	4152      	adcs	r2, r2
    3996:	0ac3      	lsrs	r3, r0, #11
    3998:	428b      	cmp	r3, r1
    399a:	d301      	bcc.n	39a0 <__divsi3+0x7c>
    399c:	02cb      	lsls	r3, r1, #11
    399e:	1ac0      	subs	r0, r0, r3
    39a0:	4152      	adcs	r2, r2
    39a2:	0a83      	lsrs	r3, r0, #10
    39a4:	428b      	cmp	r3, r1
    39a6:	d301      	bcc.n	39ac <__divsi3+0x88>
    39a8:	028b      	lsls	r3, r1, #10
    39aa:	1ac0      	subs	r0, r0, r3
    39ac:	4152      	adcs	r2, r2
    39ae:	0a43      	lsrs	r3, r0, #9
    39b0:	428b      	cmp	r3, r1
    39b2:	d301      	bcc.n	39b8 <__divsi3+0x94>
    39b4:	024b      	lsls	r3, r1, #9
    39b6:	1ac0      	subs	r0, r0, r3
    39b8:	4152      	adcs	r2, r2
    39ba:	0a03      	lsrs	r3, r0, #8
    39bc:	428b      	cmp	r3, r1
    39be:	d301      	bcc.n	39c4 <__divsi3+0xa0>
    39c0:	020b      	lsls	r3, r1, #8
    39c2:	1ac0      	subs	r0, r0, r3
    39c4:	4152      	adcs	r2, r2
    39c6:	d2cd      	bcs.n	3964 <__divsi3+0x40>
    39c8:	09c3      	lsrs	r3, r0, #7
    39ca:	428b      	cmp	r3, r1
    39cc:	d301      	bcc.n	39d2 <__divsi3+0xae>
    39ce:	01cb      	lsls	r3, r1, #7
    39d0:	1ac0      	subs	r0, r0, r3
    39d2:	4152      	adcs	r2, r2
    39d4:	0983      	lsrs	r3, r0, #6
    39d6:	428b      	cmp	r3, r1
    39d8:	d301      	bcc.n	39de <__divsi3+0xba>
    39da:	018b      	lsls	r3, r1, #6
    39dc:	1ac0      	subs	r0, r0, r3
    39de:	4152      	adcs	r2, r2
    39e0:	0943      	lsrs	r3, r0, #5
    39e2:	428b      	cmp	r3, r1
    39e4:	d301      	bcc.n	39ea <__divsi3+0xc6>
    39e6:	014b      	lsls	r3, r1, #5
    39e8:	1ac0      	subs	r0, r0, r3
    39ea:	4152      	adcs	r2, r2
    39ec:	0903      	lsrs	r3, r0, #4
    39ee:	428b      	cmp	r3, r1
    39f0:	d301      	bcc.n	39f6 <__divsi3+0xd2>
    39f2:	010b      	lsls	r3, r1, #4
    39f4:	1ac0      	subs	r0, r0, r3
    39f6:	4152      	adcs	r2, r2
    39f8:	08c3      	lsrs	r3, r0, #3
    39fa:	428b      	cmp	r3, r1
    39fc:	d301      	bcc.n	3a02 <__divsi3+0xde>
    39fe:	00cb      	lsls	r3, r1, #3
    3a00:	1ac0      	subs	r0, r0, r3
    3a02:	4152      	adcs	r2, r2
    3a04:	0883      	lsrs	r3, r0, #2
    3a06:	428b      	cmp	r3, r1
    3a08:	d301      	bcc.n	3a0e <__divsi3+0xea>
    3a0a:	008b      	lsls	r3, r1, #2
    3a0c:	1ac0      	subs	r0, r0, r3
    3a0e:	4152      	adcs	r2, r2
    3a10:	0843      	lsrs	r3, r0, #1
    3a12:	428b      	cmp	r3, r1
    3a14:	d301      	bcc.n	3a1a <__divsi3+0xf6>
    3a16:	004b      	lsls	r3, r1, #1
    3a18:	1ac0      	subs	r0, r0, r3
    3a1a:	4152      	adcs	r2, r2
    3a1c:	1a41      	subs	r1, r0, r1
    3a1e:	d200      	bcs.n	3a22 <__divsi3+0xfe>
    3a20:	4601      	mov	r1, r0
    3a22:	4152      	adcs	r2, r2
    3a24:	4610      	mov	r0, r2
    3a26:	4770      	bx	lr
    3a28:	e05d      	b.n	3ae6 <__divsi3+0x1c2>
    3a2a:	0fca      	lsrs	r2, r1, #31
    3a2c:	d000      	beq.n	3a30 <__divsi3+0x10c>
    3a2e:	4249      	negs	r1, r1
    3a30:	1003      	asrs	r3, r0, #32
    3a32:	d300      	bcc.n	3a36 <__divsi3+0x112>
    3a34:	4240      	negs	r0, r0
    3a36:	4053      	eors	r3, r2
    3a38:	2200      	movs	r2, #0
    3a3a:	469c      	mov	ip, r3
    3a3c:	0903      	lsrs	r3, r0, #4
    3a3e:	428b      	cmp	r3, r1
    3a40:	d32d      	bcc.n	3a9e <__divsi3+0x17a>
    3a42:	0a03      	lsrs	r3, r0, #8
    3a44:	428b      	cmp	r3, r1
    3a46:	d312      	bcc.n	3a6e <__divsi3+0x14a>
    3a48:	22fc      	movs	r2, #252	; 0xfc
    3a4a:	0189      	lsls	r1, r1, #6
    3a4c:	ba12      	rev	r2, r2
    3a4e:	0a03      	lsrs	r3, r0, #8
    3a50:	428b      	cmp	r3, r1
    3a52:	d30c      	bcc.n	3a6e <__divsi3+0x14a>
    3a54:	0189      	lsls	r1, r1, #6
    3a56:	1192      	asrs	r2, r2, #6
    3a58:	428b      	cmp	r3, r1
    3a5a:	d308      	bcc.n	3a6e <__divsi3+0x14a>
    3a5c:	0189      	lsls	r1, r1, #6
    3a5e:	1192      	asrs	r2, r2, #6
    3a60:	428b      	cmp	r3, r1
    3a62:	d304      	bcc.n	3a6e <__divsi3+0x14a>
    3a64:	0189      	lsls	r1, r1, #6
    3a66:	d03a      	beq.n	3ade <__divsi3+0x1ba>
    3a68:	1192      	asrs	r2, r2, #6
    3a6a:	e000      	b.n	3a6e <__divsi3+0x14a>
    3a6c:	0989      	lsrs	r1, r1, #6
    3a6e:	09c3      	lsrs	r3, r0, #7
    3a70:	428b      	cmp	r3, r1
    3a72:	d301      	bcc.n	3a78 <__divsi3+0x154>
    3a74:	01cb      	lsls	r3, r1, #7
    3a76:	1ac0      	subs	r0, r0, r3
    3a78:	4152      	adcs	r2, r2
    3a7a:	0983      	lsrs	r3, r0, #6
    3a7c:	428b      	cmp	r3, r1
    3a7e:	d301      	bcc.n	3a84 <__divsi3+0x160>
    3a80:	018b      	lsls	r3, r1, #6
    3a82:	1ac0      	subs	r0, r0, r3
    3a84:	4152      	adcs	r2, r2
    3a86:	0943      	lsrs	r3, r0, #5
    3a88:	428b      	cmp	r3, r1
    3a8a:	d301      	bcc.n	3a90 <__divsi3+0x16c>
    3a8c:	014b      	lsls	r3, r1, #5
    3a8e:	1ac0      	subs	r0, r0, r3
    3a90:	4152      	adcs	r2, r2
    3a92:	0903      	lsrs	r3, r0, #4
    3a94:	428b      	cmp	r3, r1
    3a96:	d301      	bcc.n	3a9c <__divsi3+0x178>
    3a98:	010b      	lsls	r3, r1, #4
    3a9a:	1ac0      	subs	r0, r0, r3
    3a9c:	4152      	adcs	r2, r2
    3a9e:	08c3      	lsrs	r3, r0, #3
    3aa0:	428b      	cmp	r3, r1
    3aa2:	d301      	bcc.n	3aa8 <__divsi3+0x184>
    3aa4:	00cb      	lsls	r3, r1, #3
    3aa6:	1ac0      	subs	r0, r0, r3
    3aa8:	4152      	adcs	r2, r2
    3aaa:	0883      	lsrs	r3, r0, #2
    3aac:	428b      	cmp	r3, r1
    3aae:	d301      	bcc.n	3ab4 <__divsi3+0x190>
    3ab0:	008b      	lsls	r3, r1, #2
    3ab2:	1ac0      	subs	r0, r0, r3
    3ab4:	4152      	adcs	r2, r2
    3ab6:	d2d9      	bcs.n	3a6c <__divsi3+0x148>
    3ab8:	0843      	lsrs	r3, r0, #1
    3aba:	428b      	cmp	r3, r1
    3abc:	d301      	bcc.n	3ac2 <__divsi3+0x19e>
    3abe:	004b      	lsls	r3, r1, #1
    3ac0:	1ac0      	subs	r0, r0, r3
    3ac2:	4152      	adcs	r2, r2
    3ac4:	1a41      	subs	r1, r0, r1
    3ac6:	d200      	bcs.n	3aca <__divsi3+0x1a6>
    3ac8:	4601      	mov	r1, r0
    3aca:	4663      	mov	r3, ip
    3acc:	4152      	adcs	r2, r2
    3ace:	105b      	asrs	r3, r3, #1
    3ad0:	4610      	mov	r0, r2
    3ad2:	d301      	bcc.n	3ad8 <__divsi3+0x1b4>
    3ad4:	4240      	negs	r0, r0
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d500      	bpl.n	3adc <__divsi3+0x1b8>
    3ada:	4249      	negs	r1, r1
    3adc:	4770      	bx	lr
    3ade:	4663      	mov	r3, ip
    3ae0:	105b      	asrs	r3, r3, #1
    3ae2:	d300      	bcc.n	3ae6 <__divsi3+0x1c2>
    3ae4:	4240      	negs	r0, r0
    3ae6:	b501      	push	{r0, lr}
    3ae8:	2000      	movs	r0, #0
    3aea:	f000 f805 	bl	3af8 <__aeabi_idiv0>
    3aee:	bd02      	pop	{r1, pc}

00003af0 <__aeabi_idivmod>:
    3af0:	2900      	cmp	r1, #0
    3af2:	d0f8      	beq.n	3ae6 <__divsi3+0x1c2>
    3af4:	e716      	b.n	3924 <__divsi3>
    3af6:	4770      	bx	lr

00003af8 <__aeabi_idiv0>:
    3af8:	4770      	bx	lr
    3afa:	46c0      	nop			; (mov r8, r8)

00003afc <__aeabi_lmul>:
    3afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3afe:	46ce      	mov	lr, r9
    3b00:	4647      	mov	r7, r8
    3b02:	0415      	lsls	r5, r2, #16
    3b04:	0c2d      	lsrs	r5, r5, #16
    3b06:	002e      	movs	r6, r5
    3b08:	b580      	push	{r7, lr}
    3b0a:	0407      	lsls	r7, r0, #16
    3b0c:	0c14      	lsrs	r4, r2, #16
    3b0e:	0c3f      	lsrs	r7, r7, #16
    3b10:	4699      	mov	r9, r3
    3b12:	0c03      	lsrs	r3, r0, #16
    3b14:	437e      	muls	r6, r7
    3b16:	435d      	muls	r5, r3
    3b18:	4367      	muls	r7, r4
    3b1a:	4363      	muls	r3, r4
    3b1c:	197f      	adds	r7, r7, r5
    3b1e:	0c34      	lsrs	r4, r6, #16
    3b20:	19e4      	adds	r4, r4, r7
    3b22:	469c      	mov	ip, r3
    3b24:	42a5      	cmp	r5, r4
    3b26:	d903      	bls.n	3b30 <__aeabi_lmul+0x34>
    3b28:	2380      	movs	r3, #128	; 0x80
    3b2a:	025b      	lsls	r3, r3, #9
    3b2c:	4698      	mov	r8, r3
    3b2e:	44c4      	add	ip, r8
    3b30:	464b      	mov	r3, r9
    3b32:	4351      	muls	r1, r2
    3b34:	4343      	muls	r3, r0
    3b36:	0436      	lsls	r6, r6, #16
    3b38:	0c36      	lsrs	r6, r6, #16
    3b3a:	0c25      	lsrs	r5, r4, #16
    3b3c:	0424      	lsls	r4, r4, #16
    3b3e:	4465      	add	r5, ip
    3b40:	19a4      	adds	r4, r4, r6
    3b42:	1859      	adds	r1, r3, r1
    3b44:	1949      	adds	r1, r1, r5
    3b46:	0020      	movs	r0, r4
    3b48:	bc0c      	pop	{r2, r3}
    3b4a:	4690      	mov	r8, r2
    3b4c:	4699      	mov	r9, r3
    3b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b50 <__libc_init_array>:
    3b50:	b570      	push	{r4, r5, r6, lr}
    3b52:	2600      	movs	r6, #0
    3b54:	4d0c      	ldr	r5, [pc, #48]	; (3b88 <__libc_init_array+0x38>)
    3b56:	4c0d      	ldr	r4, [pc, #52]	; (3b8c <__libc_init_array+0x3c>)
    3b58:	1b64      	subs	r4, r4, r5
    3b5a:	10a4      	asrs	r4, r4, #2
    3b5c:	42a6      	cmp	r6, r4
    3b5e:	d109      	bne.n	3b74 <__libc_init_array+0x24>
    3b60:	2600      	movs	r6, #0
    3b62:	f000 f9d3 	bl	3f0c <_init>
    3b66:	4d0a      	ldr	r5, [pc, #40]	; (3b90 <__libc_init_array+0x40>)
    3b68:	4c0a      	ldr	r4, [pc, #40]	; (3b94 <__libc_init_array+0x44>)
    3b6a:	1b64      	subs	r4, r4, r5
    3b6c:	10a4      	asrs	r4, r4, #2
    3b6e:	42a6      	cmp	r6, r4
    3b70:	d105      	bne.n	3b7e <__libc_init_array+0x2e>
    3b72:	bd70      	pop	{r4, r5, r6, pc}
    3b74:	00b3      	lsls	r3, r6, #2
    3b76:	58eb      	ldr	r3, [r5, r3]
    3b78:	4798      	blx	r3
    3b7a:	3601      	adds	r6, #1
    3b7c:	e7ee      	b.n	3b5c <__libc_init_array+0xc>
    3b7e:	00b3      	lsls	r3, r6, #2
    3b80:	58eb      	ldr	r3, [r5, r3]
    3b82:	4798      	blx	r3
    3b84:	3601      	adds	r6, #1
    3b86:	e7f2      	b.n	3b6e <__libc_init_array+0x1e>
    3b88:	00003f18 	.word	0x00003f18
    3b8c:	00003f18 	.word	0x00003f18
    3b90:	00003f18 	.word	0x00003f18
    3b94:	00003f1c 	.word	0x00003f1c

00003b98 <malloc>:
    3b98:	b510      	push	{r4, lr}
    3b9a:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <malloc+0x10>)
    3b9c:	0001      	movs	r1, r0
    3b9e:	6818      	ldr	r0, [r3, #0]
    3ba0:	f000 f80e 	bl	3bc0 <_malloc_r>
    3ba4:	bd10      	pop	{r4, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	20000010 	.word	0x20000010

00003bac <memcpy>:
    3bac:	2300      	movs	r3, #0
    3bae:	b510      	push	{r4, lr}
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d100      	bne.n	3bb6 <memcpy+0xa>
    3bb4:	bd10      	pop	{r4, pc}
    3bb6:	5ccc      	ldrb	r4, [r1, r3]
    3bb8:	54c4      	strb	r4, [r0, r3]
    3bba:	3301      	adds	r3, #1
    3bbc:	e7f8      	b.n	3bb0 <memcpy+0x4>
	...

00003bc0 <_malloc_r>:
    3bc0:	2303      	movs	r3, #3
    3bc2:	b570      	push	{r4, r5, r6, lr}
    3bc4:	1ccd      	adds	r5, r1, #3
    3bc6:	439d      	bics	r5, r3
    3bc8:	3508      	adds	r5, #8
    3bca:	0006      	movs	r6, r0
    3bcc:	2d0c      	cmp	r5, #12
    3bce:	d21e      	bcs.n	3c0e <_malloc_r+0x4e>
    3bd0:	250c      	movs	r5, #12
    3bd2:	42a9      	cmp	r1, r5
    3bd4:	d81d      	bhi.n	3c12 <_malloc_r+0x52>
    3bd6:	0030      	movs	r0, r6
    3bd8:	f000 f862 	bl	3ca0 <__malloc_lock>
    3bdc:	4a25      	ldr	r2, [pc, #148]	; (3c74 <_malloc_r+0xb4>)
    3bde:	6814      	ldr	r4, [r2, #0]
    3be0:	0021      	movs	r1, r4
    3be2:	2900      	cmp	r1, #0
    3be4:	d119      	bne.n	3c1a <_malloc_r+0x5a>
    3be6:	4c24      	ldr	r4, [pc, #144]	; (3c78 <_malloc_r+0xb8>)
    3be8:	6823      	ldr	r3, [r4, #0]
    3bea:	2b00      	cmp	r3, #0
    3bec:	d103      	bne.n	3bf6 <_malloc_r+0x36>
    3bee:	0030      	movs	r0, r6
    3bf0:	f000 f844 	bl	3c7c <_sbrk_r>
    3bf4:	6020      	str	r0, [r4, #0]
    3bf6:	0029      	movs	r1, r5
    3bf8:	0030      	movs	r0, r6
    3bfa:	f000 f83f 	bl	3c7c <_sbrk_r>
    3bfe:	1c43      	adds	r3, r0, #1
    3c00:	d12c      	bne.n	3c5c <_malloc_r+0x9c>
    3c02:	230c      	movs	r3, #12
    3c04:	0030      	movs	r0, r6
    3c06:	6033      	str	r3, [r6, #0]
    3c08:	f000 f84b 	bl	3ca2 <__malloc_unlock>
    3c0c:	e003      	b.n	3c16 <_malloc_r+0x56>
    3c0e:	2d00      	cmp	r5, #0
    3c10:	dadf      	bge.n	3bd2 <_malloc_r+0x12>
    3c12:	230c      	movs	r3, #12
    3c14:	6033      	str	r3, [r6, #0]
    3c16:	2000      	movs	r0, #0
    3c18:	bd70      	pop	{r4, r5, r6, pc}
    3c1a:	680b      	ldr	r3, [r1, #0]
    3c1c:	1b5b      	subs	r3, r3, r5
    3c1e:	d41a      	bmi.n	3c56 <_malloc_r+0x96>
    3c20:	2b0b      	cmp	r3, #11
    3c22:	d903      	bls.n	3c2c <_malloc_r+0x6c>
    3c24:	600b      	str	r3, [r1, #0]
    3c26:	18cc      	adds	r4, r1, r3
    3c28:	6025      	str	r5, [r4, #0]
    3c2a:	e003      	b.n	3c34 <_malloc_r+0x74>
    3c2c:	428c      	cmp	r4, r1
    3c2e:	d10e      	bne.n	3c4e <_malloc_r+0x8e>
    3c30:	6863      	ldr	r3, [r4, #4]
    3c32:	6013      	str	r3, [r2, #0]
    3c34:	0030      	movs	r0, r6
    3c36:	f000 f834 	bl	3ca2 <__malloc_unlock>
    3c3a:	0020      	movs	r0, r4
    3c3c:	2207      	movs	r2, #7
    3c3e:	300b      	adds	r0, #11
    3c40:	1d23      	adds	r3, r4, #4
    3c42:	4390      	bics	r0, r2
    3c44:	1ac3      	subs	r3, r0, r3
    3c46:	d0e7      	beq.n	3c18 <_malloc_r+0x58>
    3c48:	425a      	negs	r2, r3
    3c4a:	50e2      	str	r2, [r4, r3]
    3c4c:	e7e4      	b.n	3c18 <_malloc_r+0x58>
    3c4e:	684b      	ldr	r3, [r1, #4]
    3c50:	6063      	str	r3, [r4, #4]
    3c52:	000c      	movs	r4, r1
    3c54:	e7ee      	b.n	3c34 <_malloc_r+0x74>
    3c56:	000c      	movs	r4, r1
    3c58:	6849      	ldr	r1, [r1, #4]
    3c5a:	e7c2      	b.n	3be2 <_malloc_r+0x22>
    3c5c:	2303      	movs	r3, #3
    3c5e:	1cc4      	adds	r4, r0, #3
    3c60:	439c      	bics	r4, r3
    3c62:	42a0      	cmp	r0, r4
    3c64:	d0e0      	beq.n	3c28 <_malloc_r+0x68>
    3c66:	1a21      	subs	r1, r4, r0
    3c68:	0030      	movs	r0, r6
    3c6a:	f000 f807 	bl	3c7c <_sbrk_r>
    3c6e:	1c43      	adds	r3, r0, #1
    3c70:	d1da      	bne.n	3c28 <_malloc_r+0x68>
    3c72:	e7c6      	b.n	3c02 <_malloc_r+0x42>
    3c74:	200000f8 	.word	0x200000f8
    3c78:	200000fc 	.word	0x200000fc

00003c7c <_sbrk_r>:
    3c7c:	2300      	movs	r3, #0
    3c7e:	b570      	push	{r4, r5, r6, lr}
    3c80:	4c06      	ldr	r4, [pc, #24]	; (3c9c <_sbrk_r+0x20>)
    3c82:	0005      	movs	r5, r0
    3c84:	0008      	movs	r0, r1
    3c86:	6023      	str	r3, [r4, #0]
    3c88:	f7ff fd7e 	bl	3788 <_sbrk>
    3c8c:	1c43      	adds	r3, r0, #1
    3c8e:	d103      	bne.n	3c98 <_sbrk_r+0x1c>
    3c90:	6823      	ldr	r3, [r4, #0]
    3c92:	2b00      	cmp	r3, #0
    3c94:	d000      	beq.n	3c98 <_sbrk_r+0x1c>
    3c96:	602b      	str	r3, [r5, #0]
    3c98:	bd70      	pop	{r4, r5, r6, pc}
    3c9a:	46c0      	nop			; (mov r8, r8)
    3c9c:	20000370 	.word	0x20000370

00003ca0 <__malloc_lock>:
    3ca0:	4770      	bx	lr

00003ca2 <__malloc_unlock>:
    3ca2:	4770      	bx	lr
    3ca4:	000004ca 	.word	0x000004ca
    3ca8:	00000724 	.word	0x00000724
    3cac:	00000724 	.word	0x00000724
    3cb0:	00000498 	.word	0x00000498
    3cb4:	00000724 	.word	0x00000724
    3cb8:	00000724 	.word	0x00000724
    3cbc:	00000692 	.word	0x00000692
    3cc0:	000004f4 	.word	0x000004f4
    3cc4:	00000724 	.word	0x00000724
    3cc8:	00000724 	.word	0x00000724
    3ccc:	00000724 	.word	0x00000724
    3cd0:	00000724 	.word	0x00000724
    3cd4:	00000724 	.word	0x00000724
    3cd8:	00000724 	.word	0x00000724
    3cdc:	00000724 	.word	0x00000724
    3ce0:	00000724 	.word	0x00000724
    3ce4:	00000724 	.word	0x00000724
    3ce8:	00000724 	.word	0x00000724
    3cec:	00000724 	.word	0x00000724
    3cf0:	00000724 	.word	0x00000724
    3cf4:	00000724 	.word	0x00000724
    3cf8:	00000724 	.word	0x00000724
    3cfc:	00000458 	.word	0x00000458
    3d00:	00000724 	.word	0x00000724
    3d04:	00000724 	.word	0x00000724
    3d08:	00000724 	.word	0x00000724
    3d0c:	00000724 	.word	0x00000724
    3d10:	00000724 	.word	0x00000724
    3d14:	00000724 	.word	0x00000724
    3d18:	00000724 	.word	0x00000724
    3d1c:	00000724 	.word	0x00000724
    3d20:	00000724 	.word	0x00000724
    3d24:	00000724 	.word	0x00000724
    3d28:	00000724 	.word	0x00000724
    3d2c:	00000724 	.word	0x00000724
    3d30:	00000724 	.word	0x00000724
    3d34:	00000724 	.word	0x00000724
    3d38:	00000724 	.word	0x00000724
    3d3c:	00000724 	.word	0x00000724
    3d40:	0000051e 	.word	0x0000051e
    3d44:	00000600 	.word	0x00000600
    3d48:	000002dc 	.word	0x000002dc
    3d4c:	00000426 	.word	0x00000426
    3d50:	00000724 	.word	0x00000724
    3d54:	000006be 	.word	0x000006be
    3d58:	00000a16 	.word	0x00000a16
    3d5c:	00000c62 	.word	0x00000c62
    3d60:	00000c62 	.word	0x00000c62
    3d64:	00000c62 	.word	0x00000c62
    3d68:	00000c62 	.word	0x00000c62
    3d6c:	00000c62 	.word	0x00000c62
    3d70:	00000c62 	.word	0x00000c62
    3d74:	00000c62 	.word	0x00000c62
    3d78:	00000c62 	.word	0x00000c62
    3d7c:	00000c62 	.word	0x00000c62
    3d80:	00000c62 	.word	0x00000c62
    3d84:	00000c62 	.word	0x00000c62
    3d88:	00000c62 	.word	0x00000c62
    3d8c:	00000c62 	.word	0x00000c62
    3d90:	00000c62 	.word	0x00000c62
    3d94:	00000c62 	.word	0x00000c62
    3d98:	000009fe 	.word	0x000009fe
    3d9c:	00000c62 	.word	0x00000c62
    3da0:	00000c62 	.word	0x00000c62
    3da4:	00000c62 	.word	0x00000c62
    3da8:	00000c62 	.word	0x00000c62
    3dac:	00000c62 	.word	0x00000c62
    3db0:	00000c62 	.word	0x00000c62
    3db4:	00000c62 	.word	0x00000c62
    3db8:	00000c62 	.word	0x00000c62
    3dbc:	00000c62 	.word	0x00000c62
    3dc0:	00000c62 	.word	0x00000c62
    3dc4:	00000c62 	.word	0x00000c62
    3dc8:	00000c62 	.word	0x00000c62
    3dcc:	00000c62 	.word	0x00000c62
    3dd0:	00000c62 	.word	0x00000c62
    3dd4:	00000c62 	.word	0x00000c62
    3dd8:	00000a0e 	.word	0x00000a0e
    3ddc:	00000c62 	.word	0x00000c62
    3de0:	00000c62 	.word	0x00000c62
    3de4:	00000c62 	.word	0x00000c62
    3de8:	00000c62 	.word	0x00000c62
    3dec:	00000c62 	.word	0x00000c62
    3df0:	00000c62 	.word	0x00000c62
    3df4:	00000c62 	.word	0x00000c62
    3df8:	00000c62 	.word	0x00000c62
    3dfc:	00000c62 	.word	0x00000c62
    3e00:	00000c62 	.word	0x00000c62
    3e04:	00000c62 	.word	0x00000c62
    3e08:	00000c62 	.word	0x00000c62
    3e0c:	00000c62 	.word	0x00000c62
    3e10:	00000c62 	.word	0x00000c62
    3e14:	00000c62 	.word	0x00000c62
    3e18:	00000a06 	.word	0x00000a06
    3e1c:	00000a1e 	.word	0x00000a1e
    3e20:	000009e6 	.word	0x000009e6
    3e24:	000009f6 	.word	0x000009f6
    3e28:	000009ee 	.word	0x000009ee
    3e2c:	00000002 	.word	0x00000002
    3e30:	00000003 	.word	0x00000003
    3e34:	00000004 	.word	0x00000004
    3e38:	00000005 	.word	0x00000005
    3e3c:	00000006 	.word	0x00000006
    3e40:	00000007 	.word	0x00000007
    3e44:	0000000e 	.word	0x0000000e
    3e48:	0000000f 	.word	0x0000000f
    3e4c:	0000000a 	.word	0x0000000a
    3e50:	0000000b 	.word	0x0000000b
    3e54:	0000ffff 	.word	0x0000ffff
    3e58:	0000ffff 	.word	0x0000ffff
    3e5c:	0000ffff 	.word	0x0000ffff
    3e60:	0000ffff 	.word	0x0000ffff
    3e64:	0000ffff 	.word	0x0000ffff
    3e68:	0000ffff 	.word	0x0000ffff
    3e6c:	0000ffff 	.word	0x0000ffff
    3e70:	0000ffff 	.word	0x0000ffff
    3e74:	0000ffff 	.word	0x0000ffff
    3e78:	0000ffff 	.word	0x0000ffff
    3e7c:	42000800 	.word	0x42000800
    3e80:	42000c00 	.word	0x42000c00
    3e84:	42001000 	.word	0x42001000

00003e88 <sensor_analog_inputs>:
    3e88:	00080906                                ....

00003e8c <_tcc_intflag>:
    3e8c:	00000001 00000002 00000004 00000008     ................
    3e9c:	00001000 00002000 00004000 00008000     ..... ...@......
    3eac:	00010000 00020000 00040000 00080000     ................

00003ebc <tc_interrupt_vectors.11931>:
    3ebc:	00000e0d                                ....

00003ec0 <tc_interrupt_vectors.11931>:
    3ec0:	00000e0d 000030e6 000030e2 000030e2     .....0...0...0..
    3ed0:	00003144 00003144 000030fa 000030ec     D1..D1...0...0..
    3ee0:	00003100 00003132 000031cc 000031ac     .1..21...1...1..
    3ef0:	000031ac 00003238 000031be 000031da     .1..82...1...1..
    3f00:	000031b0 000031e8 00003228              .1...1..(2..

00003f0c <_init>:
    3f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f12:	bc08      	pop	{r3}
    3f14:	469e      	mov	lr, r3
    3f16:	4770      	bx	lr

00003f18 <__init_array_start>:
    3f18:	000000b5 	.word	0x000000b5

00003f1c <_fini>:
    3f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f22:	bc08      	pop	{r3}
    3f24:	469e      	mov	lr, r3
    3f26:	4770      	bx	lr

00003f28 <__fini_array_start>:
    3f28:	0000008d 	.word	0x0000008d
